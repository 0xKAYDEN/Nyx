using System;
using System.IO;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using Nyx.Server.Network.GamePackets;
using Nyx.Server.Network.GamePackets.Union;
using Nyx.Server.Client;
using Nyx.Server.Game.Features;
using System.Text;
using Nyx.Server.Game;
using Nyx.Server.Interfaces;
using System.Threading.Tasks;
using Message = Nyx.Server.Network.GamePackets.Message;
using System.Drawing;
namespace Nyx.Server.Network
{
    public static class PacketHandler
    {
        public static string ReadString(byte[] data, ushort position, ushort count)
        {
            StringBuilder builder = new StringBuilder();
            for (byte i = 0; i < count; i = (byte)(i + 1))
            {
                if (i > data.Length)
                    break;
                byte num2 = data[(ushort)(i + position)];
                builder.Append((char)num2);
            }
            return builder.ToString().Replace("\0", "").Replace("\r", "");
        }
        public static ulong ClientSeal = BitConverter.ToUInt64(Encoding.Default.GetBytes("TQClient"), 0);
        public static void HandlePacket(byte[] packet, Client.GameClient client)
        {
            if (packet == null)
                return;
            if (client == null)
                return;
            ushort Length = BitConverter.ToUInt16(packet, 0);
            ushort ID = BitConverter.ToUInt16(packet, 2);
            ushort TypeP4 = BitConverter.ToUInt16(packet, 4);
            ushort Offest6 = BitConverter.ToUInt16(packet, 6);
            if (client.Filtering)
                if (client.PacketFilter.Filter(ID))
                    return;
            if (ClientSeal != BitConverter.ToUInt64(packet, Length))
            {
                client.Disconnect();
                return;
            }
            switch (ID)
            {
                #region DailySignIn
                case 3200:
                    {
                        MsgSignIn.Handle(client, packet);
                        break;
                    }
                #endregion
                #region MsgItemRefineRecord
                case 3255:
                    {
                        var pkt = new MsgItemRefineRecord();
                        var myPacket = new byte[packet.Length - 8];
                        for (int i = 0; i < myPacket.Length; i++)
                        {
                            myPacket[i] = packet[i];
                        }
                        if (pkt.Read(myPacket))
                            pkt.Handle(client);
                       /* var packet2 = new byte[myPacket.Length - 4];
                        Array.Copy(myPacket, 4, packet2, 0, packet2.Length);
                        var variable = Kernel.Read7BitEncodedInt(packet2).SelectMany(BitConverter.GetBytes).Encode();
                        Console.WriteLine(PacketHandler.DumpPacket(variable));*/
                        break;
                    }
                #endregion
                #region MsgItemRefineOpt
                case 3251:
                    {
                        var pkt = new MsgItemRefineOpt();
                        var myPacket = new byte[packet.Length - 8];
                        for (int i = 0; i < myPacket.Length; i++)
                        {
                            myPacket[i] = packet[i];
                        }
                        if (pkt.Read(myPacket))
                            pkt.Handle(client, myPacket);
                        break;
                    }
                #endregion
                #region MsgUserAbilityScore
                case 3253:
                    {
                        var pkt = new MsgUserAbilityScore();
                        var myPacket = new byte[packet.Length - 8];
                        for (int i = 0; i < myPacket.Length; i++)
                        {
                            myPacket[i] = packet[i];
                        }
                        if (pkt.Read(myPacket))
                            pkt.Handle(client);
                        break;
                    }
                #endregion
                //#region MsgPrestigeRanking
                //case 3257:
                //    {
                //        var pkt = new MsgRankMemberShow();
                //        var myPacket = new byte[packet.Length - 8];
                //        for (int i = 0; i < myPacket.Length; i++)
                //        {
                //            myPacket[i] = packet[i];
                //        }
                //        if (pkt.Read(myPacket))
                //            pkt.Handle(client);
                //        break;
                //    }
                //#endregion
                #region MsgEquipRefineRank
                case 3256:
                    {
                        var pkt = new MsgEquipRefineRank();
                        var myPacket = new byte[packet.Length - 8];
                        for (int i = 0; i < myPacket.Length; i++)
                        {
                            myPacket[i] = packet[i];
                        }
                        if (pkt.Read(myPacket))
                            pkt.Handle(client);
                        break;
                    }
                #endregion
                #region CTF
                case 1063:
                    {
                        switch (packet[4])
                        {
                            case 0:
                                {
                                    if (client.Guild == null || client.AsMember == null) break;
                                    if (!CaptureTheFlag.IsWar)
                                    {
                                        var array = Kernel.Guilds.Values.Where(p => p.CTFdonationCPs != 0).OrderByDescending(p => p.CTFdonationSilver).ToArray();
                                        const byte maxcount = 5;
                                        byte page = packet[10];
                                        byte[] buffer = new byte[908];
                                        Writer.Write(900, 0, buffer);
                                        Writer.Write(1063, 2, buffer);
                                        Writer.Write(0, 4, buffer);
                                        Writer.Write(1, 6, buffer);
                                        Writer.Write((uint)(array.Length), 10, buffer);
                                        Writer.Write((uint)(array.Length), 14, buffer);
                                        Writer.Write(client.Guild.CTFdonationCPsold, 18, buffer);
                                        Writer.Write((ulong)client.Guild.CTFdonationSilverold, 22, buffer);
                                        int offset = 30;
                                        for (ushort x = (ushort)(page * maxcount - maxcount); x < page * maxcount; x++)
                                        {
                                            if (x >= array.Length) break;
                                            var guild = array[x];
                                            Writer.Write(guild.CTFdonationCPs, offset, buffer);
                                            offset += 4;
                                            Writer.Write((ulong)guild.CTFdonationSilver, offset, buffer);
                                            offset += 8;
                                            Writer.Write(guild.Name, offset, buffer);
                                            offset += 36;
                                            Writer.Write(guild.ID, offset, buffer);
                                            offset += 4;
                                        }
                                        client.Send(buffer);
                                    }
                                    else
                                    {
                                        byte page = packet[10];
                                        var array = client.Guild.Members.Values.Where(p => p.Exploits != 0).OrderByDescending(p => p.Exploits).ToArray();
                                        byte[] buffer = new byte[908];
                                        Writer.Write(900, 0, buffer);
                                        Writer.Write(1063, 2, buffer);
                                        Writer.Write(8, 4, buffer);
                                        Writer.Write(page, 6, buffer);
                                        Writer.Write((uint)array.Length, 10, buffer);
                                        Writer.Write(8, 14, buffer);
                                        Writer.Write(client.AsMember.Exploits, 18, buffer);
                                        int offset = 30;
                                        for (ushort x = 0; x < array.Length; x++)
                                        {
                                            if (x > 20) break;
                                            if (x >= array.Length) break;
                                            var member = array[x];
                                            Writer.Write(member.Name, offset, buffer);
                                            offset += 16;
                                            Writer.Write(member.Exploits, offset, buffer);
                                            offset += 4;
                                        }
                                        client.Send(buffer);
                                    }
                                    break;
                                }
                            case 1:
                                {
                                    if (client.Guild == null || client.AsMember == null) break;
                                    const byte maxcount = 5;
                                    byte page = packet[10];
                                    var array = client.Guild.Members.Values.Where(p => p.Exploits != 0).OrderByDescending(p => p.Exploits).ToArray();
                                    byte[] buffer = new byte[908];
                                    Writer.Write(900, 0, buffer);
                                    Writer.Write(1063, 2, buffer);
                                    Writer.Write(1, 4, buffer);
                                    Writer.Write(page, 6, buffer);
                                    Writer.Write((uint)array.Length, 10, buffer);
                                    Writer.Write(5, 14, buffer);
                                    Writer.Write(client.Guild.CTFdonationCPsold, 18, buffer);
                                    Writer.Write((ulong)client.Guild.CTFdonationSilverold, 22, buffer);
                                    Writer.Write((ushort)array.Length, 30, buffer);
                                    int offset = 30;
                                    for (ushort x = (ushort)(page * maxcount - maxcount); x < page * maxcount; x++)
                                    {
                                        if (x >= array.Length) break;
                                        var member = array[x];
                                        Writer.Write((ushort)(x + 1), offset, buffer);
                                        offset += 4;
                                        Writer.Write(member.Exploits, offset, buffer);
                                        offset += 4;
                                        Writer.Write(member.CTFCpsReward, offset, buffer);
                                        offset += 4;
                                        Writer.Write(member.CTFSilverReward, offset, buffer);
                                        offset += 8;
                                        Writer.Write(member.ID, offset, buffer);
                                        offset += 4;
                                        Writer.Write(member.Name, offset, buffer);
                                        offset += 36;
                                    }
                                    client.Send(buffer);
                                    break;
                                }
                            case 3:
                                {
                                    if (client.Guild == null || client.AsMember == null) break;
                                    uint setCTFCps = BitConverter.ToUInt32(packet, 18);
                                    if (client.Guild.ConquerPointFund > setCTFCps)
                                    {
                                        client.Guild.ConquerPointFund -= setCTFCps;
                                        client.Guild.CTFdonationCPsold += setCTFCps;
                                        client.Guild.CTFdonationCPs += setCTFCps;
                                        Database.GuildTable.SaveFunds(client.Guild);
                                    }
                                    goto case 0;
                                }
                            case 4:
                                {
                                    if (client.Guild == null || client.AsMember == null) break;
                                    uint setCTFMoney = BitConverter.ToUInt32(packet, 22);
                                    if (client.Guild.SilverFund > setCTFMoney)
                                    {
                                        client.Guild.SilverFund -= setCTFMoney;
                                        client.Guild.CTFdonationSilverold += setCTFMoney;
                                        client.Guild.CTFdonationSilver += setCTFMoney;
                                        Database.GuildTable.SaveFunds(client.Guild);
                                    }
                                    goto case 0;
                                }
                            case 5:
                                {
                                    if (client.Guild == null || client.AsMember == null) break;
                                    uint setCTFCps = BitConverter.ToUInt32(packet, 18);
                                    uint setCTFMoney = BitConverter.ToUInt32(packet, 22);
                                    if (client.Guild.ConquerPointFund > setCTFCps)
                                    {
                                        client.Guild.ConquerPointFund -= setCTFCps;
                                        client.Guild.CTFdonationCPsold += setCTFCps;
                                        client.Guild.CTFdonationCPs += setCTFCps;
                                        Database.GuildTable.SaveFunds(client.Guild);
                                    }
                                    if (client.Guild.SilverFund > setCTFMoney)
                                    {
                                        client.Guild.SilverFund -= setCTFMoney;
                                        client.Guild.CTFdonationSilverold += setCTFMoney;
                                        client.Guild.CTFdonationSilver += setCTFMoney;
                                        Database.GuildTable.SaveFunds(client.Guild);
                                    }
                                    goto case 0;
                                }
                            case 8:
                                {
                                    if (client.Guild == null || client.AsMember == null) break;
                                    const byte maxcount = 5;
                                    byte page = packet[10];
                                    var guild_array = Kernel.Guilds.Values.Where(p => p.Points != 0).OrderByDescending(p => p.Points).ToArray();
                                    byte[] buffer = new byte[908];
                                    Writer.Write(900, 0, buffer);
                                    Writer.Write(1063, 2, buffer);
                                    Writer.Write(0, 4, buffer);
                                    Writer.Write(page, 6, buffer);
                                    Writer.Write(10, 10, buffer);
                                    Writer.Write((uint)guild_array.Length, 14, buffer);
                                    client.Guild = client.AsMember.Guild;
                                    Writer.Write(client.Guild.CTFdonationCPsold, 18, buffer);
                                    Writer.Write((ulong)client.Guild.CTFdonationSilverold, 22, buffer);
                                    ushort offset = 30;
                                    for (ushort x = (ushort)(page * maxcount - maxcount); x < page * maxcount; x++)
                                    {
                                        if (x >= guild_array.Length) break;
                                        var guild = guild_array[x];
                                        Writer.Write(guild.CTFdonationCPsold, offset, buffer);
                                        offset += 4;
                                        Writer.Write((ulong)guild.CTFdonationSilverold, offset, buffer);
                                        offset += 8;
                                        Writer.Write(guild.Name, offset, buffer);
                                        offset += 36;
                                        Writer.Write(guild.ID, offset, buffer);
                                        offset += 4;
                                    }
                                    client.Send(buffer);
                                    break;
                                }
                            case 9:
                                {
                                    if (client.Guild == null || client.AsMember == null) break;
                                    if (CaptureTheFlag.IsWar)
                                    {
                                        new CaptureTheFlagRank(client).Send(client);
                                    }
                                    else
                                    {
                                        var array = Kernel.Guilds.Values.Where(p => p.Points != 0).OrderByDescending(p => p.Points).ToArray();
                                        byte[] Packet = new byte[356];
                                        Writer.Write(348, 0, Packet);
                                        Writer.Write(1063, 2, Packet);
                                        Packet[4] = 9;
                                        Packet[6] = 1;
                                        Packet[14] = 8;
                                        ushort index = 26;
                                        Writer.Write(client.Entity.UID, 18, Packet);
                                        for (byte i = 0; i < array.Length; i++)
                                        {
                                            if (i >= 8) break;
                                            if (i >= array.Length) break;
                                            var guild = array[i];
                                            Packet[index] = (byte)(i + 1);
                                            index = (ushort)(index + 4);
                                            Writer.Write(guild.Name, index, Packet);
                                            index = (ushort)(index + 16);
                                            Writer.Write(guild.Points, index, Packet);
                                            index = (ushort)(index + 4);
                                            Writer.Write(guild.MemberCount, index, Packet);
                                            index = (ushort)(index + 12);
                                        }
                                        client.Send(Packet);
                                    }
                                    break;
                                }
                            default:  break;
                        }
                        break;
                    }
                #endregion
                #region Roulette (2800)
                case 2800:
                    {
                        Roulette.RoulettePacket.PorocesCheck(packet, client);
                        break;
                    }
                case 2804:
                    {
                        Roulette.RoulettePacket.PorocesAction(packet, client);
                        break;
                    }
                case 2805:
                    {
                        Roulette.RoulettePacket.PorocesSignUp(packet, client);
                        break;
                    }
                #endregion
                #region Poker Tournament
                case 3400:
                    {
                        client.Send(packet);
                        break;
                    }
                #endregion
                #region Auction
                case 1320:
                    {
                        MsgAuction.Process(packet, client);
                        break;
                    }
                case 1321:
                    {
                        MsgAuctionItem.Process(packet, client);
                        break;
                    }
                case 1322:
                    {
                        MsgAuctionQuery.Process(packet, client);
                        break;
                    }
                #endregion
                #region AutoInvite
                case 1126:
                    {
                        AutoInvite.Process(packet, client);
                        break;
                    }
                #endregion
                #region QuizShow
                case 2068:
                    {
                        OpenQuiz.Process(packet, client);
                        break;
                    }
                #endregion
                #region CoatStorage + TitleStorage
                case 3300:
                    {
                        var pkt = new CoatStorage();

                        var myPacket = new byte[packet.Length - 8];

                        for (int i = 0; i < myPacket.Length; i++)
                        {
                            myPacket[i] = packet[i];
                        }

                        if (pkt.Read(myPacket))
                        {
                            pkt.Handle(client);
                        }
                        break;
                    }
                case 3301:
                    {
                        var pkt = new TitleStorage();

                        var myPacket = new byte[packet.Length - 8];

                        for (int i = 0; i < myPacket.Length; i++)
                        {
                            myPacket[i] = packet[i];
                        }

                        if (pkt.Read(myPacket))
                        {
                            pkt.Handle(client);
                        }
                        break;
                    }
                #endregion
                #region Activeness(2822)
                case 2822:
                    {
                        ClaimActivenessGift CA = new ClaimActivenessGift();
                        CA.Deserialize(packet);
                        switch (CA.Type)
                        {
                            case 1:
                                {
                                    if (client.Entity.ClaimedActivenessGift1 == 1)
                                        return;

                                    client.Inventory.AddTime(3005062, 43200);
                                    break;
                                }
                            case 2:
                                {
                                    if (client.Entity.ClaimedActivenessGift2 == 1)
                                        return;

                                    client.Inventory.AddTime(3005065, 43200);
                                    break;
                                }
                            case 3:
                                {
                                    if (client.Entity.ClaimedActivenessGift3 == 1)
                                        return;

                                    client.Inventory.AddTime(3005065, 43200);
                                    break;
                                }
                        }
                        if (CA.Type == 1)
                            client.Entity.ClaimedActivenessGift1 = 1;
                        if (CA.Type == 2)
                            client.Entity.ClaimedActivenessGift2 = 1;
                        if (CA.Type == 3)
                            client.Entity.ClaimedActivenessGift3 = 1;
                        CA.Send(client);
                        break;
                    }
                #endregion
                #region Union
                case 2622:
                    {
                        Network.GamePackets.Union.Union.Prosses(packet, client);
                        break;
                    }
                #endregion
                #region  InnerPower
                case 2610:
                    {
                        MsgInnerPower.InnerPowerHandler(client, packet);
                        break;
                    }
                #endregion
                #region Doantion Guild
                case 2101:
                    {
                        if (client.Guild == null)
                            return;
                        byte sub = (byte)BitConverter.ToUInt16(packet, 4);
                        byte pagenumber = (byte)BitConverter.ToUInt16(packet, 5);
                        #region TotalDoantion
                        if (sub == 9)
                        {
                            if (pagenumber == 0)
                                client.Send(Game.ConquerStructures.Society.GuildDoantion.BuildPacketTotalDoantionPage1(client, sub, (byte)pagenumber));


                            else if (pagenumber == 1)
                            {
                                client.Send(Game.ConquerStructures.Society.GuildDoantion.BuildPacketTotalDoantionPage2(client, sub, (byte)pagenumber));

                            }

                            else if (pagenumber == 2)
                                client.Send(Game.ConquerStructures.Society.GuildDoantion.BuildPacketTotalDoantionPage3(client, sub, (byte)pagenumber));
                            else if (pagenumber == 3)
                                client.Send(Game.ConquerStructures.Society.GuildDoantion.BuildPacketTotalDoantionPage4(client, sub, (byte)pagenumber));
                            else if (pagenumber == 4)
                                client.Send(Game.ConquerStructures.Society.GuildDoantion.BuildPacketTotalDoantionPage5(client, sub, (byte)pagenumber));
                            else if (pagenumber == 5)
                                client.Send(Game.ConquerStructures.Society.GuildDoantion.BuildPacketTotalDoantionPage6(client, sub, (byte)pagenumber));
                            else if (pagenumber == 6)
                                client.Send(Game.ConquerStructures.Society.GuildDoantion.BuildPacketTotalDoantionPage7(client, sub, (byte)pagenumber));
                            else if (pagenumber == 7)
                                client.Send(Game.ConquerStructures.Society.GuildDoantion.BuildPacketTotalDoantionPage8(client, sub, (byte)pagenumber));
                            else if (pagenumber == 8)
                                client.Send(Game.ConquerStructures.Society.GuildDoantion.BuildPacketTotalDoantionPage9(client, sub, (byte)pagenumber));
                            else if (pagenumber == 9)
                                client.Send(Game.ConquerStructures.Society.GuildDoantion.BuildPacketTotalDoantionPage10(client, sub, (byte)pagenumber));
                        }
                        #endregion
                        #region SilverDonation
                        if (sub == 0)
                        {
                            if (pagenumber == 0)
                                client.Send(Game.ConquerStructures.Society.GuildDoantion.BuildPacketSilverDonationPage1(client, sub, (byte)pagenumber));
                            else if (pagenumber == 1)
                                client.Send(Game.ConquerStructures.Society.GuildDoantion.BuildPacketSilverDonationPage2(client, sub, (byte)pagenumber));
                        }
                        #endregion
                        #region PkDonation
                        if (sub == 3)
                        {
                            if (pagenumber == 0)
                                client.Send(Game.ConquerStructures.Society.GuildDoantion.BuildPacketPkDonationPage1(client, sub, (byte)pagenumber));
                            else if (pagenumber == 1)
                                client.Send(Game.ConquerStructures.Society.GuildDoantion.BuildPacketPkDonationPage2(client, sub, (byte)pagenumber));
                        }
                        #endregion
                        #region CpsDonation
                        if (sub == 1)
                        {
                            if (pagenumber == 0)
                                client.Send(Game.ConquerStructures.Society.GuildDoantion.BuildPacketCpDonaionPage1(client, sub, (byte)pagenumber));
                            else if (pagenumber == 1)
                                client.Send(Game.ConquerStructures.Society.GuildDoantion.BuildPacketCpsDonationPage2(client, sub, (byte)pagenumber));
                        }
                        #endregion
                        #region ArsenalsDonation
                        if (sub == 4)
                        {
                            if (pagenumber == 0)
                                client.Send(Game.ConquerStructures.Society.GuildDoantion.BuildPacketArsenalDonationPage1(client, sub, (byte)pagenumber));
                            else if (pagenumber == 1)
                                client.Send(Game.ConquerStructures.Society.GuildDoantion.BuildPacketArsenalDonationPage2(client, sub, (byte)pagenumber));
                        }
                        #endregion
                        #region GuideDonation
                        if (sub == 2)
                        {
                            if (pagenumber == 0)
                                client.Send(Game.ConquerStructures.Society.GuildDoantion.BuildPacketGuideDonaionPage1(client, sub, (byte)pagenumber));
                            else if (pagenumber == 1)
                                client.Send(Game.ConquerStructures.Society.GuildDoantion.BuildPacketGuidePage2(client, sub, (byte)pagenumber));
                        }
                        #endregion
                        #region RoseDonation
                        if (sub == 5)
                        {
                            if (pagenumber == 0)
                                client.Send(Game.ConquerStructures.Society.GuildDoantion.BuildPacketRedRosseDonaionPage1(client, sub, (byte)pagenumber));
                            else if (pagenumber == 1)
                                client.Send(Game.ConquerStructures.Society.GuildDoantion.BuildPacketRedRossePage2(client, sub, (byte)pagenumber));
                        }
                        #endregion
                        #region LiliseDonation
                        if (sub == 7)
                        {
                            if (pagenumber == 0)
                                client.Send(Game.ConquerStructures.Society.GuildDoantion.BuildPacketLiliseDonaionPage1(client, sub, (byte)pagenumber));
                            else if (pagenumber == 1)
                                client.Send(Game.ConquerStructures.Society.GuildDoantion.BuildPacketLiliesPage2(client, sub, (byte)pagenumber));
                        }
                        #endregion
                        #region OrchadsDonation
                        if (sub == 6)
                        {
                            if (pagenumber == 0)
                                client.Send(Game.ConquerStructures.Society.GuildDoantion.BuildPacketOrchadesDonaionPage1(client, sub, (byte)pagenumber));
                            else if (pagenumber == 1)
                                client.Send(Game.ConquerStructures.Society.GuildDoantion.BuildPacketOrchadesPage2(client, sub, (byte)pagenumber));
                        }
                        #endregion
                        #region tulipsDonation
                        if (sub == 8)
                        {
                            if (pagenumber == 0)
                                client.Send(Game.ConquerStructures.Society.GuildDoantion.BuildPacketTupliseDonaionPage1(client, sub, (byte)pagenumber));
                            else if (pagenumber == 1)
                                client.Send(Game.ConquerStructures.Society.GuildDoantion.BuildPacketTuplisePage2(client, sub, (byte)pagenumber));
                        }
                        #endregion
                    }
                    break;

                #endregion
                #region ChangeName (2080)
                case 2080:
                    {
                        NameChange prize = new NameChange(false);
                        prize.Deserialize(packet);
                        switch (prize.Action)
                        {
                            case Network.GamePackets.NameChange.NameChangeAction.Request:
                                {
                                    string newname = Encoding.UTF7.GetString(packet, 10, 16).TrimEnd('\0');
                                    packet[6] = (byte)(5 - client.Entity.EditNameTimes);
                                    packet[8] = (byte)(client.Entity.EditNameTimes);
                                    prize.Send(client);
                                    client.Send(prize);
                                    if (newname != "")
                                    {
                                        if (newname == "")
                                            return;
                                        if (newname.Contains("[") && newname.Contains("]"))
                                            return;
                                        if (Npcs.InvalidCharacters(newname) && !newname.Contains("[") && !newname.Contains("GM") && !newname.Contains("own") && !newname.Contains("help") && !newname.Contains("pm") && !newname.Contains("]"))
                                        {
                                            foreach (var bad in Kernel.Insults)
                                                if (newname.Contains(bad)) return;
                                            Database.MySqlCommand cmd2 = new Database.MySqlCommand(Database.MySqlCommandType.SELECT).Select("entities").Where("name", newname);//debug and test!
                                            Database.MySqlReader r = new Database.MySqlReader(cmd2);
                                            if (!r.Read())
                                            {
                                                if (client.Entity.ConquerPoints >= 810)
                                                {
                                                    client.Entity.ConquerPoints -= 810;
                                                    client.Entity.NewName = newname;
                                                    foreach (var client2 in Kernel.GamePool.Values)
                                                    {
                                                        client2.Send(new Message(client.Entity.Name + ", Changed He's/Hers Name to " + newname + ", Will be affected after Relogin.",
                                                        Color.Red, Message.Talk));
                                                    }
                                                    client.Entity.EditNameTimes--;
                                                    packet[4] = 1;
                                                    prize.Send(client);
                                                    client.Send(prize);
                                                    Network.GamePackets.NpcReply npc = new Network.GamePackets.NpcReply(6, "Your new name is : " + newname + ", After relog You will get your new name, Want to Relog?");
                                                    npc.OptionID = 244;
                                                    client.Send(npc.Encode());
                                                }
                                                else
                                                {
                                                    Network.GamePackets.NpcReply npc = new Network.GamePackets.NpcReply(6, "Come back when you have " + 810 + " Cps.");
                                                    npc.OptionID = 255;
                                                    client.Send(npc.Encode());

                                                }
                                            }
                                            else
                                            {
                                                packet[4] = 2;
                                                prize.Send(client);
                                                client.Send(prize);

                                            }
                                        }
                                        else
                                        {
                                            Network.GamePackets.NpcReply npc = new Network.GamePackets.NpcReply(6, "Invaild Charcters Inside The Name!");
                                            npc.OptionID = 255;
                                            client.Send(npc.Encode());

                                        }
                                    }
                                    break;
                                }
                        }

                        break;
                    }
                #endregion
                #region JiangAttackFlag
                case 2704:
                    {
                        Game.JiangHu.AttackFlag Flag = (Game.JiangHu.AttackFlag)packet[4];
                        client.Entity.AttackJiang = Flag;
                        break;
                    }
                #endregion
                #region JiangHu(Rank)
                #region Rank
                case 2703:
                    {
                        if (Game.JiangHu.JiangHuRanking.TopRank100 == null) return;
                        ushort page = BitConverter.ToUInt16(packet, 4);
                        if (page > 10 || page == 0) return;
                        page -= 1;

                        int offset = page * 10;
                        int count = Math.Min(10, Game.JiangHu.JiangHuRanking.TopRank100.Length);

                        GamePackets.JiangHuRank jiang_rank = new GamePackets.JiangHuRank((byte)count);
                        jiang_rank.Page = (byte)(page + 1);
                        jiang_rank.RegisteredCount = (byte)Math.Min(100, Game.JiangHu.JiangHuRanking.TopRank100.Length);
                        if (client.Entity.MyJiang != null)
                            jiang_rank.MyRank = client.Entity.MyJiang.Rank;
                        for (byte x = 0; x < count; x++)
                        {
                            if (x + offset >= Game.JiangHu.JiangHuRanking.TopRank100.Length) break;

                            var obj = Game.JiangHu.JiangHuRanking.TopRank100[offset + x];
                            jiang_rank.Appren(obj.Rank, obj.Inner_Strength, obj.Level, obj.OwnName, obj.CustomizedName);
                        }
                        client.Send(jiang_rank.Encode());


                        break;
                    }
                #endregion
                #endregion
                #region JiangHu(Train)
                case 2702:
                    {
                        byte Mode = packet[9];
                        switch (Mode)
                        {
                            #region TrainFree
                            case 0:
                                {
                                    byte Star = packet[10];
                                    byte Stage = packet[11];
                                    byte Higher = packet[8];
                                    if (Star > 9 || Stage > 9)
                                        break;

                                    if (client.Entity.MyJiang != null)
                                    {

                                        if (client.Entity.SubClasses.StudyPoints >= 10 && client.Entity.MyJiang.Talent >= 1 && client.Entity.MyJiang.FreeCourse >= 10000)
                                        {
                                            if (Higher == 2 && (client.Inventory.Contains(3003126, 1) || client.Entity.ConquerPoints >= 50) || (Higher == 1 && (client.Entity.ConquerPoints >= 5) || client.Inventory.Contains(3003125, 1)) || Higher == 0)
                                            {

                                                if (Higher == 1)
                                                {
                                                    if (client.Inventory.Contains(3003125, 1))
                                                    {
                                                        client.Inventory.Remove(3003125, 1);
                                                    }
                                                    else
                                                        client.Entity.ConquerPoints -= 5;
                                                }
                                                if (Higher == 2)
                                                {
                                                    if (client.Inventory.Contains(3003126, 1))
                                                    {
                                                        client.Inventory.Remove(3003126, 1);
                                                    }
                                                    else
                                                    {
                                                        client.Entity.ConquerPoints -= 50;
                                                    }
                                                }
                                                client.Entity.MyJiang.Talent -= 1;
                                                client.Entity.MyJiang.Level = client.Entity.Level;
                                                client.Entity.MyJiang.FreeCourse -= 10000;
                                                client.Entity.SubClasses.StudyPoints -= 10;
                                                client.Entity.MyJiang.FreeTimeTodeyUsed += 1;
                                                client.ChampionPoints += 10;
                                                client.Entity.JiangStudyTimes++;
                                                client.Entity.MyJiang.CreateRollValue(client, Star, Stage, false, Higher);
                                                client.Entity.MyJiang.SendInfo(client, GamePackets.JiangHu.UpdateTime, client.Entity.MyJiang.FreeCourse.ToString(), client.Entity.MyJiang.Time.ToString());
                                                client.Entity.MyJiang.SendInfo(client, GamePackets.JiangHu.UpdateStar, Stage.ToString(), Star.ToString());
                                                client.Entity.MyJiang.SendInfo(client, GamePackets.JiangHu.UpdateTalent, client.Entity.UID.ToString(), client.Entity.MyJiang.Talent.ToString());

                                                client.Activenes.SendSinglePacket(client, Activeness.Types.JiangTask, (byte)client.Entity.JiangStudyTimes);
                                            }

                                        }

                                    }
                                    break;
                                }
                            #endregion
                            #region TrainWithCPs
                            case 1:
                                {

                                    if (client.Entity.MyJiang == null) break;
                                    byte Star = packet[10];
                                    byte Stage = packet[11];
                                    byte Higher = packet[8];
                                    if (Star > 9 || Stage > 9)
                                        break;
                                    if (client.Entity.ConquerPoints >= (client.Entity.MyJiang.RoundBuyPoints + 1) * 10)
                                    {
                                        if (Higher == 2 && (client.Inventory.Contains(3003126, 1) || client.Entity.ConquerPoints >= ((client.Entity.MyJiang.RoundBuyPoints + 1) * 10) + 50) || (Higher == 1 && (client.Entity.ConquerPoints >= ((client.Entity.MyJiang.RoundBuyPoints + 1) * 10) + 5) || client.Inventory.Contains(3003125, 1)) || Higher == 0)
                                        {
                                            client.Entity.ConquerPoints -= (uint)((client.Entity.MyJiang.RoundBuyPoints + 1) * 10);
                                            if (Higher == 1)
                                            {
                                                if (client.Inventory.Contains(3003125, 1))
                                                {
                                                    client.Inventory.Remove(3003125, 1);
                                                }
                                                else
                                                    client.Entity.ConquerPoints -= 5;
                                            }
                                            client.Entity.MyJiang.RoundBuyPoints = (byte)Math.Min(49, client.Entity.MyJiang.RoundBuyPoints + 1);

                                            client.Entity.MyJiang.Level = client.Entity.Level;
                                            client.ChampionPoints += 10;
                                            client.Entity.JiangStudyTimes++;
                                            if (Higher == 2)
                                            {
                                                if (client.Inventory.Contains(3003126, 1))
                                                {
                                                    client.Inventory.Remove(3003126, 1);
                                                }
                                                else
                                                {
                                                    client.Entity.ConquerPoints -= 50;
                                                }
                                            }
                                            client.Entity.MyJiang.CreateRollValue(client, Star, Stage, false, Higher);
                                            client.Entity.MyJiang.SendInfo(client, GamePackets.JiangHu.UpdateTime, client.Entity.MyJiang.FreeCourse.ToString(), client.Entity.MyJiang.Time.ToString());
                                            client.Entity.MyJiang.SendInfo(client, GamePackets.JiangHu.UpdateStar, Stage.ToString(), Star.ToString());
                                            client.Entity.MyJiang.SendInfo(client, GamePackets.JiangHu.UpdateTalent, client.Entity.UID.ToString(), client.Entity.MyJiang.Talent.ToString());

                                            client.Activenes.SendSinglePacket(client, Activeness.Types.JiangTask, (byte)client.Entity.JiangStudyTimes);
                                        }

                                    }
                                    break;
                                }
                            #endregion
                            #region TrainPill
                            case 2:
                                {
                                    byte Star = packet[10];
                                    byte Stage = packet[11];
                                    byte Higher = packet[8];
                                    if (client.Inventory.Contains(3003124, 1))
                                    {
                                        client.Inventory.Remove(3003124, 1);
                                        client.Entity.MyJiang.Level = client.Entity.Level;
                                        client.ChampionPoints += 10;
                                        client.Entity.JiangStudyTimes++;
                                        client.Entity.MyJiang.CreateRollValue(client, Star, Stage, false, Higher);
                                        client.Entity.MyJiang.SendInfo(client, GamePackets.JiangHu.UpdateStar, Stage.ToString(), Star.ToString());

                                        client.Activenes.SendSinglePacket(client, Activeness.Types.JiangTask, (byte)client.Entity.JiangStudyTimes);
                                    }
                                    break;
                                }
                            #endregion
                        }
                        break;
                    }
                #endregion
                #region JiangHu
                case 2700:
                    {
                        ushort Mode = packet[4];
                        switch (Mode)
                        {
                            case 10:
                                {
                                    if (client.Entity.MyJiang != null && client.Entity.ConquerPoints >= 20)
                                    {
                                        client.Entity.ConquerPoints -= 20;
                                    }
                                    break;
                                }
                            case 16:
                                {
                                    if (client.Entity.MyJiang != null && client.Inventory.Contains(3002029, 1) || client.Entity.MyJiang != null && client.Inventory.Contains(3002030, 1))
                                    {
                                        if (client.Inventory.Contains(3002029, 1))
                                        {
                                            client.Inventory.Remove(3002029, 1);
                                        }
                                        else
                                            client.Inventory.Remove(3002030, 1);
                                    }
                                    break;
                                }
                            case 11:
                                {
                                    if (client.Entity.MyJiang != null)
                                    {
                                        client.Entity.MyJiang.ApplayNewStar(client);
                                    }
                                    break;
                                }
                            case 9:
                                {
                                    string Name = ReadString(packet, 7, packet[6]);
                                    uint UID = 0;
                                    if (uint.TryParse(Name, out UID))
                                    {
                                        Client.GameClient pClient;
                                        if (Kernel.GamePool.TryGetValue(UID, out pClient))
                                        {
                                            if (pClient.Entity.MyJiang != null)
                                                pClient.Entity.MyJiang.SendStatus(client, pClient);
                                            else
                                            {
                                                GamePackets.JiangHuStatus stat = new GamePackets.JiangHuStatus(0);
                                                stat.Name = Name;
                                                 client.Send(stat.Encode());
                                            }

                                        }
                                    }
                                    break;
                                }
                            case 17:
                                {
                                    if (client.Entity.ConquerPoints >= 3)
                                    {

                                        if (client.Entity.MyJiang.Talent < 4)
                                        {
                                            client.Entity.MyJiang.Talent++;
                                            client.Entity.ConquerPoints -= 3;
                                            client.Entity.MyJiang.SendInfo(client, GamePackets.JiangHu.UpdateTalent, client.Entity.UID.ToString(), client.Entity.MyJiang.Talent.ToString());
                                        }
                                        else
                                        {
                                            client.MessageBox("You Already Have The Max Count Of Talents!");
                                        }
                                    }
                                    else
                                    {
                                        client.MessageBox("You Haven't 3 CPs!");
                                    }
                                    break;
                                }
                            case 13:
                                {
                                    if (client.Entity.MyJiang != null)
                                    {
                                        client.Entity.MyJiang.SendInfo(client, GamePackets.JiangHu.UpdateTime, client.Entity.MyJiang.FreeCourse.ToString(), client.Entity.MyJiang.Time.ToString());
                                    }
                                    break;
                                }
                            case 1:
                                {
                                    if (client.Entity.MyJiang == null)
                                    {

                                        byte NameLeng = packet[6];
                                        if (NameLeng > 16)
                                        {
                                            client.MessageBox("You used a name high!");
                                            return;
                                        }
                                        string ownname = client.Entity.Name;
                                        if (ownname.Contains('#'))
                                        {
                                            ownname = ownname.Replace('#', ' ');
                                        }
                                        string Name = ReadString(packet, 7, NameLeng);
                                        if (Game.JiangHu.AllowNameCaracters(Name))
                                        {
                                            client.Entity.MyJiang = new Game.JiangHu(client.Entity.UID);

                                            client.Entity.MyJiang.OwnName = ownname;//client.Entity.Name;
                                            client.Entity.MyJiang.CustomizedName = Name;
                                            client.Entity.MyJiang.OnJiangMode = true;
                                            client.Entity.MyJiang.SendInfo(client, GamePackets.JiangHu.SetName, client.Entity.UID.ToString()
                                                , client.Entity.MyJiang.Stage.ToString()
                                                , client.Entity.MyJiang.Star.ToString());

                                            GamePackets.JiangHuStatus jiang = new GamePackets.JiangHuStatus();

                                            jiang.Name = Name;
                                            jiang.Talent = client.Entity.MyJiang.Talent;//star
                                            jiang.Stage = client.Entity.MyJiang.Stage;
                                            jiang.StudyPoints = client.Entity.SubClasses.StudyPoints;
                                            jiang.FreeTimeTodey = client.Entity.MyJiang.FreeTimeTodey;
                                            client.Send(jiang.Encode());



                                            client.Entity.MyJiang.CreateTime();
                                            client.Entity.MyJiang.Stagers[0].Activate = true;
                                            // client.Entity.MyJiang.Level = client.Entity.Level;

                                            client.Entity.MyJiang.SendInfo(client, GamePackets.JiangHu.UpdateTime
                                  , client.Entity.MyJiang.FreeCourse.ToString()
                                  , client.Entity.MyJiang.Time.ToString());
                                            client.Entity.MyJiang.SendInfo(client, GamePackets.JiangHu.UpdateTalent
                , client.Entity.UID.ToString()
                , client.Entity.MyJiang.Talent.ToString());

                                            Database.JiangHu.New(client);
                                        }
                                    }
                                    break;

                                }
                            default:
                                {
                                    break;
                                }
                        }

                        break;
                    }
                #endregion
                #region Mailbox
                case 1046:
                    {
                        uint page = BitConverter.ToUInt32(packet, 8);
                        Mailbox inbox = new Mailbox();
                        inbox.Check(client, page);
                        inbox.Send(client);
                        break;
                    }
                case 1045:
                    {
                        Mailbox.Process(packet, client);
                        break;
                    }
                #endregion
                #region AutoHunt
                case 1070:
                    {
                        AutoHunt.Process(packet, client);
                        break;
                    }
                #endregion
                //#region ReloadScreen
                //case 1037:
                //    {
                //        if (client.Action != 2) return;
                //        client.SendScreen(packet, true);
                //        client.Screen.Reload(null);
                //        break;
                //    }
                //#endregion
                #region Clone Attack
                case 2812:
                    {
                        CloneAttack.Process(packet, client);
                        break;
                    }
                #endregion
                #region Mentor prize
                case 2067:
                    {
                        MentorPrize.Process(packet, client);
                        break;
                    }
                #endregion
                #region MentorApprentice
                case 2065:
                    {
                        MentorApprentice.MentorApprentices(packet, client);
                        break;
                    }
                case 2066:
                    {
                        MentorApprentice.MentorInformation(packet, client);
                        break;
                    }
                #endregion
                #region MentorPremio
                case 1036:
                    {
                        MentorPremio.Process(packet, client);
                        break;
                    }
                #endregion
                #region Way2Heroes
                case 2830:
                    {
                        byte type = packet[4];
                        switch (type)
                        {
                            case 0://show 
                                {
                                    uint stage = BitConverter.ToUInt32(packet, 5);
                                    Nyx.Server.Way2Heroes Way2Heroes = new Nyx.Server.Way2Heroes(stage);
                                    if (client.Way2Heroes.ContainsKey(stage))
                                        Way2Heroes.check(client.Way2Heroes[stage]);
                                    else
                                        client.Way2Heroes.Add(stage, new Way2Heroes.StageInfo() { UID = stage });
                                    client.Send(Way2Heroes);
                                    break;
                                }
                            case 1://claim sub prize 
                                {
                                    uint uid = BitConverter.ToUInt32(packet, 5);
                                    if (Nyx.Server.Way2Heroes.Stages.ContainsKey(uid))
                                    {
                                        uint stage = uid / 100;
                                        if (!client.Way2Heroes[stage].SubStages.ContainsKey(uid))
                                        {
                                            client.Way2Heroes[stage].SubStages.Add(uid, new Nyx.Server.Way2Heroes.SubStageInfo() { UID = uid, Done = true });
                                            var substage = Nyx.Server.Way2Heroes.Stages[uid];
                                            if (substage.Prize[0].ToString().Contains("73000"))
                                            {
                                                client.Inventory.AddBound(substage.Prize[0], (byte)(substage.Prize[0] % 10), (byte)substage.Prize[1]);
                                            }
                                            else
                                            {
                                                client.Inventory.AddBound(substage.Prize[0], 0, (byte)substage.Prize[1]);
                                            }
                                            client.Send(packet);
                                            Way2Heroes.Save(client);
                                        }
                                    }
                                    break;
                                }
                            case 2://claim main prize 
                                {
                                    uint uid = BitConverter.ToUInt32(packet, 5) * 100;
                                    if (Nyx.Server.Way2Heroes.Stages.ContainsKey(uid))
                                    {
                                        uint stage = uid / 100;
                                        client.Way2Heroes[stage].Done = true;
                                        var substage = Nyx.Server.Way2Heroes.Stages[uid];
                                        client.Inventory.AddBound(substage.Prize[0], (byte)substage.Prize[2], (byte)substage.Prize[1]);
                                        client.Send(packet);
                                        Nyx.Server.Way2Heroes.Save(client);
                                    }
                                    break;
                                }
                            default:
                                PrintPacket(packet);
                                break;
                        }
                        break;
                    }
                #endregion
                #region ChiReatreat (2536)
                case 2536:
                    {
                        Nyx.Server.Network.GamePackets.ChiRetreatRequest RetreatRequest =
                            new Nyx.Server.Network.GamePackets.ChiRetreatRequest(false);
                        RetreatRequest.Deserialize(packet);
                        switch (RetreatRequest.Type)
                        {
                            case Nyx.Server.Network.GamePackets.ChiRetreatRequest.RetreatType.Info:
                                {
                                    if (client.Entity.RetreatChiPowers == null)
                                        return;
                                    var count = client.Entity.RetreatChiPowers.Count;
                                    byte[] bytes = new byte[8 + 8 + 21 * count];
                                    Writer.Write((ushort)(bytes.Length - 8), 0, bytes);
                                    Writer.Write(2537, 2, bytes);
                                    Writer.Write(count, 4, bytes);
                                    int Offset = 8;
                                    for (int i = 1; i < count + 1; i++)
                                    {
                                        uint secs = 0;
                                        bytes[Offset] = System.Convert.ToByte(client.Entity.RetreatChiPowers[i - 1].Power);

                                        secs = (uint)(client.Entity.RetreatChiPowers[i - 1].EndTime.Year % 100 * 100000000 +
                                                       (client.Entity.RetreatChiPowers[i - 1].EndTime.Month) * 1000000 +
                                                       client.Entity.RetreatChiPowers[i - 1].EndTime.Day * 10000 +
                                                       client.Entity.RetreatChiPowers[i - 1].EndTime.Hour * 100 +
                                                       client.Entity.RetreatChiPowers[i - 1].EndTime.Minute);

                                        Offset++;
                                        Writer.Write(secs, Offset, bytes);
                                        Offset += 4;
                                        var powers = client.Entity.RetreatChiPowers[i - 1];
                                        var attributes = powers.Attributes;
                                        foreach (var attribute in attributes)
                                        {
                                            Writer.Write(attribute, Offset, bytes);
                                            Offset += 4;
                                        }
                                    }
                                    client.Send(bytes);
                                    break;
                                }
                            case Nyx.Server.Network.GamePackets.ChiRetreatRequest.RetreatType.RequestRetreat:
                                {
                                    if (client.ChiPoints >= 4000)
                                    {
                                        var powers = new Game.ConquerStructures.ChiRetreatStructure();
                                        powers.Power = RetreatRequest.Mode;
                                        powers.Attributes[0].Type =
                                            client.ChiPowers[(int)RetreatRequest.Mode - 1].Attributes[0].Type;
                                        powers.Attributes[0].Value =
                                            client.ChiPowers[(int)RetreatRequest.Mode - 1].Attributes[0].Value;
                                        powers.Attributes[1].Type =
                                            client.ChiPowers[(int)RetreatRequest.Mode - 1].Attributes[1].Type;
                                        powers.Attributes[1].Value =
                                            client.ChiPowers[(int)RetreatRequest.Mode - 1].Attributes[1].Value;
                                        powers.Attributes[2].Type =
                                            client.ChiPowers[(int)RetreatRequest.Mode - 1].Attributes[2].Type;
                                        powers.Attributes[2].Value =
                                            client.ChiPowers[(int)RetreatRequest.Mode - 1].Attributes[2].Value;
                                        powers.Attributes[3].Type =
                                            client.ChiPowers[(int)RetreatRequest.Mode - 1].Attributes[3].Type;
                                        powers.Attributes[3].Value =
                                            client.ChiPowers[(int)RetreatRequest.Mode - 1].Attributes[3].Value;
                                        powers.EndTime = DateTime.Now;
                                        powers.EndTime = DateTime.Now.AddDays(5);
                                        client.Entity.RetreatChiPowers.Add(powers);
                                        RetreatRequest.Type =
                                            Nyx.Server.Network.GamePackets.ChiRetreatRequest.RetreatType.Retreat;
                                        client.ChiPoints -= 4000;
                                        client.Send(RetreatRequest);

                                        Database.ChiRetreatTable.Save(client);
                                    }
                                    break;
                                }
                            case Nyx.Server.Network.GamePackets.ChiRetreatRequest.RetreatType.RequestUpdate:
                                {
                                    foreach (var power in client.Entity.RetreatChiPowers)
                                    {
                                        if (power.Power == RetreatRequest.Mode)
                                        {
                                            power.Power = RetreatRequest.Mode;
                                            power.Attributes[0].Type =
                                                client.ChiPowers[(int)RetreatRequest.Mode - 1].Attributes[0].Type;
                                            power.Attributes[0].Value =
                                                client.ChiPowers[(int)RetreatRequest.Mode - 1].Attributes[0].Value;
                                            power.Attributes[1].Type =
                                                client.ChiPowers[(int)RetreatRequest.Mode - 1].Attributes[1].Type;
                                            power.Attributes[1].Value =
                                                client.ChiPowers[(int)RetreatRequest.Mode - 1].Attributes[1].Value;
                                            power.Attributes[2].Type =
                                                client.ChiPowers[(int)RetreatRequest.Mode - 1].Attributes[2].Type;
                                            power.Attributes[2].Value =
                                                client.ChiPowers[(int)RetreatRequest.Mode - 1].Attributes[2].Value;
                                            power.Attributes[3].Type =
                                                client.ChiPowers[(int)RetreatRequest.Mode - 1].Attributes[3].Type;
                                            power.Attributes[3].Value =
                                                client.ChiPowers[(int)RetreatRequest.Mode - 1].Attributes[3].Value;
                                        }
                                    }
                                    RetreatRequest.Type =
                                        Nyx.Server.Network.GamePackets.ChiRetreatRequest.RetreatType.Update;
                                    client.Send(RetreatRequest);
                                    Database.ChiRetreatTable.Save(client);
                                    break;
                                }
                            case Nyx.Server.Network.GamePackets.ChiRetreatRequest.RetreatType.RequestRestore:
                                {
                                    var powers = client.ChiPowers[(int)RetreatRequest.Mode - 1];
                                    foreach (var power in client.Entity.RetreatChiPowers)
                                    {
                                        if (power.Power == RetreatRequest.Mode)
                                        {
                                            powers.Attributes[0].Type = power.Attributes[0].Type;
                                            powers.Attributes[0].Value = power.Attributes[0].Value;
                                            powers.Attributes[1].Type = power.Attributes[1].Type;
                                            powers.Attributes[1].Value = power.Attributes[1].Value;
                                            powers.Attributes[2].Type = power.Attributes[2].Type;
                                            powers.Attributes[2].Value = power.Attributes[2].Value;
                                            powers.Attributes[3].Type = power.Attributes[3].Type;
                                            powers.Attributes[3].Value = power.Attributes[3].Value;
                                        }
                                    }
                                    powers.CalculatePoints();
                                    Database.ChiTable.Sort(RetreatRequest.Mode);
                                    powers.Power = RetreatRequest.Mode;
                                    client.Send(new ChiPowers(true).Query(client));

                                    #region update ranking

                                    Database.ChiTable.ChiData[] array = null;
                                    switch (RetreatRequest.Mode)
                                    {
                                        case Game.Enums.ChiPowerType.Dragon:
                                            array = Database.ChiTable.Dragon;
                                            break;

                                        case Game.Enums.ChiPowerType.Phoenix:
                                            array = Database.ChiTable.Phoenix;
                                            break;

                                        case Game.Enums.ChiPowerType.Tiger:
                                            array = Database.ChiTable.Tiger;
                                            break;

                                        case Game.Enums.ChiPowerType.Turtle:
                                            array = Database.ChiTable.Turtle;
                                            break;
                                    }
                                    foreach (var chiData in array)
                                    {
                                        if (Kernel.GamePool.ContainsKey(chiData.UID))
                                        {
                                            var pClient = Kernel.GamePool[chiData.UID];
                                            if (pClient == null) continue;
                                            if (pClient.ChiData == null) continue;
                                            SendRankingQuery(new GenericRanking(true) { Mode = GenericRanking.QueryCount },
                                                pClient, GenericRanking.Chi + (uint)RetreatRequest.Mode,
                                                pClient.ChiData.SelectRank(RetreatRequest.Mode),
                                                pClient.ChiData.SelectPoints(RetreatRequest.Mode));
                                            if (pClient.Entity.UID == client.Entity.UID ||
                                                pClient.ChiData.SelectRank(RetreatRequest.Mode) < 50)
                                                pClient.LoadItemStats();
                                        }
                                    }

                                    #endregion

                                    Database.ChiTable.Save(client);
                                    RetreatRequest.Type =
                                        Nyx.Server.Network.GamePackets.ChiRetreatRequest.RetreatType.Restore;
                                    client.Send(RetreatRequest);
                                    break;
                                }
                            case Nyx.Server.Network.GamePackets.ChiRetreatRequest.RetreatType.RequestExtend2:
                                {
                                    if (client.ChiPoints >= 4000)
                                    {
                                        foreach (var power in client.Entity.RetreatChiPowers)
                                        {
                                            if (power.Power == RetreatRequest.Mode)
                                            {
                                                if (DateTime.Now.AddDays(6) > power.EndTime)
                                                {
                                                    power.EndTime = power.EndTime.AddDays(5);
                                                    client.ChiPoints -= 4000;
                                                    RetreatRequest.Type =
                                                        Nyx.Server.Network.GamePackets.ChiRetreatRequest.RetreatType
                                                            .Extend2;
                                                    client.Send(RetreatRequest);
                                                }
                                                else
                                                {
                                                    client.MessageBox("You can't extend retread time agine right now");
                                                }
                                            }
                                        }
                                    }
                                    Database.ChiRetreatTable.Save(client);
                                    break;
                                }
                            default:
                                break;
                        }
                        break;
                    }

                #endregion
                #region SkillSoul (1103)
                case 1103:
                    {
                        Spell spell = new Spell(true);
                        spell.Deserialize(packet);
                        if (!client.Spells.ContainsKey(spell.ID))
                            return;
                        switch (packet[20])
                        {
                            case 8: client.Spells[spell.ID].LevelHu2 = 1; break;
                            case 16: client.Spells[spell.ID].LevelHu2 = 2; break;
                            case 24: client.Spells[spell.ID].LevelHu2 = 3; break;
                            case 32: client.Spells[spell.ID].LevelHu2 = 4; break;
                            default:
                                {
                                    client.Spells[spell.ID].LevelHu2 = packet[20];
                                }
                                break;
                        }
                        packet[18] = 3;
                        client.Send(packet);
                        break;
                    }
                #endregion Skill Soul
                #region Advertise 2225 | 2227
                case 2226:
                    {
                        Nyx.Server.GamePackets.Advertise.Top8.Clear();
                        Nyx.Server.GamePackets.Advertise.LoadTop8();
                        byte PageNumber = packet[4];
                        Nyx.Server.Network.Advertise2.Execute(client, packet);
                        break;
                    }
                #region advetise screen
                case 2227:
                    {
                        switch (packet[4])
                        {
                            case 1:
                                {
                                    uint Id = BitConverter.ToUInt32(packet, 8);
                                    if (Kernel.Guilds.ContainsKey(Id))
                                    {
                                        if (client.Guild == null)
                                        {
                                            if (client.Union != null)
                                            {
                                                var Union = Kernel.Unions[client.UnionID];
                                                Union.RemoveMember(client);
                                            }
                                            Kernel.Guilds[Id].AddMember(client);
if (Kernel.Unions.ContainsKey(Kernel.Guilds[Id].UnionID) &&Kernel.Unions[Kernel.Guilds[Id].UnionID] != null)
                                            {
                                                Kernel.Unions[Kernel.Guilds[Id].UnionID].AddMember(client);
                                            }
                                        }

                                    }
                                    break;
                                }
                            case 2:
                                {

                                    byte[] recruit = new byte[288];
                                    Writer.Write(280, 0, recruit);
                                    Writer.Write(2225, 2, recruit);
                                    client.Send(recruit);
                                    break;
                                }

                        }
                        break;
                    }
                #endregion
                case 2225:
                    {
                        if (client.Guild == null)
                            return;
                        if (client.AsMember.Rank == Nyx.Server.Game.Enums.GuildMemberRank.Member)
                            return;
                        if (client.AsMember.Rank != Nyx.Server.Game.Enums.GuildMemberRank.GuildLeader)
                            return;
                        uint GuildID = BitConverter.ToUInt16(packet, 4);
                        string buletin = ASCIIEncoding.ASCII.GetString(packet, 8, 254);
                        ulong donation = BitConverter.ToUInt64(packet, 264);
                        if (client.Guild.SilverFund >= donation)
                        {
                            client.Guild.SilverFund -= donation;
                            client.Guild.Bulletin = buletin;
                            Nyx.Server.GamePackets.Advertise.SaveTop8(client.Guild);
                        }
                    }
                    return;
                #endregion Advertise
                #region Lotto
                case 1314:
                    {
                        Game.Lottery.Handle(packet, client);
                        break;
                    }
                #endregion
                #region CurrentLocation
                case 0x97E:
                    {

                        CurrentLocationPacket cur = new CurrentLocationPacket(packet);
                        client.Entity.CountryID = cur.CountryID;
                        cur.HeroID = client.Entity.UID;
                        client.SendScreen(cur, true);
                        break;
                    }
                #endregion
                #region One Armed Bandit (1351 + 1352)
                case 1351:
                    {
                        SlotMachineRequest req = new SlotMachineRequest();
                        req.Deserialize(packet);
                        switch (req.Mode)
                        {
                            case Enums.SlotMachineSubType.StartSpin:
                                {
                                    client.SMSpinCount++;
                                    INpc npc = client.Screen.SelectWhere<INpc>(MapObjectType.Npc, (o) => o.UID == req.NpcID).ElementAtOrDefault(0);
                                    if (npc != null)
                                    {
                                        #region CPSMachines
                                        if (npc.Mesh / 10 >= 1978 && npc.Mesh / 10 <= 1980 || npc.Mesh / 10 >= 2314 && npc.Mesh / 10 <= 2316)
                                        {
                                            int id = 0;
                                            if (npc.Mesh / 10 >= 1978 && npc.Mesh / 10 <= 1980)
                                            {
                                                id = npc.Mesh / 10 - 1977;
                                            }
                                            else
                                            {
                                                id = npc.Mesh / 10 - 2313;
                                            }
                                            uint cost = 10000;
                                            bool cps = id != 0;
                                            if (id == 1) cost = 3;
                                            if (id == 2) cost = 10;
                                            if (id == 3) cost = 100;
                                            cost *= req.BetMultiplier;
                                            if ((cps && client.Entity.ConquerPoints >= cost))
                                            {
                                                if (cps) client.Entity.ConquerPoints -= cost;
                                                client.SlotMachine = new Game.ConquerStructures.SlotMachine(req.NpcID, cost, true);
                                                client.SlotMachine.SpinTheWheels();
                                                client.SlotMachine.SendWheelsToClient(client);
                                                return;
                                            }
                                        }
                                        #endregion
                                        #region GoldMachines
                                        else if (npc.Mesh == 23136 || npc.Mesh == 19776)
                                        {
                                            uint cost = 10000;
                                            cost *= req.BetMultiplier;
                                            if (client.Entity.Money >= cost)
                                            {
                                                client.Entity.Money -= cost;
                                                client.SlotMachine = new Game.ConquerStructures.SlotMachine(req.NpcID, cost, false);
                                                client.SlotMachine.SpinTheWheels();
                                                client.SlotMachine.SendWheelsToClient(client);
                                                return;
                                            }
                                        }
                                        #endregion
                                    }
                                    break;
                                }
                            case Enums.SlotMachineSubType.ClientFinishSpin:
                                {
                                    if (client.SlotMachine != null)
                                    {
                                        uint reward = client.SlotMachine.GetRewardAmount(client);
                                        if (client.SlotMachine.Cps) client.Entity.ConquerPoints += reward;
                                        else client.Entity.Money += reward;
                                        client.Send(new SlotMachineResponse() { NpcID = req.NpcID, Mode = Enums.SlotMachineSubType.StopSpin });
                                        client.SlotMachine = null;
                                    }
                                    break;
                                }
                        }
                        break;
                    }
                #endregion
                #region EnitityCreate (1001)
                case 1001:
                    {
                        if (client.Action == 1)
                        {
                            EnitityCreate EC = new EnitityCreate();
                            EC.Deserialize(packet);
                            EC.Name = EC.Name.Remove("pm").Remove("gm").Remove("guard").Remove("owner").Remove("SnowBanshee").Remove("NemesisTyrant").Remove("TeratoDragon").Remove("GoldenOctopus").Remove("SilverOctopus").Remove("kosom").Remove("kosm").Remove("mtnak").Remove("kos").Remove("dick").Remove("mother").Remove("fuck").Remove("ass").Remove("pussy").Remove("bitch").Remove("omk").Remove("sharmot").Remove("sharmoot").Remove("5wl").Remove("5owl").Remove("5awl").Remove("zanya").Remove("zania").Remove("3rs").Remove("kosomen").Remove("mayteen").Remove("mayten").Remove("a7a").Remove("a7eh");
                            string Message = "";
                            Boolean Created = Database.EntityTable.CreateEntity(EC, client, ref Message);
                            if (Created)
                            {
                                client.JustCreated = true;
                                client.Send(new Message(Message, "ALLUSERS", System.Drawing.Color.Orange, GamePackets.Message.PopUP));
                            }
                            else
                                client.Send(new Message(Message, "ALLUSERS", System.Drawing.Color.Orange, GamePackets.Message.PopUP));

                        }
                        break;
                    }
                #endregion
                #region Chat/Message (1004)
                case 1004:
                    {
                        if (client.Action != 2)
                            return;
                        Message message = new Message();
                        message.Deserialize(packet);
                        Chat(message, client);
                        break;
                    }
                #endregion
                #region CaptureTheFlag
                case 2224:
                    {
                        CaptureTheFlag.Process(packet, client);
                        break;
                    }
                #endregion
                //#region Item/Ping (1009)
                //case 1009:
                //    {
                //        if (client.Action != 2)
                //            return;
                //        ItemUsage usage = new ItemUsage(false);
                //        usage.Deserialize(packet);
                //        if (!client.Entity.Dead || usage.ID == ItemUsage.Ping)
                //        {
                //            switch (usage.ID)
                //            {


                //                case 53:
                //                    {
                //                        uint ItemAdd = BitConverter.ToUInt32(packet, 12);
                //                        ConquerItem item_new = null;
                //                        if (client.Inventory.TryGetItem(ItemAdd, out item_new))
                //                        {
                //                            uint obtined_points = 0;
                //                            Database.ConquerItemInformation iteminfo = new Nyx.Server.Database.ConquerItemInformation(ItemAdd, 0);
                //                            Dictionary<uint, uint> amount = new Dictionary<uint, uint>();//packet[20]);
                //                            for (ushort i = 88; i < 88 + 4 * packet[24]; i += 4)
                //                            {
                //                                uint item_swap = BitConverter.ToUInt32(packet, i);
                //                                if (client.Inventory.ContainsUID(item_swap))
                //                                {
                //                                    ConquerItem item = null;
                //                                    if (client.Inventory.TryGetItem(item_swap, out item))
                //                                    {
                //                                        amount.Add(item_swap, i);
                //                                    }
                //                                    switch (item.ID)
                //                                    {
                //                                        case 191505:
                //                                        case 191605:
                //                                        case 191705:
                //                                        case 191805:
                //                                        case 191905:
                //                                        case 191405:
                //                                        case 183325:
                //                                        case 183315:
                //                                        case 183375:
                //                                        case 183305:
                //                                            {
                //                                                obtined_points += 300;
                //                                                break;
                //                                            }
                //                                        default:
                //                                            obtined_points += 50;
                //                                            break;
                //                                    }
                //                                }
                //                            }
                //                            if (iteminfo.BaseInformation.ConquerPointsWorth > obtined_points)
                //                            {
                //                                uint add_cps = 0;
                //                                add_cps = (uint)(iteminfo.BaseInformation.ConquerPointsWorth - obtined_points);
                //                                if (add_cps < client.Entity.ConquerPoints)
                //                                {
                //                                    client.Entity.ConquerPoints -= (uint)add_cps;
                //                                    foreach (uint key in amount.Keys)
                //                                    {
                //                                        if (client.Inventory.ContainsUID(key))
                //                                            client.Inventory.Remove(key, Nyx.Server.Game.Enums.ItemUse.Remove, true);
                //                                    }
                //                                    client.Inventory.Add(ItemAdd, 0, 1);

                //                                }
                //                            }
                //                            else
                //                            {
                //                                foreach (uint key in amount.Keys)
                //                                {
                //                                    if (client.Inventory.ContainsUID(key))
                //                                        client.Inventory.Remove(key, Nyx.Server.Game.Enums.ItemUse.Remove, true);
                //                                }
                //                                client.Inventory.Add(ItemAdd, 0, 1);

                //                            }
                //                        }
                //                        break;
                //                    }
                //                case 56:
                //                    {
                //                        ConquerItem Sash;
                //                        if (client.Inventory.TryGetItem(usage.UID, out Sash))
                //                        {
                //                            if (client.Entity.ExtraInventory < 300)
                //                            {
                //                                if (Sash.ID == 1100003)
                //                                {
                //                                    if (client.Entity.ExtraInventory < 297)
                //                                    {
                //                                        client.Entity.ExtraInventory += 3;
                //                                    }
                //                                    else
                //                                    {
                //                                        client.Entity.ExtraInventory = 300;
                //                                    }
                //                                    client.Inventory.Remove(Sash, Game.Enums.ItemUse.Remove);
                //                                }
                //                                else if (Sash.ID == 1100006)
                //                                {
                //                                    if (client.Entity.ExtraInventory < 294)
                //                                    {
                //                                        client.Entity.ExtraInventory += 6;
                //                                    }
                //                                    else
                //                                    {
                //                                        client.Entity.ExtraInventory = 300;
                //                                    }
                //                                    client.Inventory.Remove(Sash, Game.Enums.ItemUse.Remove);
                //                                }
                //                                else if (Sash.ID == 1100009)
                //                                {
                //                                    if (client.Entity.ExtraInventory < 288)
                //                                    {
                //                                        client.Entity.ExtraInventory += 12;
                //                                    }
                //                                    else
                //                                    {
                //                                        client.Entity.ExtraInventory = 300;
                //                                    }
                //                                    client.Inventory.Remove(Sash, Game.Enums.ItemUse.Remove);
                //                                }
                //                            }
                //                        }
                //                        break;
                //                    }

                //                case ItemUsage.MainEquipment:
                //                case ItemUsage.AlternateEquipment:
                //                    {
                //                        if (client.Entity.ContainsFlag3(Update.Flags3.Assassin))
                //                        {
                //                            client.Send(
                //                                new Message("You cannot switch between equipments while being an assasin!",
                //                                    Color.Red, Message.Agate));
                //                            return;
                //                        }
                //                        if (client.Entity.ContainsFlag(Update.Flags.Fly))
                //                        {
                //                            client.Send(new Message("You cannot switch equipment during flight.", System.Drawing.Color.Red, Message.Talk));
                //                            return;
                //                        }
                //                        if (client.Equipment.Free(ConquerItem.AlternateRightWeapon) && !client.Equipment.Free(ConquerItem.AlternateLeftWeapon))
                //                        {
                //                            client.Send(new Message("Invalid weapons! Missing the important weapons? Unequip the alternative left weapon.", System.Drawing.Color.Red, Message.Talk));
                //                            return;
                //                        }
                //                        foreach (var eq in client.Equipment.Objects)
                //                        {
                //                            if (eq != null)
                //                            {
                //                                var itemInfo = Database.ConquerItemInformation.BaseInformations[eq.ID];
                //                                if (!((EquipPassLvlReq(itemInfo, client) || EquipPassRbReq(itemInfo, client)) && EquipPassJobReq(itemInfo, client)))
                //                                {
                //                                    client.Send(new Message("You cannot switch equipment because " + ((Game.Enums.ItemPositionName)eq.Position).ToString().Replace("_", "~") + "'" + (string)((eq.Position % 20) == ConquerItem.Boots ? "" : "s") + " stats are not compatible with you (level or profession).", "SYSTEM", System.Drawing.Color.Red, Message.Talk));
                //                                    return;
                //                                }
                //                            }
                //                        }
                //                        client.Entity.AttackPacket = null;
                //                        client.Entity.RemoveFlag(Update.Flags.Fly);
                //                        client.AlternateEquipment = usage.ID == ItemUsage.AlternateEquipment;
                //                        client.LoadItemStats();
                //                        client.ReshareClan();
                //                        if (client.Team != null)
                //                            foreach (var teammate in client.Team.Teammates)
                //                                teammate.ReshareClan();
                //                        client.Equipment.UpdateEntityPacket();
                //                        WindowsStats Stats = new WindowsStats(client);
                //                        client.Send(Stats.Encode());
                //                        client.Send(new ClientEquip(client));
                //                        break;
                //                    }
                //                case 52:
                //                    {
                //                        var item = Database.ConquerItemTable.LoadItem(usage.UID);
                //                        item.Mode = Nyx.Server.Game.Enums.ItemMode.ChatItem;
                //                        item.Send(client);
                //                        break;
                //                    }
                //                case 41://itemtimeaccessories
                //                    {
                //                        ConquerItem item = new ConquerItem(true);
                //                        if (client.Inventory.TryGetItem(usage.UID, out item))
                //                        {
                //                            var infos = new Nyx.Server.Database.ConquerItemInformation(item.ID, 0);
                //                            item.UID = usage.UID;
                //                            item.TimeStamp = DateTime.Now;
                //                            item.Minutes = (byte)(infos.BaseInformation.Time == 0 ? 7 : (infos.BaseInformation.Time / 24 / 60));
                //                            TimeSpan Remain = item.TimeStamp.AddMinutes(item.Minutes) - DateTime.Now;
                //                            item.TimeLeftInMinutes = (uint)Remain.TotalSeconds;
                //                            usage.dwParam = 5;
                //                            client.Send(usage);
                //                        }
                //                        break;
                //                    }

                //                case ItemUsage.ArrowReload:
                //                    {
                //                        lock (client.ItemSyncRoot)
                //                            ReloadArrows(client.Equipment.TryGetItem(ConquerItem.LeftWeapon), client);
                //                        break;
                //                    }
                //                case ItemUsage.ShowBoothItems:
                //                    {
                //                        lock (client.ItemSyncRoot)
                //                            ShowBoothItems(usage, client);
                //                        break;
                //                    }
                //                case ItemUsage.AddItemOnBoothForSilvers:
                //                case ItemUsage.AddItemOnBoothForConquerPoints:
                //                    {
                //                        lock (client.ItemSyncRoot)
                //                            AddItemOnBooth(usage, client);
                //                        break;
                //                    }
                //                case ItemUsage.BuyFromBooth:
                //                    {
                                        
                //                        lock (client.ItemSyncRoot)
                //                            BuyFromBooth(usage, client);
                //                        break;
                //                    }
                //                case ItemUsage.RemoveItemFromBooth:
                //                    {
                //                        if (client.Booth.ItemList.ContainsKey(usage.UID))
                //                        {
                //                            client.Booth.ItemList.Remove(usage.UID);
                //                            client.SendScreen(usage, true);
                //                        }
                //                        break;
                //                    }
                //                case ItemUsage.EquipItem:
                //                    {
                //                        lock (client.ItemSyncRoot)
                //                            EquipItem(usage, client);
                //                        WindowsStats WS = new WindowsStats(client);
                //                        WS.Send(client);
                //                        break;
                //                    }
                //                case ItemUsage.UnequipItem:
                //                    {
                //                        lock (client.ItemSyncRoot)
                //                            UnequipItem(usage, client);
                //                        client.Equipment.UpdateEntityPacket();
                //                        WindowsStats WS = new WindowsStats(client);
                //                        WS.Send(client);
                //                        break;
                //                    }
                //                case 55:
                //                case ItemUsage.BuyFromNPC:
                //                    {
                //                        lock (client.ItemSyncRoot)
                //                            HandleBuyFromNPC(usage, client);
                //                        break;
                //                    }
                //                case ItemUsage.SellToNPC:
                //                    {
                //                        lock (client.ItemSyncRoot)
                //                            HandleSellToNPC(usage, client);
                //                        break;
                //                    }

                //                case ItemUsage.VIPRepair:
                //                    {
                //                        HandleVIPRepair(usage, client);
                //                        break;
                //                    }
                //                case ItemUsage.Repair:
                //                    {
                //                        lock (client.ItemSyncRoot)
                //                            HandleRepair(usage, client);
                //                        break;
                //                    }
                //                case ItemUsage.MeteorUpgrade:
                //                case ItemUsage.DragonBallUpgrade:
                //                    {
                //                        UpgradeItem(usage, client);
                //                        break;
                //                    }

                //                case ItemUsage.Ping:
                //                    {
                //                        client.Send(usage);
                //                        break;
                //                    }
                //                case ItemUsage.ViewWarehouse:
                //                    {
                //                        usage.dwParam = client.MoneySave;
                //                        client.Send(usage);
                //                        break;
                //                    }
                //                case ItemUsage.WarehouseDeposit:
                //                    {
                //                        if (client.Entity.Money >= usage.dwParam)
                //                        {
                //                            client.Entity.Money -= usage.dwParam;
                //                            client.MoneySave += usage.dwParam;
                //                        }
                //                        break;
                //                    }
                //                case ItemUsage.WarehouseWithdraw:
                //                    {
                //                        if (client.MoneySave >= usage.dwParam)
                //                        {
                //                            client.Entity.Money += usage.dwParam;
                //                            client.MoneySave -= usage.dwParam;
                //                        }
                //                        break;
                //                    }
                //                case ItemUsage.DropItem:
                //                    {
                //                        DropItem(usage, client);
                //                        break;
                //                    }
                //                case ItemUsage.DropMoney:
                //                    {

                //                        if (client.Entity.Money >= usage.UID)
                //                        {
                //                            ushort X = client.Entity.X, Y = client.Entity.Y;
                //                            if (client.Map.SelectCoordonates(ref X, ref Y))
                //                            {
                //                                uint ItemID = MoneyItemID(usage.UID);
                //                                FloorItem floorItem = new FloorItem(true);
                //                                floorItem.ValueType = FloorItem.FloorValueType.Money;
                //                                floorItem.Value = usage.UID;
                //                                floorItem.ItemID = ItemID;
                //                                floorItem.MapID = client.Map.ID;
                //                                floorItem.MapObjType = Game.MapObjectType.Item;
                //                                floorItem.X = X;
                //                                floorItem.Y = Y;
                //                                floorItem.Type = FloorItem.Drop;
                //                                floorItem.OnFloor = Time32.Now;
                //                                floorItem.UID = FloorItem.FloorUID.Next;
                //                                while (client.Map.Npcs.ContainsKey(floorItem.UID))
                //                                    floorItem.UID = FloorItem.FloorUID.Next;
                //                                client.SendScreenSpawn(floorItem, true);
                //                                client.Map.AddFloorItem(floorItem);
                //                                client.Entity.Money -= usage.UID;

                //                            }
                //                        }

                //                        break;
                //                    }
                //                case ItemUsage.Enchant:
                //                    {
                //                        EnchantItem(usage, client);
                //                        break;
                //                    }
                //                case ItemUsage.SocketTalismanWithItem:
                //                    {
                //                        SocketTalismanWithItem(usage, client);
                //                        break;
                //                    }
                //                case ItemUsage.SocketTalismanWithCPs:
                //                    {
                //                        SocketTalismanWithCPs(usage, client);
                //                        break;
                //                    }
                //                case ItemUsage.RedeemGear:
                //                    {
                //                        var item = client.DeatinedItem[usage.UID];
                //                        if (item != null)
                //                        {
                //                            if (DateTime.Now > item.Date.AddDays(7))
                //                            {
                //                                client.Send(new Message("This item is expired!", System.Drawing.Color.Red, Message.TopLeft));
                //                                return;
                //                            }
                //                            if (client.Entity.ConquerPoints >= item.ConquerPointsCost && client.Inventory.Count < 40)
                //                            {
                //                                client.Entity.ConquerPoints -= item.ConquerPointsCost;
                //                                Database.EntityTable.UpdateCps(client);
                //                                usage.dwParam = client.Entity.UID;
                //                                usage.dwExtraInfo3 = item.ConquerPointsCost;
                //                                client.Send(usage);
                //                                client.Inventory.Add(item.Item, Game.Enums.ItemUse.Add);
                //                                Database.ClaimItemTable.Redeem(item, client);
                //                                Database.DetainedItemTable.Claim(item, client);
                //                                client.DeatinedItem.Remove(item.UID);
                //                                if (Kernel.GamePool.ContainsKey(item.GainerUID))
                //                                {
                //                                    GameClient pClient;
                //                                    if (Kernel.GamePool.TryGetValue(item.GainerUID, out pClient))
                //                                    {
                //                                        if (pClient.Entity != null && pClient != null && pClient.ClaimableItem != null)
                //                                        {
                //                                            pClient.ClaimableItem[item.UID].OwnerUID = 500;
                //                                            pClient.ClaimableItem[item.UID].MakeItReadyToClaim();
                //                                            usage.dwParam = pClient.Entity.UID;
                //                                            usage.ID = ItemUsage.ClaimGear;
                //                                            pClient.Send(usage);
                //                                            pClient.ClaimableItem[item.UID].Send(pClient);
                //                                        }
                //                                    }
                //                                }
                //                                Message message = new Message(" " + client.Entity.Name + " has redeemed his Gear and Pay " + item.ConquerPointsCost + " CPS . Congratulations!", System.Drawing.Color.Wheat, Message.Talk);
                //                                foreach (var client2 in Kernel.GamePool.Values)
                //                                {
                //                                    client2.Send(message);
                //                                }
                //                            }
                //                        }
                //                        else client.Send(new Message("The item you want to redeem has already been redeemed.", System.Drawing.Color.Red, Message.TopLeft));
                //                        break;
                //                    }
                //                case ItemUsage.ClaimGear:
                //                    {
                //                        if (client.Inventory.Count < 40)
                //                        {
                //                            var item = client.ClaimableItem[usage.UID];
                //                            if (item != null)
                //                            {
                //                                if (item.Bound && item.OwnerUID != 500)
                //                                {
                //                                    if (DateTime.Now >= item.Date.AddDays(7))
                //                                    {
                //                                        Database.ClaimItemTable.Claim(item, client);
                //                                        client.ClaimableItem.Remove(item.UID);

                //                                        usage.dwParam = client.Entity.UID;
                //                                        usage.dwExtraInfo3 = item.ConquerPointsCost;
                //                                        client.Send(usage);
                //                                    }
                //                                    client.Send(new Message("Unnclaimable item!", System.Drawing.Color.Red, Message.TopLeft));
                //                                    return;
                //                                }
                //                                if (DateTime.Now < item.Date.AddDays(7) && item.OwnerUID != 500)
                //                                {
                //                                    client.Send(new Message("This item is not expired. You cannot claim it yet!", System.Drawing.Color.Red, Message.TopLeft));
                //                                    return;
                //                                }
                //                                if (item.OwnerUID == 500)
                //                                    client.Entity.ConquerPoints += item.ConquerPointsCost;
                //                                else
                //                                {
                //                                    client.Inventory.Add(item.Item, Game.Enums.ItemUse.Move);
                //                                    Message message = new Message("Thank you for arresting " + item.OwnerName + " , " + item.GainerName + ". The arrested one has redeemed his items and you have received a great deal of ConquerPoints as reward. Congratulations!", System.Drawing.Color.Wheat, Message.Talk);
                //                                    foreach (var client2 in Kernel.GamePool.Values)
                //                                    {
                //                                        client2.Send(message);
                //                                    }
                //                                }
                //                                Database.ClaimItemTable.Claim(item, client);
                //                                client.ClaimableItem.Remove(item.UID);
                //                                usage.dwParam = client.Entity.UID;
                //                                usage.dwExtraInfo3 = item.ConquerPointsCost;
                //                                client.Send(usage);
                //                                Message message2 = new Message("Thank you for arresting red/black name players " + client.Entity.Name + " has recived " + item.ConquerPointsCost + " CPS . Congratulations!", System.Drawing.Color.Wheat, Message.Talk);
                //                                foreach (var client2 in Kernel.GamePool.Values)
                //                                {
                //                                    client2.Send(message2);
                //                                }
                //                            }
                //                            else client.Send(new Message("The item you want to claim has already been claimed.", System.Drawing.Color.Red, Message.TopLeft));
                //                        }
                //                        break;
                //                    }
                //                case ItemUsage.SocketerMan:
                //                    {
                //                        SocketItem(usage, client);
                //                        client.Send(packet);
                //                        break;
                //                    }
                //                case 40: { uint ItemAdd = BitConverter.ToUInt32(packet, 8); ConquerItem item_new = null; if (client.Inventory.TryGetItem(ItemAdd, out item_new) || client.Equipment.TryGetItem(ItemAdd) != null) { if (item_new == null) if (client.Equipment.TryGetItem(ItemAdd) != null) item_new = client.Equipment.TryGetItem(ItemAdd); var itemtype = item_new.GetItemType(); if (itemtype == ConquerItem.ItemTypes.GemID) return; ushort pos = Network.PacketHandler.ItemPosition(item_new.ID); if (pos == ConquerItem.Bottle || pos == ConquerItem.Fan || pos == ConquerItem.Garment || pos == ConquerItem.Wing || pos == ConquerItem.LeftWeaponAccessory || pos == ConquerItem.RightWeaponAccessory || pos == ConquerItem.Steed || pos == ConquerItem.SteedArmor || pos == ConquerItem.SteedCrop || pos == ConquerItem.Tower) { client.Send(new Message("Sorry can't bless this item !", System.Drawing.Color.Red, Message.Talk)); return; } if (item_new.Bless >= 7) return; Queue<uint> amount = new Queue<uint>(packet[26]); for (ushort i = 91; i < 91 + 4 * packet[26]; i += 4) { uint uid = BitConverter.ToUInt32(packet, i); if (client.Inventory.ContainsUID(uid)) amount.Enqueue(uid); else return; } byte oldbless = item_new.Bless; if (item_new.Bless == 0 && amount.Count == 5) { item_new.Bless = 1; client.Entity.Update(10, "Aegis1", true); } else if (item_new.Bless == 1 && amount.Count == 1) { item_new.Bless = 3; client.Entity.Update(10, "Aegis2", true); } else if (item_new.Bless == 3 && amount.Count == 3) { item_new.Bless = 5; client.Entity.Update(10, "Aegis3", true); } else if (item_new.Bless == 5 && amount.Count == 5) { item_new.Bless = 7; client.Entity.Update(10, "Aegis4", true); } if (oldbless == item_new.Bless) return; while (amount.Count != 0) client.Inventory.Remove(amount.Dequeue(), Nyx.Server.Game.Enums.ItemUse.Remove, true); item_new.Mode = Nyx.Server.Game.Enums.ItemMode.Update; item_new.Send(client); usage.dwParam = 1; Database.ConquerItemTable.UpdateBless(item_new); } client.Send(packet); break; }
                //                case ItemUsage.GemCompose:
                //                    {
                //                        #region GemCompose
                //                        UInt32 Ident = usage.UID;
                //                        client.Inventory.Remove(Ident, 15);
                //                        client.Inventory.Add(Ident + 1, 0, 1);
                //                        usage.dwParam = 1;
                //                        client.Send(usage);
                //                        #endregion
                //                        break;
                //                    }
                //                case ItemUsage.ToristSuper:
                //                    {
                //                        #region GemCompose
                //                        if (client.Entity.Money >= 100000)
                //                        {
                //                            client.Inventory.Remove(700002, 1);
                //                            client.Inventory.Remove(700012, 1);
                //                            client.Inventory.Remove(700022, 1);
                //                            client.Inventory.Remove(700032, 1);
                //                            client.Inventory.Remove(700042, 1);
                //                            client.Inventory.Remove(700052, 1);
                //                            client.Inventory.Remove(700062, 1);
                //                            client.Entity.Money -= 100000;
                //                            client.Inventory.Add(700072, 0, 1);
                //                            client.Send(usage);
                //                            usage.dwParam = 1;
                //                        }
                //                        else
                //                        {
                //                            client.Send(new Message("Sorry you don`t have 100,000 silver!.", System.Drawing.Color.Red, Message.Talk));
                //                        }
                //                        #endregion
                //                        break;
                //                    }
                //                case ItemUsage.SplitStack:
                //                    {
                //                        ConquerItem mainItem = null;
                //                        ConquerItem minorItem = new ConquerItem(true);
                //                        Database.ConquerItemInformation infos = null;
                //                        minorItem.Color = (Nyx.Server.Game.Enums.Color)Kernel.Random.Next(4, 8);
                //                        if (client.Inventory.TryGetItem(usage.UID, out mainItem))
                //                        {
                //                            infos = new Nyx.Server.Database.ConquerItemInformation(mainItem.ID, 0);
                //                            if (mainItem.StackSize > 1 && mainItem.StackSize <= infos.BaseInformation.StackSize)
                //                            {
                //                                if (client.Inventory.Count < 40)
                //                                {
                //                                    ushort Amount = (ushort)usage.dwParam;

                //                                    mainItem.StackSize -= Amount;
                //                                    mainItem.Mode = Game.Enums.ItemMode.Update;
                //                                    mainItem.Send(client);
                //                                    mainItem.Mode = Game.Enums.ItemMode.Default;

                //                                    minorItem.ID = mainItem.ID;
                //                                    minorItem.StackSize += Amount;
                //                                    minorItem.Durability = mainItem.Durability;
                //                                    client.Inventory.Add(minorItem, Game.Enums.ItemUse.CreateAndAdd);
                //                                    Database.ConquerItemTable.UpdateStack(mainItem);
                //                                }
                //                            }
                //                        }
                //                        break;
                //                    }
                //                case ItemUsage.MergeStackableItems:
                //                    {
                //                        ConquerItem mainItem = null;
                //                        ConquerItem minorItem = new ConquerItem(true);
                //                        Database.ConquerItemInformation infos = null;
                //                        minorItem.Color = (Nyx.Server.Game.Enums.Color)Kernel.Random.Next(4, 8);
                //                        if (client.Inventory.TryGetItem(usage.UID, out mainItem) && client.Inventory.TryGetItem(usage.dwParam, out minorItem))
                //                        {
                //                            if (mainItem.ID == minorItem.ID)
                //                            {
                //                                infos = new Nyx.Server.Database.ConquerItemInformation(mainItem.ID, 0);
                //                                if (mainItem.StackSize < 1)
                //                                    mainItem.StackSize = 1;
                //                                if (minorItem.StackSize < 1)
                //                                    minorItem.StackSize = 1;

                //                                if ((mainItem.StackSize + minorItem.StackSize) <= infos.BaseInformation.StackSize)
                //                                {
                //                                    mainItem.StackSize += minorItem.StackSize;
                //                                    mainItem.Mode = Game.Enums.ItemMode.Update;
                //                                    mainItem.Send(client);
                //                                    mainItem.Mode = Game.Enums.ItemMode.Default;
                //                                    Database.ConquerItemTable.UpdateStack(mainItem);

                //                                    client.Inventory.Remove(minorItem, Game.Enums.ItemUse.Remove);
                //                                }
                //                            }
                //                        }
                //                        break;
                //                    }
                //                case 34:
                //                    {
                //                        break;
                //                    }
                //                case ItemUsage.LowerEquipment:
                //                    {
                //                        ConquerItem item = null;
                //                        if (client.Inventory.TryGetItem(usage.UID, out item))
                //                        {
                //                            if (IsArrow(item.ID))
                //                                return;
                //                            ConquerItem upgrade = null;
                //                            if (client.Inventory.TryGetItem(usage.UID, out upgrade))
                //                            {
                //                                if (client.Entity.ConquerPoints < 54)
                //                                {
                //                                    client.Send(new Message("You don't have 54CPs.", Color.Red, Message.TopLeft));
                //                                    return;
                //                                }
                //                                client.Entity.ConquerPoints -= 54;
                //                                Database.ConquerItemInformation infos = new Nyx.Server.Database.ConquerItemInformation(item.ID, item.Plus);
                //                                if (infos.BaseInformation.Level <= 15) return;
                //                                int startwith = (int)(infos.BaseInformation.ID / 1000);
                //                                int endwith = (int)(infos.BaseInformation.ID % 10);
                //                                var sitem = infos.LowestID(ItemMinLevel(ItemPosition(infos.BaseInformation.ID)));
                //                                //  var sitem = Nyx.Server.Database.ConquerItemInformation.BaseInformations.Values.Where(x => (x.ID % 10) == endwith && (x.ID / 1000) == startwith && x.Level >= 15).OrderBy(y => y.Level).First();
                //                                item.ID = sitem;
                //                                infos = new Nyx.Server.Database.ConquerItemInformation(item.ID, item.Plus);
                //                                item.Durability = item.MaximDurability = infos.BaseInformation.Durability;
                //                                Database.ConquerItemTable.UpdateItemID(item);
                //                                Database.ConquerItemTable.UpdateDurabilityItem(item);
                //                                item.Mode = Nyx.Server.Game.Enums.ItemMode.Update;
                //                                item.Send(client);
                //                                item = ItemSocket(item, 2);
                //                            }
                //                        }
                //                        break;
                //                    }
                //                default:
                //                    {
                //                        break;
                //                    }
                //            }
                //        }
                //        break;
                //    }
                //#endregion
                #region String (1015)
                case 1015:
                    {
                        if (client.Action != 2)
                            return;
                        _String stringpacket = new _String(false);
                        stringpacket.Deserialize(packet);
                        switch (stringpacket.Type)
                        {
                            case _String.StartGamble:
                                {
                                    client.Entity.Gambleing = new Gambleing(true);
                                    client.Entity.Gambleing.Type = GamePackets.Gambleing.Gambl.BeginGamble;
                                    client.Entity.Gambleing.StartTime = DateTime.Now;
                                    client.Entity.Gambleing.Seconds = 50;
                                    client.Entity.Gambleing.ID = (ushort)stringpacket.UID;
                                    client.Send(packet);
                                    client.Send(client.Entity.Gambleing);
                                    break;
                                }

                            case _String.EndGamble:
                                {
                                    if (client.Entity.Gambleing != null)
                                    {
                                        client.Entity.Gambleing.Seconds = 0;
                                        client.Entity.Gambleing.Type = Gambleing.Gambl.EndGamble;
                                        client.Send(client.Entity.Gambleing);
                                        client.Entity.Gambleing = null;
                                    }
                                    break;
                                }
                            case _String.WhisperDetails:
                                {
                                    if (stringpacket.Texts.Count > 0)
                                    {
                                        foreach (var pClient in Kernel.GamePool.Values)
                                        {
                                            if (pClient != null)
                                            {
                                                if (pClient.Entity != null)
                                                {
                                                    if (pClient.Entity.Name == stringpacket.Texts[0])
                                                    {
                                                        string otherstring = "";
                                                        otherstring += pClient.Entity.UID + " ";
                                                        otherstring += pClient.Entity.Level + " ";
                                                        otherstring += pClient.Entity.BattlePower + " #";
                                                        if (pClient.Guild != null)
                                                        {
                                                            if (pClient.Entity.GuildID != 0)
                                                                otherstring += pClient.Guild.Name + " fNone#";
                                                        }
                                                        else
                                                            otherstring += "None fNone# ";
                                                        otherstring += pClient.Entity.Spouse + " ";
                                                        otherstring += (byte)(pClient.Entity.NobilityRank) + " ";
                                                        if (pClient.Entity.Body % 10 < 3) otherstring += "1";
                                                        else otherstring += "0";
                                                        stringpacket.Texts.Add(otherstring);
                                                        stringpacket.TextsCount = 1;
                                                        stringpacket.Type = 26;
                                                        client.Send(stringpacket);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    break;
                                }
                        }
                        break;
                    }
                #endregion
                #region Gamble

                case 1113:
                    {
                        if (client.Entity.Money < BitConverter.ToUInt16(packet, 16))
                            break;
                        client.Entity.Money -= BitConverter.ToUInt16(packet, 16);
                        var Bet = new Gambleing(false);
                        Bet.Type = Gambleing.Gambl.ConfirmPlaceChip;
                        Bet.Seconds = 1;
                        Bet.ID = client.Entity.Gambleing.ID;
                        Bet.Number = packet[12];
                        Bet.Amount = BitConverter.ToUInt16(packet, 16);
                        client.Send(packet);
                        byte Number = 0;
                        byte precent = 0;

                        #region get right number

                        if (packet[12] == 2)
                        {
                            Number = 3;
                            precent = 216;
                        }
                        else if (packet[12] == 3)
                        {
                            Number = 6;
                            precent = 216;
                        }
                        else if (packet[12] == 4)
                        {
                            Number = 9;
                            precent = 216;
                        }
                        else if (packet[12] == 5)
                        {
                            Number = 12;
                        }
                        else if (packet[12] == 6)
                        {
                            Number = 15;
                            precent = 216;
                        }
                        else if (packet[12] == 7)
                        {
                            Number = 15;
                            precent = 216;
                        }
                        else if (packet[12] == 1)
                        {
                            Number = 1;
                            precent = 2;
                        }
                        else if (packet[12] == 0)
                        {
                            Number = 0;
                            precent = 2;
                        }
                        else
                        {
                            Number = packet[12];
                            Number -= 4;
                        }
                        if (Number == 4 || Number == 17)
                        {
                            precent = 72;
                        }
                        if (Number == 5 || Number == 16)
                        {
                            precent = 36;
                        }
                        if (Number == 6 || Number == 15)
                        {
                            precent = 21;
                        }
                        if (Number == 7 || Number == 14)
                        {
                            precent = 14;
                        }
                        if (Number == 8 || Number == 13)
                        {
                            precent = 10;
                        }
                        if (Number == 9 || Number == 12)
                        {
                            precent = 8;
                        }
                        if (Number == 10 || Number == 11)
                        {
                            precent = 8;
                        }

                        #endregion

                        if (!client.Entity.Gambleing.Bet.ContainsKey(Number))
                        {
                            var struc = new Gambleing.Bett();
                            struc.Amount = BitConverter.ToUInt16(packet, 16);
                            struc.Precent = precent;
                            client.Entity.Gambleing.Bet.Add(Number, struc);
                        }
                        else
                        {
                            uint old = client.Entity.Gambleing.Bet[Number].Amount;
                            var struc = new Gambleing.Bett();
                            struc.Amount = BitConverter.ToUInt16(packet, 16);
                            struc.Amount += old;
                            struc.Precent = precent;
                            client.Entity.Gambleing.Bet.Remove(Number);
                            client.Entity.Gambleing.Bet.Add(Number, struc);
                        }
                        break;
                    }

                #endregion
                #region WarehousePassword (2261)

                case 2261:
                    {
                        WareHousePassword whp = new WareHousePassword(false);
                        whp.Deserialize(packet);
                        switch (whp.type)
                        {
                            case WareHousePassword.SendInformation:
                                {
                                    if (client.WarehousePW != 0)
                                    {
                                        if (client.WarehousePW == whp.OldPassword)
                                        {
                                            client.WarehouseOpen = true;
                                            client.WarehousePW = (uint)whp.NewPassword;
                                            whp = new WareHousePassword(true);
                                            whp.type = WareHousePassword.PasswordCorrect;
                                            whp.OldPassword = 0x0101;
                                            client.Send(whp);
                                            client.Send(
                                                new Network.GamePackets.Message(
                                                    "Successfully modified! Please remember your secondary password",
                                                    System.Drawing.Color.Red, 0x7d0));
                                        }
                                        else
                                        {
                                            whp = new WareHousePassword(true);
                                            whp.type = WareHousePassword.PasswordWrong;
                                            whp.OldPassword = 0x01;
                                            client.Send(whp);
                                        }
                                    }
                                    else
                                    {
                                        client.WarehouseOpen = true;
                                        client.WarehousePW = (uint)whp.NewPassword;
                                        whp = new WareHousePassword(true);
                                        whp.type = WareHousePassword.PasswordCorrect;
                                        whp.OldPassword = 0x0101;
                                        client.Send(whp);
                                        client.Send(
                                            new Network.GamePackets.Message(
                                                "Successfully set! Please remember your secondary password",
                                                System.Drawing.Color.Red, 0x7d0));
                                    }
                                    break;
                                }
                            case WareHousePassword.VerifiedPassword:
                                {
                                    if (client.WarehousePW != 0)
                                    {
                                        //PrintPacket(packet);

                                        if (client.WarehousePW == whp.NewPassword)
                                        {
                                            client.WarehouseOpen = true;
                                            whp = new WareHousePassword(true);
                                            whp.type = WareHousePassword.PasswordCorrect;
                                            whp.OldPassword = 0x0101;
                                            client.Send(whp);
                                            client.Send(new Network.GamePackets.Message("Secondary verified!",
                                                System.Drawing.Color.Red, 0x7d0));
                                            if (client.Entity.NextAction == WareHousePassword.Nextaction.OpenWarehouse &&
                                                client.Entity.actionX == client.Entity.X &&
                                                client.Entity.actionY == client.Entity.Y)
                                            {
                                                client.WarehouseOpen = true;
                                                Data data = new Data(true);
                                                data.ID = Data.OpenWindow;
                                                data.UID = client.Entity.UID;
                                                data.TimeStamp = Time32.Now;
                                                data.dwParam = 4;
                                                data.wParam1 = client.Entity.X;
                                                data.wParam2 = client.Entity.Y;
                                                client.Send(data);
                                                client.Entity.NextAction = WareHousePassword.Nextaction.Nothing;
                                            }
                                            else if (client.Entity.NextAction == WareHousePassword.Nextaction.OwnBooth &&
                                                     client.Entity.actionX == client.Entity.X &&
                                                     client.Entity.actionY == client.Entity.Y)
                                            {
                                                client.Send(new MapStatus()
                                                {
                                                    BaseID = client.Map.BaseID,
                                                    ID = client.Map.ID,
                                                    Status = Database.MapsTable.MapInformations[1036].Status
                                                });
                                                client.Booth = new Game.ConquerStructures.Booth(client,
                                                    new Data(true) { UID = client.Entity.UID });
                                                client.Send(new Data(true)
                                                {
                                                    ID = GamePackets.Data.ChangeAction,
                                                    UID = client.Entity.UID,
                                                    dwParam = 0
                                                });
                                                client.Entity.NextAction = WareHousePassword.Nextaction.Nothing;
                                            }
                                        }
                                        else
                                        {
                                            whp = new WareHousePassword(true);
                                            whp.type = WareHousePassword.PasswordWrong;
                                            client.Send(whp);
                                        }
                                    }
                                    else
                                    {
                                        client.Disconnect();
                                    }
                                    break;
                                }
                            case WareHousePassword.SetNewPass:
                                {
                                    if (client.WarehousePW == 0)
                                    {
                                        client.WarehouseOpen = true;
                                        client.WarehousePW = (uint)whp.NewPassword;
                                        whp = new WareHousePassword(true);
                                        whp.type = WareHousePassword.PasswordCorrect;
                                        whp.OldPassword = 0x0101;
                                        client.Send(whp);
                                        client.Send(
                                            new Network.GamePackets.Message(
                                                "Successfully set! Please remember your secondary password",
                                                System.Drawing.Color.Red, 0x7d0));
                                    }
                                    break;
                                }
                            case WareHousePassword.ForgetPassword:
                                {
                                    if (client.WarehousePW != 0)
                                    {

                                        whp = new WareHousePassword(true);
                                        whp.type = 7;
                                        whp.OldPassword = 0x1;
                                        whp.NewPassword = client.ForgetWHPassDate;
                                        client.Send(whp);

                                        client.Send(
                                            new Network.GamePackets.Message(
                                                "Your secondary password will be removed on " +
                                                DateTime.Now.AddDays(7).ToString("d/M/yyyy (H:mm)") + ".",
                                                System.Drawing.Color.Red, 0x7d0));
                                    }
                                    break;
                                }
                            case WareHousePassword.Terminate:
                                {
                                    whp = new WareHousePassword(true);
                                    whp.type = WareHousePassword.PasswordCorrect;
                                    whp.OldPassword = 0x1;
                                    client.Send(whp);

                                    break;
                                }
                            default:
                                {
                                    break;
                                }
                        }
                        break;
                    }

                #endregion
                #region KnownPersons (1019)
                case 1019:
                    {
                        KnownPersons knownP = new KnownPersons(false);
                        knownP.Deserialize(packet);
                        switch (knownP.Type)
                        {
                            case KnownPersons.RequestFriendship:
                                {
                                    AddFriend(knownP, client);
                                    break;
                                }
                            case KnownPersons.RemovePerson:
                                {
                                    RemoveFriend(knownP, client);
                                    break;
                                }
                            case KnownPersons.RemoveEnemy:
                                {
                                    RemoveEnemy(knownP, client);
                                    break;
                                }
                            case KnownPersons.AcceptFriend:
                                {
                                    AcceptFriend(knownP, client);
                                    break;
                                }
                        }
                        break;
                    }
                #endregion
                #region Attack (1022)
                case 1022:
                    {
                        if (client.Action != 2) return;
                        if (client.ProgressBar != null)
                        {
                            client.ProgressBar.End(client);
                        }
                        client.LastAttack = Time32.Now;
                        GamePackets.Attack attack = new Attack(false);
                        attack.Deserialize(packet);
                        Writer.Write(0, 8, attack.Encode());
                        switch (attack.AttackType)
                        {
                            case 36:
                                GamePackets.Attack attack2 = new Attack(true);
                                attack2 = attack;
                                attack2.ResponseDamage = client.Entity.QuestKO;
                                client.Send(attack2);
                                break;
                            default:
                                {
                                    client.Entity.RemoveMagicDefender();
                                    client.Entity.AttackPacket = attack;
                                    new Game.Attacking.Handle(attack, client.Entity, null);
                                    break;
                                }
                        }
                        if (client.Entity.ContainsFlag(Update.Flags.Intensify))
                        {
                            client.Entity.RemoveFlag(Update.Flags.Intensify);
                            client.Entity.IntensifyPercent = 0;
                        }
                        break;
                    }
                #endregion
                #region Teams (1023)
                case 1023:
                    {
                        Team.Process(packet, client);
                        break;
                    }
                #endregion
                #region Atributes Set (1024)
                case 1024:
                    {
                        if (client.Action != 2)
                            return;
                        uint AddStr = BitConverter.ToUInt32(packet, 12);
                        uint AddAgi = BitConverter.ToUInt32(packet, 16);
                        uint AddVit = BitConverter.ToUInt32(packet, 20);
                        uint AddSpi = BitConverter.ToUInt32(packet, 24);
                        if (client.Entity.Atributes == 0)
                            return;

                        uint TotalStatPoints = AddStr + AddAgi + AddVit + AddSpi;

                        if (client.Entity.Atributes >= TotalStatPoints)
                        {
                            client.Entity.Strength += (ushort)AddStr;
                            client.Entity.Agility += (ushort)AddAgi;
                            client.Entity.Vitality += (ushort)AddVit;
                            client.Entity.Spirit += (ushort)AddSpi;
                            client.Entity.Atributes -= (ushort)TotalStatPoints;
                            client.Send(packet);
                        }
                        client.CalculateStatBonus();
                        client.CalculateHPBonus();
                        client.GemAlgorithm();
                        break;
                    }
                #endregion
                #region Socketing (1027)
                case 1027:
                    {
                        EmbedSocket socket = new EmbedSocket(false);
                        socket.Deserialize(packet);
                        SocketItem(socket, client);
                        break;
                    }
                #endregion
                #region Character Statistics (1040)
                case 1040:
                    {
                        uint UID = BitConverter.ToUInt32(packet, 8);
                        Client.GameClient Client;
                        if (Kernel.GamePool.TryGetValue(UID, out Client))
                        {
                            WindowsStats WS = new WindowsStats(Client);
                            WS.Send(client);
                        }
                        break;
                    }
                #endregion
                //#region LoginPacket (1052)
                //case 1052:
                //    {
                //        if (client.Action == 1)
                //        {
                //            Connect connect = new Connect();
                //            connect.Deserialize(packet);
                //            AppendConnect(connect, client);
                //        }
                //        else
                //            client.Disconnect();
                //        break;
                //    }
                //#endregion
                #region Trade (1056)
                case 1056:
                    {
                        if (client.Action != 2)
                            return;
                        
                        Trade trade = new Trade(false);
                        trade.Deserialize(packet);

                        lock (client.ItemSyncRoot)
                        {
                            switch (trade.Type)
                            {
                                case Trade.Request:
                                    RequestTrade(trade, client);
                                    break;
                                case Trade.Close:
                                    CloseTrade(trade, client);
                                    break;
                                case Trade.AddItem:
                                    AddTradeItem(trade, client);
                                    break;
                                case Trade.SetMoney:
                                    SetTradeMoney(trade, client);
                                    break;
                                case Trade.SetConquerPoints:
                                    SetTradeConquerPoints(trade, client);
                                    break;
                                case Trade.Accept:
                                    AcceptTrade(trade, client);
                                    break;
                            }
                        }
                        break;
                    }
                #endregion
                #region Floor items (1101)
                case 1101:
                    {
                        if (client.Action != 2)
                            return;
                        FloorItem floorItem = new FloorItem(false);
                        client.SpiltStack = true;
                        floorItem.Deserialize(packet);
                        PickupItem(floorItem, client);
                        client.SpiltStack = false;
                        break;
                    }
                #endregion
                #region Warehouses (1102)
                case 1102:
                    {
                        if (client.Action != 2)
                            return;
                        Warehouse warehousepacket = new Warehouse(false);
                        warehousepacket.Deserialize(packet);
                        switch (warehousepacket.Type)
                        {
                            case Warehouse.Entire:
                                {
                                    Game.ConquerStructures.Warehouse wh = client.Warehouses[(Nyx.Server.Game.ConquerStructures.Warehouse.WarehouseID)warehousepacket.NpcID];
                                    if (wh == null) return;
                                    byte count = 0;
                                    warehousepacket.Count = 1;
                                    warehousepacket.Type = Warehouse.AddItem;
                                    for (; count < wh.Count; count++)
                                    {
                                        ConquerItem i = wh.Objects[count];
                                        warehousepacket.Append(wh.Objects[count]);
                                        client.Send(warehousepacket);
                                        i.SendExtras(client);
                                    }
                                    break;
                                }
                            case Warehouse.AddItem:
                                {
                                    if (client.Booth != null)
                                        return;
                                    Game.ConquerStructures.Warehouse wh = client.Warehouses[(Nyx.Server.Game.ConquerStructures.Warehouse.WarehouseID)warehousepacket.NpcID];
                                    if (wh == null) return;
                                    ConquerItem item = null;
                                    if (client.Inventory.TryGetItem(warehousepacket.UID, out item))
                                    {
                                        if (item.ID >= 729960 && item.ID <= 729970)
                                            return;
                                        if (!ConquerItem.isRune(item.UID))
                                        {
                                            if (wh.Add(item))
                                            {
                                                warehousepacket.Count = 1;
                                                warehousepacket.Append(item);
                                                client.Send(warehousepacket);
                                                ItemAdding add1 = new ItemAdding(true);
                                                if (item.Purification.Available)
                                                    add1.Append(item.Purification);
                                                if (item.ExtraEffect.Available)
                                                    add1.Append(item.ExtraEffect);
                                                if (item.Purification.Available || item.ExtraEffect.Available)
                                                    client.Send(add1);
                                                return;
                                            }
                                        }
                                        else client.Send(new Message("You can not store Flame Stone Rune's in Warehouse", System.Drawing.Color.Red, Message.TopLeft));
                                    }
                                    break;
                                }
                            case Warehouse.RemoveItem:
                                {
                                    Game.ConquerStructures.Warehouse wh = client.Warehouses[(Nyx.Server.Game.ConquerStructures.Warehouse.WarehouseID)warehousepacket.NpcID];
                                    if (wh == null) return;
                                    if (wh.ContainsUID(warehousepacket.UID))
                                    {
                                        if (wh.Remove(warehousepacket.UID))
                                        {
                                            client.Send(warehousepacket);
                                            return;
                                        }
                                    }
                                    break;
                                }
                            default:
                                {
                                    break;
                                }
                        }
                        break;
                    }
                #endregion
                #region Guild Command (1107)
                case 1107:
                    {
                        GuildCommand command = new GuildCommand(false);
                        command.Deserialize(packet);
                        switch (command.Type)
                        {
                            case GuildCommand.Info:
                                {
                                    var Guild = Kernel.Guilds[command.dwParam];
                                    if (Guild != null)
                                        Guild.SendName(client);
                                    break;
                                }
                            case GuildCommand.ChangeGuildRequirements:
                                {
                                    if (client.AsMember.Rank == Nyx.Server.Game.Enums.GuildMemberRank.GuildLeader)
                                    {
                                        client.Guild.LevelRequirement = Math.Min(command.dwParam2, 140);
                                        client.Guild.RebornRequirement = Math.Min(command.dwParam3, 2);
                                        client.Guild.ClassRequirement = Math.Min(command.dwParam4, 127);
                                        foreach (var member in client.Guild.Members.Values)
                                            if (member.IsOnline)
                                                client.Guild.SendGuild(member.Client);
                                        Database.GuildTable.SaveRequirements(client.Guild);
                                    }
                                    break;
                                }
                            case GuildCommand.Neutral1:
                            case GuildCommand.Neutral2:
                                {
                                    string name = Program.Encoding.GetString(packet, 26, packet[25]);
                                    if (client.Guild != null)
                                    {
                                        if (client.AsMember.Rank == Nyx.Server.Game.Enums.GuildMemberRank.GuildLeader)
                                        {
                                            client.Guild.RemoveAlly(name);
                                            foreach (var guild in Kernel.Guilds.Values)
                                            {
                                                if (guild.Name == name && client.Guild.Name != name)
                                                {
                                                    guild.RemoveAlly(client.Guild.Name);
                                                }
                                            }
                                            client.Guild.RemoveEnemy(name);
                                        }
                                    }
                                    break;
                                }
                            case GuildCommand.Allied:
                                {
                                    string name = Program.Encoding.GetString(packet, 26, packet[25]);
                                    if (client.Guild != null)
                                    {
                                        if (client.AsMember.Rank == Nyx.Server.Game.Enums.GuildMemberRank.GuildLeader)
                                        {
                                            if (client.Guild.Ally.Count < 6)
                                            {
                                                //client.Guild.AddAlly(name);
                                                AllyGuilds(name, client);
                                            }
                                        }
                                    }
                                    break;
                                }
                            case GuildCommand.Enemied:
                                {
                                    string name = Program.Encoding.GetString(packet, 26, packet[25]);
                                    if (client.Guild != null)
                                    {
                                        if (client.AsMember.Rank == Nyx.Server.Game.Enums.GuildMemberRank.GuildLeader)
                                        {
                                            if (client.Guild.Enemy.Count < 6)
                                            {
                                                client.Guild.AddEnemy(name);
                                            }
                                        }
                                    }
                                    break;
                                }
                            default:
                                {
                                    client.Send(packet);
                                    break;
                                }
                            case GuildCommand.Bulletin:
                                {
                                    string message = Encoding.Default.GetString(packet, 26, packet[25]);
                                    if (client.Guild != null)
                                    {
                                        if (client.AsMember.Rank == Nyx.Server.Game.Enums.GuildMemberRank.GuildLeader)
                                        {
                                            client.Guild.Bulletin = message;
                                            client.Guild.SendGuild(client);
                                            Database.GuildTable.UpdateBulletin(client.Guild, client.Guild.Bulletin);
                                        }
                                    }
                                    break;
                                }
                            case GuildCommand.DonateSilvers:
                                {
                                    if (client.Guild != null)
                                    {
                                        if (client.Trade.InTrade)
                                            return;
                                        if (client.Entity.Money >= command.dwParam)
                                        {
                                            client.Guild.SilverFund += command.dwParam;
                                            Database.GuildTable.SaveFunds(client.Guild);
                                            client.AsMember.SilverDonation += (command.dwParam / 100000);
                                            client.Entity.Money -= command.dwParam;
                                            client.Guild.SendGuild(client);
                                        }
                                    }
                                    break;
                                }
                            case GuildCommand.DonateConquerPoints:
                                {
                                    if (client.Guild != null)
                                    {
                                        if (client.Trade.InTrade)
                                            return;
                                        if (client.Entity.ConquerPoints >= command.dwParam)
                                        {
                                            client.Guild.ConquerPointFund += command.dwParam;
                                            Database.GuildTable.SaveFunds(client.Guild);
                                            client.AsMember.ConquerPointDonation += (command.dwParam * 20);
                                            client.Entity.ConquerPoints -= command.dwParam;
                                            client.Guild.SendGuild(client);
                                        }
                                    }
                                    break;
                                }
                            case GuildCommand.Refresh:
                                {
                                    if (client.AsMember != null)
                                    {
                                        if (client.Guild != null)
                                            client.Guild.SendGuild(client);
                                    }
                                    break;
                                }
                            case GuildCommand.Discharge:
                                {
                                    string name = System.Text.Encoding.Default.GetString(packet, 26, packet[25]);
                                    if (client.Guild != null)
                                    {
                                        if (client.AsMember.Rank == Nyx.Server.Game.Enums.GuildMemberRank.GuildLeader)
                                        {
                                            var member = client.Guild.GetMemberByName(name);
                                            if (member.ID != client.Entity.UID)
                                            {
                                                if (member.Rank == Game.Enums.GuildMemberRank.DeputyLeader)
                                                    client.Guild.RanksCounts[990]--;
                                                if (member.Rank == Game.Enums.GuildMemberRank.HDeputyLeader)
                                                    client.Guild.RanksCounts[980]--;
                                                if (member.Rank == Game.Enums.GuildMemberRank.HonoraryManager)
                                                    client.Guild.RanksCounts[880]--;
                                                if (member.Rank == Game.Enums.GuildMemberRank.HonorarySuperv)
                                                    client.Guild.RanksCounts[840]--;
                                                if (member.Rank == Game.Enums.GuildMemberRank.HonorarySteward)
                                                    client.Guild.RanksCounts[680]--;
                                                if (member.Rank == Game.Enums.GuildMemberRank.Aide)
                                                    client.Guild.RanksCounts[602]--;
                                                if (member.Rank == Game.Enums.GuildMemberRank.Steward)
                                                    client.Guild.RanksCounts[690]--;
                                                if (member.Rank == Game.Enums.GuildMemberRank.Follower)
                                                    client.Guild.RanksCounts[490]--;
                                                if (member.Rank == Nyx.Server.Game.Enums.GuildMemberRank.DeputyLeader)
                                                {
                                                    client.Guild.RanksCounts[(ushort)Game.Enums.GuildMemberRank.DeputyLeader]--;
                                                    //member.Rank = Nyx.Server.Game.Enums.GuildMemberRank.Member;
                                                    if (member.IsOnline)
                                                    {
                                                        client.Guild.SendGuild(member.Client);
                                                        member.Client.Entity.GuildRank = (ushort)member.Rank;
                                                        member.Client.Screen.FullWipe();
                                                        member.Client.Screen.Reload(null);
                                                        member.Client.Entity.GuildBattlePower = member.Guild.GetSharedBattlepower(member.Rank);
                                                    }
                                                    Database.EntityTable.UpdateData(member.ID, "GuildRank", (int)member.Rank);
                                                }
                                            }
                                        }
                                    }
                                    break;
                                }
                            case GuildCommand.Diseharge:
                                {
                                    string name = Encoding.Default.GetString(packet, 26, packet[25]);
                                    if (client.Guild != null)
                                    {
                                        if (client.AsMember.Rank == Nyx.Server.Game.Enums.GuildMemberRank.GuildLeader)
                                        {
                                            var member = client.Guild.GetMemberByName(name);
                                            client.Guild.SendGuildMessage(new Message((member.Name + " was discharged from " + member.Rank + " position."), Color.Yellow, Message.Guild));
                                            if (member.Rank == Game.Enums.GuildMemberRank.DeputyLeader)
                                                client.Guild.RanksCounts[990]--;
                                            if (member.Rank == Game.Enums.GuildMemberRank.HDeputyLeader)
                                                client.Guild.RanksCounts[980]--;
                                            if (member.Rank == Game.Enums.GuildMemberRank.HonoraryManager)
                                                client.Guild.RanksCounts[880]--;
                                            if (member.Rank == Game.Enums.GuildMemberRank.HonorarySuperv)
                                                client.Guild.RanksCounts[840]--;
                                            if (member.Rank == Game.Enums.GuildMemberRank.HonorarySteward)
                                                client.Guild.RanksCounts[680]--;
                                            if (member.Rank == Game.Enums.GuildMemberRank.Aide)
                                                client.Guild.RanksCounts[602]--;
                                            if (member.Rank == Game.Enums.GuildMemberRank.Steward)
                                                client.Guild.RanksCounts[690]--;
                                            if (member.Rank == Game.Enums.GuildMemberRank.Follower)
                                                client.Guild.RanksCounts[490]--;
                                            if (member.ID != client.Entity.UID)
                                            {
                                           
                                                    member.Rank = Nyx.Server.Game.Enums.GuildMemberRank.Member;
                                                    if (member.IsOnline)
                                                    {
                                                        client.Guild.SendGuild(member.Client);
                                                        member.Client.Entity.GuildRank = (ushort)member.Rank;
                                                        member.Client.Screen.FullWipe();
                                                        member.Client.Screen.Reload(null);
                                                        member.Client.Entity.GuildBattlePower = member.Guild.GetSharedBattlepower(member.Rank);
                                                    }
                                                    Database.EntityTable.UpdateData(member.ID, "GuildRank", (int)member.Rank);
                                                }
                                            }
                                        }
                                    
                                    break;
                                }
                            case GuildCommand.Promote:
                                {
                                    if (client.Guild == null || client.AsMember == null) return;
                                    command.SendPromote(client, 37);
                                    return;
                                }
                            case GuildCommand.PromoteAcceptRequest:
                            case GuildCommand.ConfirmPromote:
                            case GuildCommand.PromoteSendRequest:
                                {
                                    if (client.Guild != null && client.AsMember != null)
                                    {
                                        string GetMemberName = Encoding.Default.GetString(packet, 26, packet[25]);
                                        ushort GetMemberRank = BitConverter.ToUInt16(packet, 8);
                                        Game.ConquerStructures.Society.Guild.Member MemberPromote = null;
                                        if (client.Guild.GetMember(GetMemberName, out MemberPromote))
                                        {
                                            if (client.AsMember.Rank < MemberPromote.Rank)
                                            {
                                                client.Send("Sorry, you have small rank for change he position!");
                                                break;
                                            }
                                            if (client.AsMember.Rank == Enums.GuildMemberRank.DeputyLeader)
                                            {
                                                if (GetMemberRank == (ushort)Enums.GuildMemberRank.Steward)
                                                {
                                                    if (client.Guild.RanksCounts[GetMemberRank] >= 3)
                                                    {
                                                        client.Send("Sorry all Steward`s ranks its ocupated!");
                                                        return;
                                                    }
                                                    client.Guild.RanksCounts[(ushort)MemberPromote.Rank]--;
                                                    MemberPromote.Rank = (Enums.GuildMemberRank)GetMemberRank;
                                                    client.Guild.RanksCounts[(ushort)MemberPromote.Rank]++;
                                                    if (MemberPromote.IsOnline)
                                                    {
                                                        client.Guild.SendGuild(MemberPromote.Client);
                                                        MemberPromote.Client.Entity.GuildBattlePower = client.Guild.GetSharedBattlepower(MemberPromote.Rank);
                                                        MemberPromote.Client.Entity.GuildRank = (ushort)MemberPromote.Rank;
                                                        MemberPromote.Client.Screen.FullWipe();
                                                        MemberPromote.Client.Screen.Reload(null);
                                                    }
                                                }
                                                if (GetMemberRank == (ushort)Enums.GuildMemberRank.Follower)
                                                {
                                                    if (client.Guild.RanksCounts[GetMemberRank] >= 10)
                                                    {
                                                        client.Send("Sorry all Follower`s ranks its ocupated!");
                                                        return;
                                                    }
                                                    client.Guild.RanksCounts[(ushort)MemberPromote.Rank]--;
                                                    MemberPromote.Rank = (Enums.GuildMemberRank)GetMemberRank;
                                                    client.Guild.RanksCounts[(ushort)MemberPromote.Rank]++;
                                                    if (MemberPromote.IsOnline)
                                                    {
                                                        client.Guild.SendGuild(MemberPromote.Client);
                                                        MemberPromote.Client.Entity.GuildBattlePower = client.Guild.GetSharedBattlepower(MemberPromote.Rank);
                                                        MemberPromote.Client.Entity.GuildRank = (ushort)MemberPromote.Rank;
                                                        MemberPromote.Client.Screen.FullWipe();
                                                        MemberPromote.Client.Screen.Reload(null);
                                                    }
                                                }
                                                if (GetMemberRank == (ushort)Enums.GuildMemberRank.Aide)
                                                {
                                                    if (client.Guild.RanksCounts[GetMemberRank] >= 6)
                                                    {
                                                        client.Send("Sorry all Aide`s ranks its ocupated!");
                                                        return;
                                                    }
                                                    client.Guild.RanksCounts[(ushort)MemberPromote.Rank]--;
                                                    MemberPromote.Rank = (Enums.GuildMemberRank)GetMemberRank;
                                                    client.Guild.RanksCounts[(ushort)MemberPromote.Rank]++;
                                                    if (MemberPromote.IsOnline)
                                                    {
                                                        client.Guild.SendGuild(MemberPromote.Client);
                                                        MemberPromote.Client.Entity.GuildBattlePower = client.Guild.GetSharedBattlepower(MemberPromote.Rank);
                                                        MemberPromote.Client.Entity.GuildRank = (ushort)MemberPromote.Rank;
                                                        MemberPromote.Client.Screen.FullWipe();
                                                        MemberPromote.Client.Screen.Reload(null);
                                                    }
                                                }
                                            }
                                            if (client.AsMember.Rank == Enums.GuildMemberRank.Manager || client.AsMember.Rank == Enums.GuildMemberRank.HonoraryManager)
                                            {
                                                if (GetMemberRank == (ushort)Enums.GuildMemberRank.Aide)
                                                {
                                                    if (client.Guild.RanksCounts[GetMemberRank] >= 6)
                                                    {
                                                        client.Send("Sorry all Aide`s ranks its ocupated!");
                                                        return;
                                                    }
                                                    client.Guild.RanksCounts[(ushort)MemberPromote.Rank]--;
                                                    MemberPromote.Rank = (Enums.GuildMemberRank)GetMemberRank;
                                                    client.Guild.RanksCounts[(ushort)MemberPromote.Rank]++;
                                                    if (MemberPromote.IsOnline)
                                                    {
                                                        client.Guild.SendGuild(MemberPromote.Client);
                                                        MemberPromote.Client.Entity.GuildBattlePower = client.Guild.GetSharedBattlepower(MemberPromote.Rank);
                                                        MemberPromote.Client.Entity.GuildRank = (ushort)MemberPromote.Rank;
                                                        MemberPromote.Client.Screen.FullWipe();
                                                        MemberPromote.Client.Screen.Reload(null);
                                                    }
                                                }
                                            }
                                            if (client.AsMember.Rank == Enums.GuildMemberRank.GuildLeader || client.AsMember.Rank == Enums.GuildMemberRank.LeaderSpouse)
                                            {
                                                if (GetMemberRank == (ushort)Enums.GuildMemberRank.GuildLeader)
                                                {
                                                    if (client.AsMember.Rank == Enums.GuildMemberRank.LeaderSpouse) return;
                                                    MemberPromote.Rank = Game.Enums.GuildMemberRank.GuildLeader;
                                                    client.Guild.LeaderName = MemberPromote.Name;
                                                    if (MemberPromote.IsOnline)
                                                    {
                                                        client.Guild.SendGuild(MemberPromote.Client);
                                                        MemberPromote.Client.Entity.GuildBattlePower = client.Guild.GetSharedBattlepower(MemberPromote.Rank);
                                                        MemberPromote.Client.Entity.GuildRank = (ushort)MemberPromote.Rank;
                                                        MemberPromote.Client.Screen.FullWipe();
                                                        MemberPromote.Client.Screen.Reload(null);
                                                    }
                                                    client.AsMember.Rank = Game.Enums.GuildMemberRank.DeputyLeader;
                                                    client.Entity.GuildRank = (ushort)client.AsMember.Rank;
                                                    client.Guild.SendGuild(client);
                                                    client.Screen.FullWipe();
                                                    client.Screen.Reload(null);
                                                    Database.GuildTable.SaveLeader(client.Guild);
                                                }
                                                if (GetMemberRank == (ushort)Enums.GuildMemberRank.DeputyLeader)
                                                {
                                                    if (client.Guild.RanksCounts[GetMemberRank] >= 6)
                                                    {
                                                        client.Send("Sorry all DeputyLeader`s ranks its ocupated!");
                                                        return;
                                                    }
                                                    client.Guild.RanksCounts[(ushort)MemberPromote.Rank]--;
                                                    MemberPromote.Rank = (Enums.GuildMemberRank)GetMemberRank;
                                                    client.Guild.RanksCounts[(ushort)MemberPromote.Rank]++;
                                                    if (MemberPromote.IsOnline)
                                                    {
                                                        client.Guild.SendGuild(MemberPromote.Client);
                                                        MemberPromote.Client.Entity.GuildBattlePower = client.Guild.GetSharedBattlepower(MemberPromote.Rank);
                                                        MemberPromote.Client.Entity.GuildRank = (ushort)MemberPromote.Rank;
                                                        MemberPromote.Client.Screen.FullWipe();
                                                        MemberPromote.Client.Screen.Reload(null);
                                                    }
                                                }
                                                if (GetMemberRank == (ushort)Enums.GuildMemberRank.Aide)
                                                {
                                                    if (client.AsMember.Rank == Enums.GuildMemberRank.LeaderSpouse) return;
                                                    if (client.Guild.RanksCounts[GetMemberRank] >= 6)
                                                    {
                                                        client.Send("Sorry all Aide`s ranks its ocupated!");
                                                        return;
                                                    }
                                                    client.Guild.RanksCounts[(ushort)MemberPromote.Rank]--;
                                                    MemberPromote.Rank = (Enums.GuildMemberRank)GetMemberRank;
                                                    client.Guild.RanksCounts[(ushort)MemberPromote.Rank]++;
                                                    if (MemberPromote.IsOnline)
                                                    {
                                                        client.Guild.SendGuild(MemberPromote.Client);
                                                        MemberPromote.Client.Entity.GuildBattlePower = client.Guild.GetSharedBattlepower(MemberPromote.Rank);
                                                        MemberPromote.Client.Entity.GuildRank = (ushort)MemberPromote.Rank;
                                                        MemberPromote.Client.Screen.FullWipe();
                                                        MemberPromote.Client.Screen.Reload(null);
                                                    }
                                                }
                                                if (GetMemberRank == (ushort)Enums.GuildMemberRank.Steward)
                                                {
                                                    if (client.Guild.RanksCounts[GetMemberRank] >= 3)
                                                    {
                                                        client.Send("Sorry all Steward`s ranks its ocupated!");
                                                        return;
                                                    }
                                                    client.Guild.RanksCounts[(ushort)MemberPromote.Rank]--;
                                                    MemberPromote.Rank = (Enums.GuildMemberRank)GetMemberRank;
                                                    client.Guild.RanksCounts[(ushort)MemberPromote.Rank]++;
                                                    if (MemberPromote.IsOnline)
                                                    {
                                                        client.Guild.SendGuild(MemberPromote.Client);
                                                        MemberPromote.Client.Entity.GuildBattlePower = client.Guild.GetSharedBattlepower(MemberPromote.Rank);
                                                        MemberPromote.Client.Entity.GuildRank = (ushort)MemberPromote.Rank;
                                                        MemberPromote.Client.Screen.FullWipe();
                                                        MemberPromote.Client.Screen.Reload(null);
                                                    }
                                                }
                                                if (GetMemberRank == (ushort)Enums.GuildMemberRank.HDeputyLeader)
                                                {
                                                    if (client.Guild.RanksCounts[GetMemberRank] >= 4)
                                                    {
                                                        client.Send("Sorry all HDeputyLeader`s ranks its ocupated!");
                                                        return;
                                                    }
                                                    client.Guild.RanksCounts[(ushort)MemberPromote.Rank]--;
                                                    MemberPromote.Rank = (Enums.GuildMemberRank)GetMemberRank;
                                                    client.Guild.RanksCounts[(ushort)MemberPromote.Rank]++;
                                                    if (MemberPromote.IsOnline)
                                                    {
                                                        client.Guild.SendGuild(MemberPromote.Client);
                                                        MemberPromote.Client.Entity.GuildBattlePower = client.Guild.GetSharedBattlepower(MemberPromote.Rank);
                                                        MemberPromote.Client.Entity.GuildRank = (ushort)MemberPromote.Rank;
                                                        MemberPromote.Client.Screen.FullWipe();
                                                        MemberPromote.Client.Screen.Reload(null);
                                                    }
                                                }
                                                if (GetMemberRank == (ushort)Enums.GuildMemberRank.HonoraryManager)
                                                {
                                                    if (client.Guild.RanksCounts[GetMemberRank] >= 4)
                                                    {
                                                        client.Send("Sorry all HonoraryManager`s ranks its ocupated!");
                                                        return;
                                                    }
                                                    client.Guild.RanksCounts[(ushort)MemberPromote.Rank]--;
                                                    MemberPromote.Rank = (Enums.GuildMemberRank)GetMemberRank;
                                                    client.Guild.RanksCounts[(ushort)MemberPromote.Rank]++;
                                                    if (MemberPromote.IsOnline)
                                                    {
                                                        client.Guild.SendGuild(MemberPromote.Client);
                                                        MemberPromote.Client.Entity.GuildBattlePower = client.Guild.GetSharedBattlepower(MemberPromote.Rank);
                                                        MemberPromote.Client.Entity.GuildRank = (ushort)MemberPromote.Rank;
                                                        MemberPromote.Client.Screen.FullWipe();
                                                        MemberPromote.Client.Screen.Reload(null);
                                                    }
                                                }
                                                if (GetMemberRank == (ushort)Enums.GuildMemberRank.HonorarySuperv)
                                                {
                                                    if (client.Guild.RanksCounts[GetMemberRank] >= 4)
                                                    {
                                                        client.Send("Sorry all HonorarySuperv`s ranks its ocupated!");
                                                        return;
                                                    }
                                                    client.Guild.RanksCounts[(ushort)MemberPromote.Rank]--;
                                                    MemberPromote.Rank = (Enums.GuildMemberRank)GetMemberRank;
                                                    client.Guild.RanksCounts[(ushort)MemberPromote.Rank]++;
                                                    if (MemberPromote.IsOnline)
                                                    {
                                                        client.Guild.SendGuild(MemberPromote.Client);
                                                        MemberPromote.Client.Entity.GuildBattlePower = client.Guild.GetSharedBattlepower(MemberPromote.Rank);
                                                        MemberPromote.Client.Entity.GuildRank = (ushort)MemberPromote.Rank;
                                                        MemberPromote.Client.Screen.FullWipe();
                                                        MemberPromote.Client.Screen.Reload(null);
                                                    }
                                                }
                                                if (GetMemberRank == (ushort)Enums.GuildMemberRank.HonorarySteward)
                                                {
                                                    if (client.Guild.RanksCounts[GetMemberRank] >= 4)
                                                    {
                                                        client.Send("Sorry all HonorarySteward`s ranks its ocupated!");
                                                        return;
                                                    }
                                                    client.Guild.RanksCounts[(ushort)MemberPromote.Rank]--;
                                                    MemberPromote.Rank = (Enums.GuildMemberRank)GetMemberRank;
                                                    client.Guild.RanksCounts[(ushort)MemberPromote.Rank]++;
                                                    if (MemberPromote.IsOnline)
                                                    {
                                                        client.Guild.SendGuild(MemberPromote.Client);
                                                        MemberPromote.Client.Entity.GuildBattlePower = client.Guild.GetSharedBattlepower(MemberPromote.Rank);
                                                        MemberPromote.Client.Entity.GuildRank = (ushort)MemberPromote.Rank;
                                                        MemberPromote.Client.Screen.FullWipe();
                                                        MemberPromote.Client.Screen.Reload(null);
                                                    }
                                                }
                                                if (GetMemberRank == (ushort)Enums.GuildMemberRank.Follower)
                                                {
                                                    if (client.Guild.RanksCounts[GetMemberRank] >= 10)
                                                    {
                                                        client.Send("Sorry all Follower`s ranks its ocupated!");
                                                        return;
                                                    }
                                                    client.Guild.RanksCounts[(ushort)MemberPromote.Rank]--;
                                                    MemberPromote.Rank = (Enums.GuildMemberRank)GetMemberRank;
                                                    client.Guild.RanksCounts[(ushort)MemberPromote.Rank]++;
                                                    if (MemberPromote.IsOnline)
                                                    {
                                                        client.Guild.SendGuild(MemberPromote.Client);
                                                        MemberPromote.Client.Entity.GuildBattlePower = client.Guild.GetSharedBattlepower(MemberPromote.Rank);
                                                        MemberPromote.Client.Entity.GuildRank = (ushort)MemberPromote.Rank;
                                                        MemberPromote.Client.Screen.FullWipe();
                                                        MemberPromote.Client.Screen.Reload(null);
                                                    }
                                                }
                                                if (GetMemberRank == (ushort)Enums.GuildMemberRank.Member)
                                                {
                                                    client.Guild.RanksCounts[(ushort)MemberPromote.Rank]--;
                                                    MemberPromote.Rank = (Enums.GuildMemberRank)GetMemberRank;
                                                    client.Guild.RanksCounts[(ushort)MemberPromote.Rank]++;
                                                    if (MemberPromote.IsOnline)
                                                    {
                                                        client.Guild.SendGuild(MemberPromote.Client);
                                                        MemberPromote.Client.Entity.GuildBattlePower = client.Guild.GetSharedBattlepower(MemberPromote.Rank);
                                                        MemberPromote.Client.Entity.GuildRank = (ushort)MemberPromote.Rank;
                                                        MemberPromote.Client.Screen.FullWipe();
                                                        MemberPromote.Client.Screen.Reload(null);
                                                    }
                                                }
                                            }
                                            client.Guild.SendGuildMessage(new Message((client.Entity.Name + " has appointed " + MemberPromote.Name + " as " + MemberPromote.Rank), System.Drawing.Color.Yellow, Message.Guild));
                                            MemberPromote.Client.Entity.GuildBattlePower = client.Guild.GetSharedBattlepower(MemberPromote.Rank);
                                        }
                                        else client.Send("Sorry Can't Find " + GetMemberName);
                                    }
                                    break;
                                }
                            case GuildCommand.PromoteInfo:
                                {
                                    if (client.AsMember.Rank == Enums.GuildMemberRank.GuildLeader)
                                    {
                                        SafeDictionary<uint, Game.ConquerStructures.Society.Guild.Member> array2 = new SafeDictionary<uint, Game.ConquerStructures.Society.Guild.Member>();
                                        foreach (var p in client.Guild.Members.Values)
                                        {
                                            if (p.Rank == (Enums.GuildMemberRank)command.dwParam)
                                            {
                                                array2.Add(p.ID, p);
                                            }
                                        }
                                        var array = array2.Values.ToArray();
                                        if (array != null)
                                        {
                                            byte[] Buffer = new byte[8 + 48 + array.Length * 32];
                                            Network.Writer.WriteUInt16((ushort)(Buffer.Length - 8), 0, Buffer);
                                            Network.Writer.WriteUInt16((ushort)2102, 2, Buffer);
                                            Network.Writer.Uint(1, 4, Buffer);
                                            Network.Writer.Uint((uint)array.Length, 12, Buffer);
                                            int offset = 16;
                                            for (int i = 0; i < array.Length; i++)
                                            {
                                                Network.Writer.Uint((uint)array[i].Level, offset, Buffer);//Level
                                                offset += 4;
                                                Network.Writer.Uint((uint)(array[i].IsOnline ? 1 : 0), offset, Buffer);//Online
                                                offset += 4;
                                                if (array[i].IsOnline)
                                                    Network.Writer.Uint((uint)array[i].Client.Entity.BattlePower, offset, Buffer);//BattlePower  
                                                offset += 4;
                                                offset += 4;
                                                Network.SafeWriter.WriteString(array[i].Name, offset, Buffer);//Name
                                                offset += 16;
                                            }
                                            client.Send(Buffer);
                                        }
                                    }
                                    client.Send(packet);
                                    break;
                                }
                         /*   case GuildCommand.ConfirmPromote:
                            case GuildCommand.PromoteSendRequest:
                                {
                                    try
                                    {
                                        if (client.Entity.ConquerPoints < 1000)
                                        {
                                            client.Send(new Message("You don't have enought CPs!", System.Drawing.Color.Red, Message.TopLeft)); return;
                                        }
                                        else
                                        {
                                            string Name = System.Text.Encoding.Default.GetString(packet, 26, packet[25]);
                                            Enums.GuildMemberRank rank = (Enums.GuildMemberRank)command.dwParam;

                                            if (client.Guild != null)
                                            {
                                                if (client.AsMember.Rank == Nyx.Server.Game.Enums.GuildMemberRank.GuildLeader)
                                                {
                                                    var member = client.Guild.GetMemberByName(Name);
                                                    if (member.ID != client.Entity.UID)
                                                    {
                                                        if (member.IsOnline)
                                                        {
                                                            if (rank == Enums.GuildMemberRank.GuildLeader)
                                                            {
                                                                client.Entity.GuildBattlePower = 0;
                                                                client.AsMember.Rank = member.Rank;
                                                                Nyx.Server.Database.EntityTable.UpdateGuildRank(client.Entity.UID, member.Rank);
                                                                member.Rank = Game.Enums.GuildMemberRank.GuildLeader;
                                                                Nyx.Server.Database.EntityTable.UpdateGuildRank(member.ID, member.Rank);
                                                                if (member.IsOnline)
                                                                {
                                                                    var memberClient = member.Client;
                                                                    member.Client.Entity.GuildBattlePower = 0;
                                                                    memberClient.Entity.GuildRank = (ushort)member.Rank;
                                                                    memberClient.Screen.FullWipe();
                                                                    memberClient.Screen.Reload(null);
                                                                    memberClient.Guild.SendGuild(memberClient);
                                                                }
                                                                client.Entity.GuildRank = (ushort)client.AsMember.Rank;
                                                                client.Screen.FullWipe();
                                                                client.Screen.Reload(null);
                                                                client.Guild.SendGuild(client);
                                                                client.Guild.GetMaxSharedBattlepower(true);
                                                            }
                                                            if (rank == Enums.GuildMemberRank.Aide || rank == Enums.GuildMemberRank.DeputyLeader)
                                                            {
                                                                client.Entity.ConquerPoints -= 1000;
                                                                command.Name = client.Entity.Name;
                                                                member.Client.Send(command);
                                                            }
                                                            else
                                                            {
                                                                if (member.Client.AsMember.Rank == Enums.GuildMemberRank.DeputyLeader)
                                                                {
                                                                    member.Client.Guild.DeputyLeaderCount--;
                                                                    member.Rank = (Enums.GuildMemberRank)Enums.GuildMemberRank.DeputyLeader;
                                                                    ushort[] expr_5C6F_cp_0 = client.Guild.RanksCounts;
                                                                    Enums.GuildMemberRank expr_5C6F_cp_1 = member.Rank;
                                                                    expr_5C6F_cp_0[(int)expr_5C6F_cp_1] = (ushort)(expr_5C6F_cp_0[(int)expr_5C6F_cp_1] - 1);
                                                                }
                                                                else if (member.Client.AsMember.Rank == Enums.GuildMemberRank.HDeputyLeader)
                                                                    member.Client.Guild.HDeputyLeaderCount--;
                                                                else if (member.Client.AsMember.Rank == Enums.GuildMemberRank.HonoraryManager)
                                                                    member.Client.Guild.HonoraryManagerCount--;
                                                                else if (member.Client.AsMember.Rank == Enums.GuildMemberRank.HonorarySuperv)
                                                                    member.Client.Guild.HonorarySupervCount--;
                                                                else if (member.Client.AsMember.Rank == Enums.GuildMemberRank.HonorarySteward)
                                                                    member.Client.Guild.HonoraryStewardCount--;
                                                                else if (member.Client.AsMember.Rank == Enums.GuildMemberRank.Aide)
                                                                    member.Client.Guild.AideCount--;

                                                                client.Entity.ConquerPoints -= 1000;
                                                                member.Client.AsMember.Rank = rank;
                                                                member.Client.Guild.SendGuild(member.Client);
                                                                member.Client.Entity.GuildRank = (ushort)rank;
                                                                member.Client.Screen.FullWipe();
                                                                member.Client.Screen.Reload(null);
                                                                member.Client.Entity.GuildBattlePower = client.Guild.GetSharedBattlepower(member.Client.Entity.GuildRank);

                                                                if (rank == Enums.GuildMemberRank.DeputyLeader)
                                                                {
                                                                    member.Client.Guild.DeputyLeaderCount++;
                                                                    member.Client.Guild.DeputyLeaderCount--;
                                                                    member.Rank = (Enums.GuildMemberRank)Enums.GuildMemberRank.DeputyLeader;
                                                                    ushort[] expr_5C6F_cp_0 = client.Guild.RanksCounts;
                                                                    Enums.GuildMemberRank expr_5C6F_cp_1 = member.Rank;
                                                                    expr_5C6F_cp_0[(int)expr_5C6F_cp_1] = (ushort)(expr_5C6F_cp_0[(int)expr_5C6F_cp_1] + 1);
                                                                }
                                                                else if (rank == Enums.GuildMemberRank.HDeputyLeader)
                                                                    member.Client.Guild.HDeputyLeaderCount++;
                                                                else if (rank == Enums.GuildMemberRank.HonoraryManager)
                                                                    member.Client.Guild.HonoraryManagerCount++;
                                                                else if (rank == Enums.GuildMemberRank.HonorarySuperv)
                                                                    member.Client.Guild.HonorarySupervCount++;
                                                                else if (rank == Enums.GuildMemberRank.HonorarySteward)
                                                                    member.Client.Guild.HonoraryStewardCount++;
                                                                else if (rank == Enums.GuildMemberRank.Aide)
                                                                    member.Client.Guild.AideCount++;
                                                                Database.EntityTable.UpdateData(member.Client.Entity.UID, "GuildRank", (int)member.Client.Entity.GuildRank);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                    }
                                    catch { }
                                    break;
                                }
                            case GuildCommand.PromoteAcceptRequest:
                                {
                                    bool Accpet = command.dwBool;
                                    if (Accpet == true)
                                    {
                                        if (client.AsMember.Rank == Enums.GuildMemberRank.DeputyLeader)
                                            client.Guild.DeputyLeaderCount--;
                                        else if (client.AsMember.Rank == Enums.GuildMemberRank.HDeputyLeader)
                                            client.Guild.HDeputyLeaderCount--;
                                        else if (client.AsMember.Rank == Enums.GuildMemberRank.HonoraryManager)
                                            client.Guild.HonoraryManagerCount--;
                                        else if (client.AsMember.Rank == Enums.GuildMemberRank.HonorarySuperv)
                                            client.Guild.HonorarySupervCount--;
                                        else if (client.AsMember.Rank == Enums.GuildMemberRank.HonorarySteward)
                                            client.Guild.HonoraryStewardCount--;
                                        else if (client.AsMember.Rank == Enums.GuildMemberRank.Aide)
                                            client.Guild.AideCount--;

                                        uint Position = command.dwParam;
                                        Enums.GuildMemberRank rank = (Enums.GuildMemberRank)Position;
                                        client.AsMember.Rank = (Nyx.Server.Game.Enums.GuildMemberRank)Position;

                                        client.Guild.SendGuild(client);
                                        client.Entity.GuildRank = (ushort)(Nyx.Server.Game.Enums.GuildMemberRank)Position;
                                        client.Screen.FullWipe();
                                        client.Screen.Reload(null);
                                        client.Entity.GuildBattlePower = client.Guild.GetSharedBattlepower(client.Entity.GuildRank);

                                        if (rank == Enums.GuildMemberRank.DeputyLeader)
                                            client.Guild.DeputyLeaderCount++;
                                        else if (rank == Enums.GuildMemberRank.HDeputyLeader)
                                            client.Guild.HDeputyLeaderCount++;
                                        else if (rank == Enums.GuildMemberRank.HonoraryManager)
                                            client.Guild.HonoraryManagerCount++;
                                        else if (rank == Enums.GuildMemberRank.HonorarySuperv)
                                            client.Guild.HonorarySupervCount++;
                                        else if (rank == Enums.GuildMemberRank.HonorarySteward)
                                            client.Guild.HonoraryStewardCount++;
                                        else if (rank == Enums.GuildMemberRank.Aide)
                                            client.Guild.AideCount++;
                                        Database.EntityTable.UpdateData(client.Entity.UID, "GuildRank", (int)client.Entity.GuildRank);
                                    }
                                    break;
                                }*/
                            case GuildCommand.Unknown:
                                {
                                    client.Send(command);
                                    break;
                                }
                            case GuildCommand.MakeBlackList:
                                {
                                    if (client.Guild != null)
                                    {
                                        uint UID = command.dwParam;
                                        if (Kernel.GamePool.ContainsKey(UID))
                                        {
                                            var c = Kernel.GamePool[UID];
                                            if (!client.Guild.BlackList.Contains(UID))
                                                client.Guild.BlackList.Add(UID);
                                            c.Send(command);
                                        }
                                        client.Send("Tha target is addad to the Guild Blacklist.");
                                    }
                                    break;
                                }
                            case GuildCommand.RemoveBlackList:
                                {
                                    if (client.Guild != null)
                                    {
                                        uint UID = command.dwParam;
                                        if (client.Guild.BlackList.Contains(UID))
                                            client.Guild.BlackList.Remove(UID);
                                        client.Send(command);
                                    }
                                    client.Send("Removed from blacklist successfully. The target is recruitable, now.");
                                    break;
                                }
                            case GuildCommand.JoinRequest: // asking gl
                                {
                                    GameClient Target;
                                    if (Kernel.GamePool.TryGetValue(command.dwParam, out Target))
                                    {
                                        if (Target.Guild.BlackList.Contains(client.Entity.UID))
                                        {
                                            command.Type = GuildCommand.GuildBlackList;
                                            client.Send(command);
                                            return;
                                        }
                                        client.GuildJoinTarget = Target.Entity.UID;
                                        PopupLevelBP request = new PopupLevelBP(Target, client);
                                        request.Requester = client.Entity.UID;
                                        request.Receiver = Target.Entity.UID;
                                        request.Level = client.Entity.Level;
                                        request.BattlePower = (uint)client.Entity.BattlePower;
                                        Target.Send(request);
                                        if (client.GuildJoinTarget == Target.Entity.UID &&
                                            Target.GuildJoinTarget == client.Entity.UID)
                                        {
                                            client.GuildJoinTarget = 0;
                                            Target.GuildJoinTarget = 0;

                                            Game.ConquerStructures.Society.Guild g;
                                            if (Kernel.Guilds.TryGetValue(Target.Entity.GuildID, out g))
                                            {
                                                if (Target.AsMember.Rank != Game.Enums.GuildMemberRank.Member)
                                                {
                                                    if (client.Entity.GuildID == 0)
                                                    {
                                                        if (client.Union != null)
                                                        {
                                                            var Union = Kernel.Unions[client.UnionID];
                                                            Union.RemoveMember(client);
                                                        }
                                                        g.AddMember(client);
                                                       if (Kernel.Unions.ContainsKey(g.UnionID) && Kernel.Unions[g.UnionID] != null)
                                                        {
                                                            Kernel.Unions[g.UnionID].AddMember(client);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            Nyx.Server.Game.ConquerStructures.Society.Guild tG;
                                            if (Kernel.Guilds.TryGetValue(Target.Entity.GuildID, out tG))
                                            {
                                                if (Target.AsMember.Rank != Game.Enums.GuildMemberRank.Member)
                                                {
                                                    if (PassJoinRequirements(client, tG))
                                                    {
                                                        client.Entity.GuildRequest = Time32.Now;
                                                        command.dwParam = client.Entity.UID;
                                                        Target.Send(command);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    break;
                                }

                            case GuildCommand.InviteRequest: // gl invites
                                {
                                    GameClient Target;
                                    if (Kernel.GamePool.TryGetValue(command.dwParam, out Target))
                                    {
                                        if (client.Guild.BlackList.Contains(Target.Entity.UID))
                                        {
                                            command.Type = GuildCommand.SmsBlackList;
                                            client.Send(command);
                                            return;
                                        }
                                        client.GuildJoinTarget = Target.Entity.UID;
                                        PopupLevelBP request = new PopupLevelBP(Target, client);
                                        request.Requester = client.Entity.UID;
                                        request.Receiver = Target.Entity.UID;
                                        request.Level = client.Entity.Level;
                                        request.BattlePower = (uint)client.Entity.BattlePower;
                                        Target.Send(request);
                                        if (client.GuildJoinTarget == Target.Entity.UID &&
                                            Target.GuildJoinTarget == client.Entity.UID)
                                        {
                                            client.GuildJoinTarget = 0;
                                            Target.GuildJoinTarget = 0;

                                            Nyx.Server.Game.ConquerStructures.Society.Guild g;
                                            if (Kernel.Guilds.TryGetValue(client.Entity.GuildID, out g))
                                            {
                                                if (client.AsMember.Rank != Game.Enums.GuildMemberRank.Member)
                                                {
                                                    g.AddMember(Target);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (client.AsMember.Rank != Game.Enums.GuildMemberRank.Member)
                                            {
                                                client.Entity.GuildRequest = Time32.Now;
                                                command.dwParam = client.Entity.UID;
                                                Target.Send(command);
                                            }
                                        }
                                    }
                                    break;
                                }
                            case GuildCommand.Quit:
                                {
                                    if (client.Guild != null)
                                    {
                                        if (client.AsMember.Rank != Enums.GuildMemberRank.GuildLeader)
                                        {
                                            client.Guild.ExpelMember(client.Entity.Name, true);

                                        }
                                    }
                                    break;
                                }
                        }
                        break;
                    }
                #endregion
                #region Enlight (1127)
                case 1127:
                    {
                        Enlight enlight = new Enlight(false);
                        enlight.Deserialize(packet);
                        if (Kernel.GamePool.ContainsKey(enlight.EnlightedUID))
                        {
                            var Client = Kernel.GamePool[enlight.EnlightedUID];

                            if (enlight.EnlighterUID == client.Entity.UID && enlight.EnlightedUID != enlight.EnlighterUID)
                            {
                                if (Client.Entity.ReceivedEnlightenPoints < 5)
                                {
                                    if (client.Entity.EnlightenPoints >= 1)
                                    {
                                        if (Client.Entity.EnlightmentTime <= 80)
                                        {
                                            client.Entity.EnlightenPoints -= 1;
                                            client.Entity.EnlightmentTimes++;
                                            client.Activenes.SendSinglePacket(client, Activeness.Types.Enlightenment, client.Entity.EnlightmentTimes);
                                            Client.Entity.EnlightmentStamp = Time32.Now;
                                            Client.IncreaseExperience(Game.Attacking.Calculate.Percent((int)Client.ExpBall, .10F), false);
                                            Client.SendScreen(packet, true);
                                            Client.Entity.ReceivedEnlightenPoints++;
                                            Client.Entity.EnlightmentTime += 20;
                                            if (client.Entity.EnlightmentTime > 80)
                                                client.Entity.EnlightmentTime = 100;
                                            else if (client.Entity.EnlightmentTime > 60)
                                                client.Entity.EnlightmentTime = 80;
                                            else if (client.Entity.EnlightmentTime > 40)
                                                client.Entity.EnlightmentTime = 60;
                                            else if (client.Entity.EnlightmentTime > 20)
                                                client.Entity.EnlightmentTime = 40;
                                            else if (client.Entity.EnlightmentTime > 0)
                                                client.Entity.EnlightmentTime = 20;
                                        }
                                        else client.Send(new Message("You can't enlighten " + Client.Entity.Name + " yet because he has to wait a few minutes until he can be enlightened again.", System.Drawing.Color.Red, Message.TopLeft));
                                    }
                                    else client.Send(new Message("You can't enlighten " + Client.Entity.Name + " because you don't have enough enlighten points!", System.Drawing.Color.Red, Message.TopLeft));
                                }
                                else client.Send(new Message("You can't enlighten " + Client.Entity.Name + " because he/she was enlightened today five times already!", System.Drawing.Color.Red, Message.TopLeft));
                            }
                        }
                        break;
                    }
                #endregion
                //#region 1134: Quest
                //case 1135:
                //    {
                //        QuestData quest = new QuestData(true);
                //        quest.Deserialize(packet);
                //        break;
                //    }
                //case 1134:
                //    {
                //        QuestPacket quest = new QuestPacket(false);
                //        quest.Deserialize(packet);
                //        switch (quest.Action)
                //        {
                //            case QuestPacket.QuestAction.Begin:
                //                {
                //                   /* if (client.Quests.AllowAccept())
                //                        client.Quests.Accept((QuestID)quest[0].UID, 0);
                //                    client.Send(quest);*/
                //                    break;
                //                }
                //            case QuestPacket.QuestAction.List:
                //                {
                //                    client.Quests.SendFullGUI();
                //                    break;
                //                }
                //        }
                //        break;
                //    }
                //#endregion
                #region NPC Dialog (2031 + 2032)
                case 2031:
                case 2032:
                    {
                        if (client.Action != 2)
                            return;
                        NpcRequest req = new NpcRequest();
                        req.Deserialize(packet);
                        if (req.InteractType == 102)
                        {
                            var quest = req.NpcID - QuestInfo.ActionBase;
                            client.Quests.QuitQuest((QuestID)quest);
                        }
                        if (req.InteractType == NpcReply.MessageBox)
                        {

                            if (req.OptionID == 255 && client.MessageOK != null)
                                client.MessageOK.Invoke(client);
                            else
                                if (client.MessageCancel != null)
                                    client.MessageCancel.Invoke(client);

                            client.MessageOK = null;
                            client.MessageCancel = null;
                        }
                        else
                        {
                            if (ID == 2031)
                                client.ActiveNpc = req.NpcID;
                            if (req.NpcID == 12)
                            {
                                if (client.Entity.VIPLevel > 0)
                                {
                                    Data data = new Data(true);
                                    data.ID = Data.OpenWindow;
                                    data.UID = client.Entity.UID;
                                    data.TimeStamp = Time32.Now;
                                    data.dwParam = Data.WindowCommands.VIPWarehouse;
                                    data.wParam1 = client.Entity.X;
                                    data.wParam2 = client.Entity.Y;
                                    client.Send(data);
                                    break;
                                }
                            }
                            Interfaces.INpc npc = null;
                            if (req.InteractType == 102)
                            {
                                if (client.Guild != null)
                                {
                                    if (client.AsMember.Rank == Nyx.Server.Game.Enums.GuildMemberRank.GuildLeader)
                                    {
                                        client.Guild.ExpelMember(req.Input, false);
                                    }
                                }
                                return;
                            }
                            if (client.ActiveNpc == 720842)
                            {
                                if (client.Inventory.Contains(client.ActiveNpc, 1))
                                {
                                    if (req.OptionID == 1)
                                    {
                                        if (client.Entity.SwordSoul)
                                        {
                                            client.Send(new Message("The Sword Soul can only be used once a day!", Color.White, Message.System));
                                            return;
                                        }
                                        client.Entity.SwordSoul = true;
                                        Database.MonsterInformation mob;
                                        Database.MonsterInformation.MonsterInformations.TryGetValue(4170, out mob);
                                        client.Map.Spawnthis(mob, client, client.Entity.MapID, (ushort)(client.Entity.X - 2), (ushort)(client.Entity.Y - 2));
                                        client.SendScreenSpawn(client.Entity, true);
                                        client.Screen.FullWipe();
                                        client.Screen.Reload(null);
                                        client.Inventory.Remove(client.ActiveNpc, 1);
                                    }
                                }
                                return;
                            }
                            if (client.ActiveNpc == 3004259)
                            {
                                if (client.Inventory.Contains(client.ActiveNpc, 1))
                                {
                                    if (req.OptionID == 1)
                                    {
                                        if (client.Entity.BansheeSpirit)
                                        {
                                            client.Send(new Message("The Banshee Spirit can only be used once a day!", Color.White, Message.System));
                                            return;
                                        }
                                        client.Entity.BansheeSpirit = true;
                                        Database.MonsterInformation mob;
                                        Database.MonsterInformation.MonsterInformations.TryGetValue(7565, out mob);
                                        client.Map.Spawnthis(mob, client, client.Entity.MapID, (ushort)(client.Entity.X - 2), (ushort)(client.Entity.Y - 2));
                                        client.SendScreenSpawn(client.Entity, true);
                                        client.Screen.FullWipe();
                                        client.Screen.Reload(null);
                                        client.Inventory.Remove(client.ActiveNpc, 1);
                                    }
                                }
                                return;
                            }
                            if (client.ActiveNpc == 3004464)
                            {
                                if (client.Inventory.Contains(client.ActiveNpc, 1))
                                {
                                    if (req.OptionID == 1)
                                    {
                                        if (client.Inventory.Count <= 35)
                                        {
                                            if (client.Equipment.TryGetItem((byte)Positions.Left) == null)
                                            {
                                                client.MessageBox("Please Equip Wep In Left Hand!");
                                                return;
                                            }
                                            ConquerItem Item = null;
                                            Item = client.Equipment.TryGetItem((byte)Positions.Left);
                                            if (Item.ID / 1000 == 601)
                                            {
                                                ConquerItem Item2 = new ConquerItem(true);
                                                Item2.UID = ConquerItem.ItemUID.Next;
                                                Item2.ID = 616020 + (Item.ID % 10);
                                                Item2.Inscribed = Item.Inscribed;
                                                Item2.Lock = Item.Lock;
                                                Item2.MaximDurability = Database.ConquerItemInformation.BaseInformations[Item2.ID].Durability;
                                                Item2.Durability = Item2.MaximDurability;
                                                Item2.Bless = Item.Bless;
                                                Item2.Bound = Item.Bound;
                                                Item2.Enchant = Item.Enchant;
                                                Item2.Plus = Item.Plus;
                                                Item2.PlusProgress = Item.PlusProgress;
                                                Item2.Position = Item.Position;
                                                Item2.Purification = Item.Purification;
                                                Item2.RefineItem = Item.RefineItem;
                                                Item2.RefineryStarted = Item.RefineryStarted;
                                                Item2.RefineryTime = Item.RefineryTime;
                                                Item2.SocketOne = Item.SocketOne;
                                                Item2.SocketProgress = Item.SocketProgress;
                                                Item2.SocketTwo = Item.SocketTwo;
                                                Item2.Suspicious = Item.Suspicious;
                                                Item2.StatsLoaded = Item.StatsLoaded;
                                                Item2.SuspiciousStart = Item.SuspiciousStart;
                                                Item2.UnlockEnd = Item.UnlockEnd;
                                                Item2.Unlocking = Item.Unlocking;
                                                client.Equipment.Remove((byte)Item.Position);
                                                client.Equipment.Add(Item2);
                                                Item2.Mode = Enums.ItemMode.Update;
                                                Item2.Send(client);
                                                client.CalculateStatBonus();
                                                client.CalculateHPBonus();
                                                client.LoadItemStats();
                                                ClientEquip equips = new ClientEquip();
                                                equips.DoEquips(client);
                                                client.Send(equips);
                                                client.ReshareClan();
                                                if (client.Team != null)
                                                    foreach (var teammate in client.Team.Teammates)
                                                        teammate.ReshareClan();
                                            }
                                            else
                                            {
                                                client.MessageBox("Please Equip Katana In Left Hand!");
                                                return;
                                            }
                                        }
                                        else
                                        {
                                            client.Send(Constants.FullInventory);
                                            return;
                                        }
                                        client.Inventory.Remove(client.ActiveNpc, 1);
                                    }
                                    if (req.OptionID == 2)
                                    {
                                        if (client.Inventory.Count <= 35)
                                        {
                                            if (client.Equipment.TryGetItem((byte)Positions.Right) == null)
                                            {
                                                client.MessageBox("Please Equip Wep In Right Hand!");
                                                return;
                                            }
                                            ConquerItem Item = null;
                                            Item = client.Equipment.TryGetItem((byte)Positions.Right);
                                            if (Item.ID / 1000 == 601)
                                            {
                                                ConquerItem Item2 = new ConquerItem(true);
                                                Item2.UID = ConquerItem.ItemUID.Next;
                                                Item2.ID = 616020 + (Item.ID % 10);
                                                Item2.Inscribed = Item.Inscribed;
                                                Item2.Lock = Item.Lock;
                                                Item2.MaximDurability = Database.ConquerItemInformation.BaseInformations[Item2.ID].Durability;
                                                Item2.Durability = Item2.MaximDurability;
                                                Item2.Bless = Item.Bless;
                                                Item2.Bound = Item.Bound;
                                                Item2.Enchant = Item.Enchant;
                                                Item2.Plus = Item.Plus;
                                                Item2.PlusProgress = Item.PlusProgress;
                                                Item2.Position = Item.Position;
                                                Item2.Purification = Item.Purification;
                                                Item2.RefineItem = Item.RefineItem;
                                                Item2.RefineryStarted = Item.RefineryStarted;
                                                Item2.RefineryTime = Item.RefineryTime;
                                                Item2.SocketOne = Item.SocketOne;
                                                Item2.SocketProgress = Item.SocketProgress;
                                                Item2.SocketTwo = Item.SocketTwo;
                                                Item2.Suspicious = Item.Suspicious;
                                                Item2.StatsLoaded = Item.StatsLoaded;
                                                Item2.SuspiciousStart = Item.SuspiciousStart;
                                                Item2.UnlockEnd = Item.UnlockEnd;
                                                Item2.Unlocking = Item.Unlocking;
                                                client.Equipment.Remove((byte)Item.Position);
                                                client.Equipment.Add(Item2);
                                                Item2.Mode = Enums.ItemMode.Update;
                                                Item2.Send(client);
                                                client.CalculateStatBonus();
                                                client.CalculateHPBonus();
                                                client.LoadItemStats();
                                                ClientEquip equips = new ClientEquip();
                                                equips.DoEquips(client);
                                                client.Send(equips);
                                                client.ReshareClan();
                                                if (client.Team != null)
                                                    foreach (var teammate in client.Team.Teammates)
                                                        teammate.ReshareClan();
                                            }
                                            else
                                            {
                                                client.MessageBox("Please Equip Katana In Right Hand!");
                                                return;
                                            }
                                        }
                                        else
                                        {
                                            client.Send(Constants.FullInventory);
                                            return;
                                        }
                                        client.Inventory.Remove(client.ActiveNpc, 1);
                                    }
                                }
                            }
                            if (client.ActiveNpc == 3006016)
                            {
                                if (client.Inventory.Contains(client.ActiveNpc, 1))
                                {
                                    if (client.Inventory.Count <= 35)
                                    {
                                        if (client.Equipment.TryGetItem((byte)Positions.Right) == null)
                                        {
                                            client.MessageBox("Please Equip Wep In Right Hand!");
                                            return;
                                        }
                                        ConquerItem Item = null;
                                        Item = client.Equipment.TryGetItem((byte)Positions.Right);
                                        if (Item.ID / 1000 == 421)
                                        {
                                            ConquerItem Item2 = new ConquerItem(true);
                                            Item2.UID = ConquerItem.ItemUID.Next;
                                            if (req.OptionID == 1)
                                            {
                                                Item2.ID = 620020 + (Item.ID % 10);
                                            }
                                            if (req.OptionID == 2)
                                            {
                                                Item2.ID = 619020 + (Item.ID % 10);
                                            }
                                            Item2.Inscribed = Item.Inscribed;
                                            Item2.Lock = Item.Lock;
                                            Item2.MaximDurability = Database.ConquerItemInformation.BaseInformations[Item2.ID].Durability;
                                            Item2.Durability = Item2.MaximDurability;
                                            Item2.Bless = Item.Bless;
                                            Item2.Bound = Item.Bound;
                                            Item2.Enchant = Item.Enchant;
                                            Item2.Plus = Item.Plus;
                                            Item2.PlusProgress = Item.PlusProgress;
                                            Item2.Position = Item.Position;
                                            Item2.Purification = Item.Purification;
                                            Item2.RefineItem = Item.RefineItem;
                                            Item2.RefineryStarted = Item.RefineryStarted;
                                            Item2.RefineryTime = Item.RefineryTime;
                                            Item2.SocketOne = Item.SocketOne;
                                            Item2.SocketProgress = Item.SocketProgress;
                                            Item2.SocketTwo = Item.SocketTwo;
                                            Item2.Suspicious = Item.Suspicious;
                                            Item2.StatsLoaded = Item.StatsLoaded;
                                            Item2.SuspiciousStart = Item.SuspiciousStart;
                                            Item2.UnlockEnd = Item.UnlockEnd;
                                            Item2.Unlocking = Item.Unlocking;
                                            client.Equipment.Remove((byte)Item.Position);
                                            client.Equipment.Add(Item2);
                                            Item2.Mode = Enums.ItemMode.Update;
                                            Item2.Send(client);
                                            client.CalculateStatBonus();
                                            client.CalculateHPBonus();
                                            client.LoadItemStats();
                                            ClientEquip equips = new ClientEquip();
                                            equips.DoEquips(client);
                                            client.Send(equips);
                                            client.ReshareClan();
                                            if (client.Team != null)
                                                foreach (var teammate in client.Team.Teammates)
                                                    teammate.ReshareClan();
                                        }
                                        else
                                        {
                                            client.MessageBox("Please Equip Backsword In Right Hand!");
                                            return;
                                        }
                                    }
                                    else
                                    {
                                        client.Send(Constants.FullInventory);
                                        return;
                                    }
                                    client.Inventory.Remove(client.ActiveNpc, 1);
                                }
                            }
                            if (client.ActiveNpc == 3007564)
                            {
                                if (client.Inventory.Contains(client.ActiveNpc, 1))
                                {
                                    if (req.OptionID == 1)
                                    {
                                        if (client.Inventory.Count <= 35)
                                        {
                                            if (client.Equipment.TryGetItem((byte)Positions.Left) == null)
                                            {
                                                client.MessageBox("Please Equip Wep In Left Hand!");
                                                return;
                                            }
                                            ConquerItem Item = null;
                                            Item = client.Equipment.TryGetItem((byte)Positions.Left);
                                            if (Item.ID / 1000 == 610)
                                            {
                                                ConquerItem Item2 = new ConquerItem(true);
                                                Item2.UID = ConquerItem.ItemUID.Next;
                                                Item2.ID = 622020 + (Item.ID % 10);
                                                Item2.Inscribed = Item.Inscribed;
                                                Item2.Lock = Item.Lock;
                                                Item2.MaximDurability = Database.ConquerItemInformation.BaseInformations[Item2.ID].Durability;
                                                Item2.Durability = Item2.MaximDurability;
                                                Item2.Bless = Item.Bless;
                                                Item2.Bound = Item.Bound;
                                                Item2.Enchant = Item.Enchant;
                                                Item2.Plus = Item.Plus;
                                                Item2.PlusProgress = Item.PlusProgress;
                                                Item2.Position = Item.Position;
                                                Item2.Purification = Item.Purification;
                                                Item2.RefineItem = Item.RefineItem;
                                                Item2.RefineryStarted = Item.RefineryStarted;
                                                Item2.RefineryTime = Item.RefineryTime;
                                                Item2.SocketOne = Item.SocketOne;
                                                Item2.SocketProgress = Item.SocketProgress;
                                                Item2.SocketTwo = Item.SocketTwo;
                                                Item2.Suspicious = Item.Suspicious;
                                                Item2.StatsLoaded = Item.StatsLoaded;
                                                Item2.SuspiciousStart = Item.SuspiciousStart;
                                                Item2.UnlockEnd = Item.UnlockEnd;
                                                Item2.Unlocking = Item.Unlocking;
                                                client.Equipment.Remove((byte)Item.Position);
                                                client.Equipment.Add(Item2);
                                                Item2.Mode = Enums.ItemMode.Update;
                                                Item2.Send(client);
                                                client.CalculateStatBonus();
                                                client.CalculateHPBonus();
                                                client.LoadItemStats();
                                                ClientEquip equips = new ClientEquip();
                                                equips.DoEquips(client);
                                                client.Send(equips);
                                                client.ReshareClan();
                                                if (client.Team != null)
                                                    foreach (var teammate in client.Team.Teammates)
                                                        teammate.ReshareClan();
                                            }
                                            else
                                            {
                                                client.MessageBox("Please Equip Bead In Left Hand!");
                                                return;
                                            }
                                        }
                                        else
                                        {
                                            client.Send(Constants.FullInventory);
                                            return;
                                        }
                                        client.Inventory.Remove(client.ActiveNpc, 1);
                                    }
                                    if (req.OptionID == 2)
                                    {
                                        if (client.Inventory.Count <= 35)
                                        {
                                            if (client.Equipment.TryGetItem((byte)Positions.Right) == null)
                                            {
                                                client.MessageBox("Please Equip Wep In Right Hand!");
                                                return;
                                            }
                                            ConquerItem Item = null;
                                            Item = client.Equipment.TryGetItem((byte)Positions.Right);
                                            if (Item.ID / 1000 == 610)
                                            {
                                                ConquerItem Item2 = new ConquerItem(true);
                                                Item2.UID = ConquerItem.ItemUID.Next;
                                                Item2.ID = 622020 + (Item.ID % 10);
                                                Item2.Inscribed = Item.Inscribed;
                                                Item2.Lock = Item.Lock;
                                                Item2.MaximDurability = Database.ConquerItemInformation.BaseInformations[Item2.ID].Durability;
                                                Item2.Durability = Item2.MaximDurability;
                                                Item2.Bless = Item.Bless;
                                                Item2.Bound = Item.Bound;
                                                Item2.Enchant = Item.Enchant;
                                                Item2.Plus = Item.Plus;
                                                Item2.PlusProgress = Item.PlusProgress;
                                                Item2.Position = Item.Position;
                                                Item2.Purification = Item.Purification;
                                                Item2.RefineItem = Item.RefineItem;
                                                Item2.RefineryStarted = Item.RefineryStarted;
                                                Item2.RefineryTime = Item.RefineryTime;
                                                Item2.SocketOne = Item.SocketOne;
                                                Item2.SocketProgress = Item.SocketProgress;
                                                Item2.SocketTwo = Item.SocketTwo;
                                                Item2.Suspicious = Item.Suspicious;
                                                Item2.StatsLoaded = Item.StatsLoaded;
                                                Item2.SuspiciousStart = Item.SuspiciousStart;
                                                Item2.UnlockEnd = Item.UnlockEnd;
                                                Item2.Unlocking = Item.Unlocking;
                                                client.Equipment.Remove((byte)Item.Position);
                                                client.Equipment.Add(Item2);
                                                Item2.Mode = Enums.ItemMode.Update;
                                                Item2.Send(client);
                                                Item2.Mode = Enums.ItemMode.Update;
                                                Item2.Send(client);
                                                client.CalculateStatBonus();
                                                client.CalculateHPBonus();
                                                client.LoadItemStats();
                                                ClientEquip equips = new ClientEquip();
                                                equips.DoEquips(client);
                                                client.Send(equips);
                                                client.ReshareClan();
                                                if (client.Team != null)
                                                    foreach (var teammate in client.Team.Teammates)
                                                        teammate.ReshareClan();
                                            }
                                            else
                                            {
                                                client.MessageBox("Please Equip Bead In Right Hand!");
                                                return;
                                            }
                                        }
                                        else
                                        {
                                            client.Send(Constants.FullInventory);
                                            return;
                                        }
                                        client.Inventory.Remove(client.ActiveNpc, 1);
                                    }
                                }
                            }
                            if (client.ActiveNpc == 3003340)
                            {
                                if (client.Inventory.Contains(client.ActiveNpc, 1))
                                {
                                    if (req.OptionID == 1)
                                    {
                                        if (client.Inventory.Count <= 35)
                                        {
                                            if (client.Equipment.TryGetItem((byte)Positions.Left) == null)
                                            {
                                                client.MessageBox("Please Equip Wep In Left Hand!");
                                                return;
                                            }
                                            ConquerItem Item = null;
                                            Item = client.Equipment.TryGetItem((byte)Positions.Left);
                                            if (Item.ID / 1000 == 410 || Item.ID / 1000 == 420 || Item.ID / 1000 == 460 || Item.ID / 1000 == 480 || Item.ID / 1000 == 440 || Item.ID / 1000 == 430 || Item.ID / 1000 == 450)
                                            {
                                                ConquerItem Item2 = new ConquerItem(true);
                                                Item2.UID = ConquerItem.ItemUID.Next;
                                                Item2.ID = 614020 + (Item.ID % 10);
                                                Item2.Inscribed = Item.Inscribed;
                                                Item2.Lock = Item.Lock;
                                                Item2.MaximDurability = Database.ConquerItemInformation.BaseInformations[Item2.ID].Durability;
                                                Item2.Durability = Item2.MaximDurability;
                                                Item2.Bless = Item.Bless;
                                                Item2.Bound = Item.Bound;
                                                Item2.Enchant = Item.Enchant;
                                                Item2.Plus = Item.Plus;
                                                Item2.PlusProgress = Item.PlusProgress;
                                                Item2.Position = Item.Position;
                                                Item2.Purification = Item.Purification;
                                                Item2.RefineItem = Item.RefineItem;
                                                Item2.RefineryStarted = Item.RefineryStarted;
                                                Item2.RefineryTime = Item.RefineryTime;
                                                Item2.SocketOne = Item.SocketOne;
                                                Item2.SocketProgress = Item.SocketProgress;
                                                Item2.SocketTwo = Item.SocketTwo;
                                                Item2.Suspicious = Item.Suspicious;
                                                Item2.StatsLoaded = Item.StatsLoaded;
                                                Item2.SuspiciousStart = Item.SuspiciousStart;
                                                Item2.UnlockEnd = Item.UnlockEnd;
                                                Item2.Unlocking = Item.Unlocking;
                                                client.Equipment.Remove((byte)Item.Position);
                                                client.Equipment.Add(Item2);
                                                Item2.Mode = Enums.ItemMode.Update;
                                                Item2.Send(client);
                                                client.CalculateStatBonus();
                                                client.CalculateHPBonus();
                                                client.LoadItemStats();
                                                ClientEquip equips = new ClientEquip();
                                                equips.DoEquips(client);
                                                client.Send(equips);
                                                client.ReshareClan();
                                                if (client.Team != null)
                                                    foreach (var teammate in client.Team.Teammates)
                                                        teammate.ReshareClan();
                                            }
                                            else
                                            {
                                                client.MessageBox("Please Equip Blade, Sword, Whip, Hook, Axe, Hammer, Club, Dagger or Scepter In Left Hand!");
                                                return;
                                            }
                                        }
                                        else
                                        {
                                            client.Send(Constants.FullInventory);
                                            return;
                                        }
                                        client.Inventory.Remove(client.ActiveNpc, 1);
                                    }
                                    if (req.OptionID == 2)
                                    {
                                        if (client.Inventory.Count <= 35)
                                        {
                                            if (client.Equipment.TryGetItem((byte)Positions.Right) == null)
                                            {
                                                client.MessageBox("Please Equip Wep In Right Hand!");
                                                return;
                                            }
                                            ConquerItem Item = null;
                                            Item = client.Equipment.TryGetItem((byte)Positions.Right);
                                            if (Item.ID / 1000 == 410 || Item.ID / 1000 == 420 || Item.ID / 1000 == 460 || Item.ID / 1000 == 480 || Item.ID / 1000 == 440 || Item.ID / 1000 == 430 || Item.ID / 1000 == 450)
                                            {
                                                ConquerItem Item2 = new ConquerItem(true);
                                                Item2.UID = ConquerItem.ItemUID.Next;
                                                Item2.ID = 614020 + (Item.ID % 10);
                                                Item2.Inscribed = Item.Inscribed;
                                                Item2.Lock = Item.Lock;
                                                Item2.MaximDurability = Database.ConquerItemInformation.BaseInformations[Item2.ID].Durability;
                                                Item2.Durability = Item2.MaximDurability;
                                                Item2.Bless = Item.Bless;
                                                Item2.Bound = Item.Bound;
                                                Item2.Enchant = Item.Enchant;
                                                Item2.Plus = Item.Plus;
                                                Item2.PlusProgress = Item.PlusProgress;
                                                Item2.Position = Item.Position;
                                                Item2.Purification = Item.Purification;
                                                Item2.RefineItem = Item.RefineItem;
                                                Item2.RefineryStarted = Item.RefineryStarted;
                                                Item2.RefineryTime = Item.RefineryTime;
                                                Item2.SocketOne = Item.SocketOne;
                                                Item2.SocketProgress = Item.SocketProgress;
                                                Item2.SocketTwo = Item.SocketTwo;
                                                Item2.Suspicious = Item.Suspicious;
                                                Item2.StatsLoaded = Item.StatsLoaded;
                                                Item2.SuspiciousStart = Item.SuspiciousStart;
                                                Item2.UnlockEnd = Item.UnlockEnd;
                                                Item2.Unlocking = Item.Unlocking;
                                                if (!client.Equipment.Free((byte)Positions.Left))
                                                {
                                                    client.Equipment.Remove((byte)Positions.Left);
                                                }
                                                client.Equipment.Remove((byte)Item.Position);
                                                client.Equipment.Add(Item2);
                                                Item2.Mode = Enums.ItemMode.Update;
                                                Item2.Send(client);
                                                client.CalculateStatBonus();
                                                client.CalculateHPBonus();
                                                client.LoadItemStats();
                                                ClientEquip equips = new ClientEquip();
                                                equips.DoEquips(client);
                                                client.Send(equips);
                                                client.ReshareClan();
                                                if (client.Team != null)
                                                    foreach (var teammate in client.Team.Teammates)
                                                        teammate.ReshareClan();
                                            }
                                            else
                                            {
                                                client.MessageBox("Please Equip Blade, Sword, Whip, Hook, Axe, Hammer, Club, Dagger or Scepter In Right Hand!");
                                                return;
                                            }
                                        }
                                        else
                                        {
                                            client.Send(Constants.FullInventory);
                                            return;
                                        }
                                        client.Inventory.Remove(client.ActiveNpc, 1);
                                    }
                                }
                            }
                            #region Activieness
                            #region [Champion]ActivePack
                            if (client.ActiveNpc == 3005062)
                            {
                                if (client.Inventory.Contains(3005062, 1))
                                {
                                    if (req.OptionID == 1 || req.OptionID == 11 || req.OptionID == 2)
                                    {
                                        if (client.Inventory.Count <= 39)
                                        {
                                            if (req.OptionID == 2)
                                            {
                                                Npcs dialog1 = new Npcs(client);
                                                dialog1.Text("Are you sure want to open the pack without using The Magic Lucky Ticket?");
                                                dialog1.Option("Yes.", 11);
                                                dialog1.Option("No.", 255);
                                                dialog1.Send();
                                            }
                                            if (req.OptionID == 11)
                                            {
                                                System.Random r = new System.Random();
                                                int i = r.Next(100);
                                                if (i > 0 && i <= 10)
                                                {
                                                    client.Entity.Money += 500000;//500,000 Silver
                                                    client.MessageBox("You received 500,000 Silver!", null);
                                                }
                                                if (i > 10 && i <= 20)
                                                {
                                                    client.ChiPoints += 50;//50 ChiPoint
                                                    client.MessageBox("You received 50 Chi Points!", null);
                                                }
                                                if (i > 20 && i <= 30)
                                                {
                                                    client.RacePoints += 200;//200 RacePoints
                                                    client.MessageBox("You received 200 Horse Racing Points!", null);
                                                }
                                                if (i > 30 && i <= 40)
                                                {
                                                    client.Entity.BoundCps += 20;//20 BoundCps
                                                    client.MessageBox("You received 20 BoundCPs (B)!", null);
                                                }
                                                if (i > 40 && i <= 50)
                                                {
                                                    client.Inventory.Add(1088001, 0, 5);//5 Meteor
                                                    client.MessageBox("You received a 5 Meteor !", null);
                                                }
                                                if (i > 50 && i <= 60)
                                                {
                                                    client.Entity.SubClasses.StudyPoints += 200;//200 Point SubClass
                                                    client.MessageBox("You received 200 Study Points!", null);
                                                }
                                                if (i > 60 && i <= 70)
                                                {
                                                    client.AddBless(2 * 24 * 60 * 60);
                                                    client.MessageBox("You received 2 Days Heaven Blessing !", null);
                                                }
                                                if (i > 70 && i <= 80)
                                                {
                                                    client.Inventory.AddBound(3003124, 0, 1); //FavoredTrainingPill(B)
                                                    client.MessageBox("You received a Favored Training Pill (B)!", null);
                                                }
                                                if (i > 90 && i <= 100)
                                                {
                                                    client.Inventory.Add(1088000, 0, 1);//DragonBall
                                                    client.MessageBox("You received a Dragon Ball!", null);
                                                }
                                                client.Inventory.Remove(3005062, 1);
                                            }
                                            if (req.OptionID == 1)
                                            {
                                                if (client.Inventory.Contains(3005063, 1) && client.Inventory.Contains(3005062, 1))
                                                {
                                                    System.Random r = new System.Random();
                                                    int i = r.Next(100);
                                                    var space = client.Inventory.Objects.Where(item => item == null).Count();
                                                    var a = new uint[] { 2, 4, 8, 16, 32, 64, 128 }[new Random().Next(1, 7)];
                                                    var result = (byte)Math.Min(space, a);
                                                    if (i > 0 && i <= 10)
                                                    {
                                                        client.Entity.Money += 1000000 * a;//1,0000,000 Silve
                                                        client.Send(new Message("" + client.Entity.Name + " is so lucky to multiply the reward in the active pack by " + a + " times, and received " + 1000000 * a + " Silver!", System.Drawing.Color.Red, Message.System));
                                                    }
                                                    if (i > 10 && i <= 20)
                                                    {
                                                        client.ChiPoints += (uint)(50 * a);//50 ChiPoint
                                                        client.Send(new Message("" + client.Entity.Name + " is so lucky to multiply the reward in the active pack by " + a + " times, and received " + 50 * a + " ChiPoints!", System.Drawing.Color.Red, Message.System));
                                                    }
                                                    if (i > 20 && i <= 30)
                                                    {
                                                        client.RacePoints += (uint)(200 * a);//200 RacePoints
                                                        client.Send(new Message("" + client.Entity.Name + " is so lucky to multiply the reward in the active pack by " + a + " times, and received " + 200 * a + " RacePoints!", System.Drawing.Color.Red, Message.System));
                                                    }
                                                    if (i > 30 && i <= 40)
                                                    {
                                                        client.Entity.BoundCps += (uint)(20 * a);
                                                        client.Send(new Message("" + client.Entity.Name + " is so lucky to multiply the reward in the active pack by " + a + " times, and received " + 20 * a + " ConquerPoints (B)!", System.Drawing.Color.Red, Message.System));
                                                    }
                                                    if (i > 40 && i <= 50)
                                                    {
                                                        client.Inventory.Add(720027, 0, (ushort)a);
                                                        client.Send(new Message("" + client.Entity.Name + " is so lucky to multiply the reward in the active pack by " + a + " times, and received " + 1 * a + " MeteorScrolls!", System.Drawing.Color.Red, Message.System));
                                                    }
                                                    if (i > 50 && i <= 60)
                                                    {
                                                        client.Entity.SubClasses.StudyPoints += (byte)(100 * a);//100 Point SubClass
                                                        client.Send(new Message("" + client.Entity.Name + " is so lucky to multiply the reward in the active pack by " + a + " times, and received " + 100 * a + " Study Points!", System.Drawing.Color.Red, Message.System));
                                                    }
                                                    if (i > 60 && i <= 70)
                                                    {
                                                        client.Entity.HeavenBlessing += (uint)(1 * a * 24 * 60 * 60);//2 Heaven Blessing
                                                        client.Send(new Message("" + client.Entity.Name + " is so lucky to multiply the reward in the active pack by " + a + " times, and received " + a + " Heaven Blessing Days!", System.Drawing.Color.Red, Message.System));
                                                    }
                                                    if (i > 70 && i <= 80)
                                                    {
                                                        client.Inventory.AddBound(3003124, 0, (byte)a); //FavoredTrainingPill(B)
                                                        client.Send(new Message("" + client.Entity.Name + " is so lucky to multiply the reward in the active pack by " + a + " times, and received " + a + " FavoredTrainingPill(B)!", System.Drawing.Color.Red, Message.System));
                                                    }
                                                    if (i > 90 && i <= 100)
                                                    {
                                                        client.Inventory.AddBound(3003124, 0, 1); //FavoredTrainingPill(B)
                                                        client.Send(new Message("" + client.Entity.Name + " is so lucky to multiply the reward in the active pack by " + a + " times, and received " + 2 * a + " FavoredTrainingPill(B)!", System.Drawing.Color.Red, Message.System));
                                                    }
                                                    client.Inventory.Remove(3005062, 1);
                                                    client.Inventory.Remove(3005063, 1);//MagicLuckyTicket
                                                }
                                                else
                                                {
                                                    client.MessageBox("You do not have The Magic Lucky Ticket.", null);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            client.Send(Constants.FullInventory);
                                        }
                                    }
                                }
                                return;
                            }
                            #endregion
                            #region DivineActivePack
                            if (client.ActiveNpc == 3005065)
                            {
                                if (client.Inventory.Contains(3005065, 1))
                                {
                                    if (req.OptionID == 1 || req.OptionID == 2 || req.OptionID == 5)
                                    {
                                        if (req.OptionID == 2)
                                        {
                                            Npcs dialog1 = new Npcs(client);
                                            dialog1.Text("Are you sure you want to use the Magic Lucky Ticket? if lucky enough, you i`ll");
                                            dialog1.Text("multiply the reward in the active pack by 2 - 128 times.");
                                            dialog1.Option("Yes.", 5);
                                            dialog1.Option("No.", 255);
                                            dialog1.Send();
                                        }
                                        if (req.OptionID == 5)
                                        {
                                            if (client.Inventory.Contains(3005065, 1))
                                            {
                                                {
                                                    client.Inventory.Add(3005063, 0, 1);
                                                    client.Inventory.Remove(3005065, 1);
                                                    client.MessageBox("You received 1 Magic Lucky Ticket.", null);
                                                }
                                            }

                                        }
                                        if (req.OptionID == 1)
                                        {
                                            if (client.Inventory.Contains(3005065, 1))
                                            {
                                                client.Inventory.Add(3005062, 0, 1);
                                                client.Inventory.Remove(3005065, 1);
                                                client.MessageBox("You received a [Champion] Active Pack.", null);
                                            }
                                        }
                                    }
                                }
                                return;
                            }
                            #endregion
                            #endregion
                            #region Lab
                            if (client.ActiveNpc == 721533)
                            {

                                if (req.OptionID == 1)
                                {
                                    if (client.Inventory.Contains(client.ActiveNpc, 17))
                                    {
                                        if (client.Quests.HasQuest(QuestID.EvilLabyrinth))
                                        {
                                            client.Quests.IncreaseQuestDones((QuestID)6467, 1, 0, 0, 0);
                                        }
                                        client.Inventory.Remove(721533, 17);
                                        client.Inventory.Add(3007530, 0, 1);
                                    }
                                }
                                if (req.OptionID == 2)
                                {
                                    if (client.Inventory.Contains(client.ActiveNpc, 3))
                                    {
                                        client.Inventory.Remove(721533, 3);
                                        client.Inventory.Add(721534, 0, 1);
                                    }

                                }
                            }
                            if (client.ActiveNpc == 721535)
                            {

                                if (req.OptionID == 1)
                                {
                                    if (client.Inventory.Contains(client.ActiveNpc, 17))
                                    {
                                        if (client.Quests.HasQuest(QuestID.EvilLabyrinth))
                                        {
                                            client.Quests.IncreaseQuestDones((QuestID)6467, 1, 1, 1, 0);
                                        }
                                        client.Inventory.Remove(721535, 17);
                                        client.Inventory.Add(3007532, 0, 1);
                                    }
                                }
                                if (req.OptionID == 2)
                                {
                                    if (client.Inventory.Contains(client.ActiveNpc, 3))
                                    {
                                        client.Inventory.Remove(721535, 3);
                                        client.Inventory.Add(721536, 0, 1);
                                    }

                                }
                            }
                            if (client.ActiveNpc == 721536)
                            {

                                if (req.OptionID == 1)
                                {
                                    if (client.Inventory.Contains(client.ActiveNpc, 17))
                                    {
                                        if (client.Quests.HasQuest(QuestID.EvilLabyrinth))
                                        {
                                            client.Quests.IncreaseQuestDones((QuestID)6467, 1, 1, 1, 1);
                                        }
                                        client.Inventory.Remove(721536, 17);
                                        client.Inventory.Add(3007533, 0, 1);
                                    }
                                }
                                if (req.OptionID == 2)
                                {
                                    if (client.Inventory.Contains(client.ActiveNpc, 3))
                                    {
                                        client.Inventory.Remove(721536, 3);
                                        client.Inventory.Add(722880, 0, 1);//LabyrinthPermit
                                    }

                                }
                            }
                            if (client.ActiveNpc == 721534)
                            {

                                if (req.OptionID == 1)
                                {
                                    if (client.Inventory.Contains(client.ActiveNpc, 17))
                                    {
                                        if (client.Quests.HasQuest(QuestID.EvilLabyrinth))
                                        {
                                            client.Quests.IncreaseQuestDones((QuestID)6467, 1, 1, 0, 0);
                                        }
                                        client.Inventory.Remove(721534, 17);
                                        client.Inventory.Add(3007531, 0, 1);
                                    }
                                }
                                if (req.OptionID == 2)
                                {
                                    if (client.Inventory.Contains(client.ActiveNpc, 3))
                                    {
                                        client.Inventory.Remove(721534, 3);
                                        client.Inventory.Add(721535, 0, 1);
                                    }

                                }
                            }
                            if (client.ActiveNpc == 3007528)
                            {
                                if (client.Inventory.Contains(3007528, 1))
                                {
                                    if (req.OptionID == 1)
                                    {
                                        client.Inventory.Remove(3007528, 1);
                                        if (client.Entity.MapID == 1351)
                                        {
                                            client.Entity.Teleport(1351, 482, 373);
                                        }
                                        if (client.Entity.MapID == 1352)
                                        {
                                            client.Entity.Teleport(1352, 669, 471);
                                        }
                                        if (client.Entity.MapID == 1353)
                                        {
                                            client.Entity.Teleport(1353, 787, 548);
                                        }
                                        if (client.Entity.MapID == 1354)
                                        {
                                            client.Entity.Teleport(1354, 900, 680);
                                        }
                                        client.MessageBox("The Guiding Bee has taken you to see the teleporting general of this floor.");
                                    }
                                }
                                if (req.OptionID == 2)
                                {
                                    if (client.Inventory.Contains(client.ActiveNpc, 1))
                                    {
                                        if (client.Entity.MapID == 1352)
                                        {
                                            if (client.Inventory.Contains(3007507))
                                            {
                                                client.Inventory.Remove(3007528, 1);
                                                client.Entity.Teleport(1352, 161, 169);
                                            }
                                            if (client.Inventory.Contains(3007508))
                                            {
                                                client.Inventory.Remove(3007528, 1);
                                                client.Entity.Teleport(1352, 314, 330);
                                            }
                                            if (client.Inventory.Contains(3007509))
                                            {
                                                client.Inventory.Remove(3007528, 1);
                                                client.Entity.Teleport(1352, 507, 506);
                                            }
                                            if (client.Inventory.Contains(3007510))
                                            {
                                                client.Inventory.Remove(3007528, 1);
                                                client.Entity.Teleport(1352, 486, 290);
                                            }
                                            if (client.Inventory.Contains(3007511))
                                            {
                                                client.Inventory.Remove(3007528, 1);
                                                client.Entity.Teleport(1352, 429, 588);
                                            }
                                        }
                                        if (client.Entity.MapID == 1353)
                                        {
                                            if (client.Inventory.Contains(3007512))
                                            {
                                                client.Inventory.Remove(3007528, 1);
                                                client.Entity.Teleport(1353, 166, 200);
                                            }
                                            if (client.Inventory.Contains(3007513))
                                            {
                                                client.Inventory.Remove(3007528, 1);
                                                client.Entity.Teleport(1353, 265, 103);
                                            }
                                            if (client.Inventory.Contains(3007514))
                                            {
                                                client.Inventory.Remove(3007528, 1);
                                                client.Entity.Teleport(1353, 321, 238);
                                            }
                                            if (client.Inventory.Contains(3007515))
                                            {
                                                client.Inventory.Remove(3007528, 1);
                                                client.Entity.Teleport(1353, 199, 423);
                                            }
                                            if (client.Inventory.Contains(3007516))
                                            {
                                                client.Inventory.Remove(3007528, 1);
                                                client.Entity.Teleport(1353, 660, 442);
                                            }
                                            if (client.Inventory.Contains(3007517))
                                            {
                                                client.Inventory.Remove(3007528, 1);
                                                client.Entity.Teleport(1353, 539, 645);
                                            }
                                            if (client.Inventory.Contains(3007518))
                                            {
                                                client.Inventory.Remove(3007528, 1);
                                                client.Entity.Teleport(1353, 478, 708);
                                            }
                                        }
                                        if (client.Entity.MapID == 1354)
                                        {
                                            if (client.Inventory.Contains(3007519))
                                            {
                                                client.Inventory.Remove(3007528, 1);
                                                client.Entity.Teleport(1354, 314, 39);
                                            }
                                            if (client.Inventory.Contains(3007520))
                                            {
                                                client.Inventory.Remove(3007528, 1);
                                                client.Entity.Teleport(1354, 199, 463);
                                            }
                                            if (client.Inventory.Contains(3007521))
                                            {
                                                client.Inventory.Remove(3007528, 1);
                                                client.Entity.Teleport(1354, 259, 531);
                                            }
                                            if (client.Inventory.Contains(3007522))
                                            {
                                                client.Inventory.Remove(3007528, 1);
                                                client.Entity.Teleport(1354, 424, 654);
                                            }
                                            if (client.Inventory.Contains(3007523))
                                            {
                                                client.Inventory.Remove(3007528, 1);
                                                client.Entity.Teleport(1354, 573, 458);
                                            }
                                            if (client.Inventory.Contains(3007524))
                                            {
                                                client.Inventory.Remove(3007528, 1);
                                                client.Entity.Teleport(1354, 529, 263);
                                            }
                                            if (client.Inventory.Contains(3007525))
                                            {
                                                client.Inventory.Remove(3007528, 1);
                                                client.Entity.Teleport(1354, 702, 660);
                                            }
                                            if (client.Inventory.Contains(3007526))
                                            {
                                                client.Inventory.Remove(3007528, 1);
                                                client.Entity.Teleport(1354, 599, 827);
                                            }
                                            if (client.Inventory.Contains(3007527))
                                            {
                                                client.Inventory.Remove(3007528, 1);
                                                client.Entity.Teleport(1354, 858, 588);
                                            }
                                        }
                                        if (client.Entity.MapID == 1351)
                                        {
                                            if (client.Inventory.Contains(3007504))
                                            {
                                                client.Inventory.Remove(3007528, 1);
                                                client.Entity.Teleport(1351, 203, 210);
                                            }
                                            if (client.Inventory.Contains(3007505))
                                            {
                                                client.Inventory.Remove(3007528, 1);
                                                client.Entity.Teleport(1351, 224, 175);
                                            }
                                            if (client.Inventory.Contains(3007506))
                                            {
                                                client.Inventory.Remove(3007528, 1);
                                                client.Entity.Teleport(1351, 380, 273);
                                            }
                                        }
                                    }

                                }
                            }
                            if (client.ActiveNpc == 3007995)
                            {
                                if (client.Inventory.Contains(3007995, 2))
                                {
                                    if (req.OptionID == 1)
                                    {
                                        client.Inventory.Remove(3007995, 1);
                                        client.ChiPoints += 200;
                                        client.MessageBox("You have got 200 ChiPoints");
                                    }
                                }
                                if (req.OptionID == 1)
                                {
                                    if (client.Inventory.Contains(client.ActiveNpc, 1))
                                    {

                                        if (client.Inventory.Contains(3007995))
                                        {
                                            client.Inventory.Remove(3007995, 1);
                                            client.Entity.Teleport(1002, 260, 232);
                                        }

                                    }

                                }

                            }
                            #endregion
                            if (client.ActiveNpc == 3004249)
                            {
                                if (client.Inventory.Contains(client.ActiveNpc, 1))
                                {
                                    if (req.OptionID >= 1 && req.OptionID <= 28)
                                    {
                                        uint IDs = 3004136;
                                        if (req.OptionID == 2) IDs = 3004139;
                                        else if (req.OptionID == 3) IDs = 3004142;
                                        else if (req.OptionID == 4) IDs = 3004144;
                                        else if (req.OptionID == 5) IDs = 3004146;
                                        else if (req.OptionID == 6) IDs = 3004149;
                                        else if (req.OptionID == 7) IDs = 3004154;
                                        else if (req.OptionID == 8) IDs = 3004155;
                                        else if (req.OptionID == 9) IDs = 3004157;
                                        else if (req.OptionID == 10) IDs = 3004158;
                                        else if (req.OptionID == 11) IDs = 3004160;
                                        else if (req.OptionID == 12) IDs = 3004163;
                                        else if (req.OptionID == 13) IDs = 3004164;
                                        else if (req.OptionID == 14) IDs = 3004281;
                                        else if (req.OptionID == 15) IDs = 3004282;
                                        else if (req.OptionID == 16) IDs = 3004283;
                                        else if (req.OptionID == 17) IDs = 3004284;
                                        else if (req.OptionID == 18) IDs = 3004285;
                                        else if (req.OptionID == 19) IDs = 3004286;
                                        else if (req.OptionID == 20) IDs = 3004287;
                                        else if (req.OptionID == 21) IDs = 3004288;
                                        else if (req.OptionID == 22) IDs = 3004289;
                                        else if (req.OptionID == 23) IDs = 3004290;
                                        else if (req.OptionID == 24) IDs = 3004291;
                                        else if (req.OptionID == 25) IDs = 3004292;
                                        else if (req.OptionID == 26) IDs = 3004293;
                                        else if (req.OptionID == 27) IDs = 3004294;
                                        else if (req.OptionID == 28) IDs = 3004295;  
                                        else if (req.OptionID == 29) IDs = 3004140;
                                        ConquerItem _item = new ConquerItem(true);
                                        _item.ID = IDs;
                                        _item.Durability = _item.MaximDurability = Database.ConquerItemInformation.BaseInformations[IDs].Durability;
                                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                                        client.Inventory.Remove(client.ActiveNpc, 1);
                                    }
                                }
                                return;
                            }
                            if (client.ActiveNpc == 3004247)
                            {
                                if (client.Inventory.Contains(client.ActiveNpc, 1))
                                {
                                    if (req.OptionID >= 1 && req.OptionID <= 16)
                                    {
                                        uint IDs = 800020;
                                        if (req.OptionID == 2) IDs = 800111;
                                        else if (req.OptionID == 3) IDs = 800215;
                                        else if (req.OptionID == 4) IDs = 800422;
                                        else if (req.OptionID == 5) IDs = 800917;
                                        else if (req.OptionID == 6) IDs = 800618;
                                        else if (req.OptionID == 7) IDs = 800142;
                                        else if (req.OptionID == 8) IDs = 800255;
                                        else if (req.OptionID == 9) IDs = 800725;
                                        else if (req.OptionID == 10) IDs = 800810;
                                        else if (req.OptionID == 11) IDs = 800811;
                                        else if (req.OptionID == 12) IDs = 800522;
                                        else if (req.OptionID == 13) IDs = 801004;
                                        else if (req.OptionID == 14) IDs = 801104;
                                        else if (req.OptionID == 15) IDs = 801216;
                                        else if (req.OptionID == 16) IDs = 801218;
                                        ConquerItem _item = new ConquerItem(true);
                                        _item.ID = IDs;
                                        _item.Durability = _item.MaximDurability = Database.ConquerItemInformation.BaseInformations[IDs].Durability;
                                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                                        client.Inventory.Remove(client.ActiveNpc, 1);
                                    }
                                }
                                return;
                            }
                            if (client.ActiveNpc == 3004248)
                            {
                                if (client.Inventory.Contains(client.ActiveNpc, 1))
                                {
                                    if (req.OptionID >= 1 && req.OptionID <= 16)
                                    {
                                        uint IDs = 823058;
                                        if (req.OptionID == 2) IDs = 824018;
                                        else if (req.OptionID == 3) IDs = 822071;
                                        else if (req.OptionID == 4) IDs = 821033;
                                        else if (req.OptionID == 5) IDs = 820073;
                                        else if (req.OptionID == 6) IDs = 821034;
                                        else if (req.OptionID == 7) IDs = 823060;
                                        else if (req.OptionID == 8) IDs = 822072;
                                        else if (req.OptionID == 9) IDs = 824020;
                                        else if (req.OptionID == 10) IDs = 820076;
                                        else if (req.OptionID == 11) IDs = 820074;
                                        else if (req.OptionID == 12) IDs = 820075;
                                        else if (req.OptionID == 13) IDs = 824019;
                                        else if (req.OptionID == 14) IDs = 823059;
                                        else if (req.OptionID == 15) IDs = 823061;
                                        else if (req.OptionID == 16) IDs = 823062;
                                        ConquerItem _item = new ConquerItem(true);
                                        _item.ID = IDs;
                                        _item.Durability = _item.MaximDurability = Database.ConquerItemInformation.BaseInformations[IDs].Durability;
                                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                                        client.Inventory.Remove(client.ActiveNpc, 1);
                                    }
                                }
                                return;
                            }
                            if (client.ActiveNpc >= 728525 && client.ActiveNpc <= 728527)
                            {
                                if (client.Inventory.Contains(client.ActiveNpc, 1))
                                {
                                    if (req.OptionID >= 1 && req.OptionID <= 3)
                                    {
                                        uint color = 255 | 150 << 16;
                                        if (req.OptionID == 2)
                                            color = 150 << 8 | 255 << 16;
                                        else if (req.OptionID == 3)
                                            color = 150 | 255 << 8;
                                        byte plus = 1;
                                        if (client.ActiveNpc % 10 == 6) plus = 3;
                                        else if (client.ActiveNpc % 10 == 7) plus = 6;
                                        client.Inventory.Remove(client.ActiveNpc, 1);
                                        ConquerItem _item = new ConquerItem(true);
                                        _item.ID = 300000;
                                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                                        _item.Plus = plus;
                                        _item.Effect = Game.Enums.ItemEffect.Horse;
                                        _item.SocketProgress = color;
                                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                                    }
                                }
                                return;
                            }
                            if (client.ActiveNpc == 3007283)
                            {
                                if (client.Inventory.Contains(client.ActiveNpc, 1))
                                {
                                    if (req.OptionID >= 1 && req.OptionID <= 3)
                                    {
                                        uint color = 255 | 150 << 16;
                                        if (req.OptionID == 2)
                                            color = 150 << 8 | 255 << 16;
                                        else if (req.OptionID == 3)
                                            color = 150 | 255 << 8;
                                        byte plus = 3;
                                        client.Inventory.Remove(client.ActiveNpc, 1);
                                        ConquerItem _item = new ConquerItem(true);
                                        _item.ID = 300000;
                                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                                        _item.Plus = plus;
                                        _item.Effect = Game.Enums.ItemEffect.Horse;
                                        _item.SocketProgress = color;
                                        _item.Bound = true;
                                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                                    }
                                }
                                return;
                            }
                            if (client.ActiveNpc == 3007287)
                            {
                                if (client.Inventory.Contains(client.ActiveNpc, 1))
                                {
                                    if (req.OptionID >= 1 && req.OptionID <= 3)
                                    {
                                        uint color = 255 | 150 << 16;
                                        if (req.OptionID == 2)
                                            color = 150 << 8 | 255 << 16;
                                        else if (req.OptionID == 3)
                                            color = 150 | 255 << 8;
                                        byte plus = 1;
                                        client.Inventory.Remove(client.ActiveNpc, 1);
                                        ConquerItem _item = new ConquerItem(true);
                                        _item.ID = 300000;
                                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                                        _item.Plus = plus;
                                        _item.Effect = Game.Enums.ItemEffect.Horse;
                                        _item.SocketProgress = color;
                                        _item.Bound = true;
                                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                                    }
                                }
                                return;
                            }
                            if (client.ActiveNpc >= 729611 && client.ActiveNpc <= 729614 || client.ActiveNpc == 729703)
                            {
                                if (req.OptionID == 1)
                                {
                                    if (client.Entity.ConquerPoints >= 5)
                                    {
                                        if (client.Entity.SpiritBeadsType == 0)
                                        {
                                            client.IncreaseExperience(client.ExpBall * 2, false);
                                            client.AddBless(7 * 60 * 60);
                                            client.Entity.SubClasses.StudyPoints += 30;
                                            client.Inventory.Add(729304, 0, 1);
                                        }
                                        if (!client.Quests.HasQuest(QuestID.Spirit_Beads))
                                        {
                                            client.Quests.Accept(QuestID.Spirit_Beads);
                                        }
                                        client.Quests.FinishQuest(QuestID.Spirit_Beads);
                                        if (client.Entity.SpiritBeadsType == 1)
                                        {
                                            client.IncreaseExperience(client.ExpBall * 3, false);
                                            client.AddBless(10 * 60 * 60);
                                            client.Entity.SubClasses.StudyPoints += 40;
                                            client.Inventory.Add(729304, 0, 1);
                                        }
                                        if (client.Entity.SpiritBeadsType == 2)
                                        {
                                            client.IncreaseExperience(client.ExpBall * 4, false);
                                            client.AddBless(15 * 60 * 60);
                                            client.Entity.SubClasses.StudyPoints += 50;
                                            client.Inventory.Add(729304, 0, 1);
                                        }
                                        if (client.Entity.SpiritBeadsType == 3)
                                        {
                                            client.IncreaseExperience(client.ExpBall * 5, false);
                                            client.AddBless(24 * 60 * 60);
                                            client.Entity.SubClasses.StudyPoints += 80;
                                            client.Inventory.Add(729304, 0, 1);
                                        }
                                        if (client.Entity.SpiritBeadsType == 4)
                                        {
                                            client.IncreaseExperience(client.ExpBall * 6, false);
                                            client.AddBless(48 * 60 * 60);
                                            client.Entity.SubClasses.StudyPoints += 100;
                                            client.Inventory.Add(729304, 0, 1);
                                        }
                                        _String str = new _String(true);
                                        str.UID = client.Entity.UID;
                                        str.TextsCount = 1;
                                        str.Type = _String.Effect;
                                        str.Texts.Add("end_task");
                                        client.SendScreen(str, true);
                                        client.Inventory.Remove(client.ActiveNpc, 1);
                                        client.Entity.ConquerPoints -= 5;
                                    }
                                    else
                                    {
                                        client.MessageBox("You Don't Have 5 CPS!");
                                    }
                                }
                                if (req.OptionID == 2)
                                {
                                    if (client.Entity.SpiritBeadsType == 0)
                                    {
                                        client.IncreaseExperience(client.ExpBall * 2, false);
                                        client.AddBless(7 * 60 * 60);
                                        client.Entity.SubClasses.StudyPoints += 30;
                                        client.Inventory.Add(729304, 0, 1);
                                    }
                                    if (!client.Quests.HasQuest(QuestID.Spirit_Beads))
                                    {
                                        client.Quests.Accept(QuestID.Spirit_Beads);
                                    }
                                    client.Quests.FinishQuest(QuestID.Spirit_Beads);
                                    if (client.Entity.SpiritBeadsType == 1)
                                    {
                                        client.IncreaseExperience(client.ExpBall * 3, false);
                                        client.AddBless(10 * 60 * 60);
                                        client.Entity.SubClasses.StudyPoints += 40;
                                        client.Inventory.Add(729304, 0, 1);
                                    }
                                    if (client.Entity.SpiritBeadsType == 2)
                                    {
                                        client.IncreaseExperience(client.ExpBall * 4, false);
                                        client.AddBless(15 * 60 * 60);
                                        client.Entity.SubClasses.StudyPoints += 50;
                                        client.Inventory.Add(729304, 0, 1);
                                    }
                                    if (client.Entity.SpiritBeadsType == 3)
                                    {
                                        client.IncreaseExperience(client.ExpBall * 5, false);
                                        client.AddBless(24 * 60 * 60);
                                        client.Entity.SubClasses.StudyPoints += 80;
                                        client.Inventory.Add(729304, 0, 1);
                                    }
                                    if (client.Entity.SpiritBeadsType == 4)
                                    {
                                        client.IncreaseExperience(client.ExpBall * 6, false);
                                        client.AddBless(48 * 60 * 60);
                                        client.Entity.SubClasses.StudyPoints += 100;
                                        client.Inventory.Add(729304, 0, 1);
                                    }
                                    _String str = new _String(true);
                                    str.UID = client.Entity.UID;
                                    str.TextsCount = 1;
                                    str.Type = _String.Effect;
                                    str.Texts.Add("end_task");
                                    client.SendScreen(str, true);
                                    client.Inventory.Remove(client.ActiveNpc, 1);
                                }
                            }
                            if (client.Map.Npcs.TryGetValue(client.ActiveNpc, out npc))
                            {
                                if (Kernel.GetDistance(client.Entity.X, client.Entity.Y, npc.X, npc.Y) > 16)
                                    return;
                                if (req.OptionID == 255 || (req.OptionID == 0 && ID == 2032))
                                    return;
                                if (client.Entity.Dead)
                                    return;

                                req.NpcID = client.ActiveNpc;
                                Npcs.GetDialog(req, client);

                            }

                        }
                        break;
                    }
                #endregion
                #region Compose (2036)
                case 2036:
                    {
                        Compose compose = new Compose(false);
                        compose.Deserialize(packet);
                        ComposePlus(compose, client);
                        break;
                    }
                #endregion
                #region Offline TG (2044)
                case 2044:
                    {
                        OfflineTGRequest otgr = new OfflineTGRequest(false);
                        otgr.Deserialize(packet);
                        switch (otgr.ID)
                        {
                            case OfflineTGRequest.OnTrainingTimeRequested:
                                {
                                    otgr.Minutes = 900;
                                    client.Send(otgr);
                                    break;
                                }
                            case OfflineTGRequest.OnConfirmation:
                                {
                                    if (client.Map.BaseID == 6001 || client.Map.BaseID == 6000 || client.Map.BaseID == 1038
                                        || client.Map.BaseID == 2072 || client.Map.BaseID == 2073 || client.Map.BaseID == 2074 || client.Map.BaseID == 2075)
                                        return;
                                    client.Entity.PreviousMapID = client.Entity.MapID;
                                    client.Entity.PrevX = client.Entity.X;
                                    client.Entity.PrevY = client.Entity.Y;
                                    client.Entity.MapID = 601;
                                    client.Entity.X = 64;
                                    client.Entity.Y = 56;
                                    client.OfflineTGEnterTime = DateTime.Now;

                                    client.Disconnect();
                                    break;
                                }
                            case OfflineTGRequest.ClaimExperience:
                                {
                                    var T1 = new TimeSpan(DateTime.Now.Ticks);
                                    var T2 = new TimeSpan(client.OfflineTGEnterTime.Ticks);
                                    ushort minutes = (ushort)(T1.TotalMinutes - T2.TotalMinutes);
                                    minutes = (ushort)Math.Min((ushort)900, minutes);
                                    double expballGain = (double)300 * (double)minutes / (double)900;
                                    while (expballGain >= 100)
                                    {
                                        expballGain -= 100;
                                        client.IncreaseExperience(client.ExpBall, false);
                                    }
                                    if (expballGain != 0)
                                        client.IncreaseExperience((uint)(client.ExpBall * (expballGain / 100)), false);

                                    client.Entity.SetLocation(client.Entity.PreviousMapID, client.Entity.PrevX, client.Entity.PrevY);
                                    if (client.Map.ID == 1036 || client.Map.ID == 1039
                                        || client.Map.ID == 8877 || client.Map.ID == 1735
                                        || client.Map.ID == 1734 || client.Map.ID == 1733
                                        || client.Map.ID == 1732 || client.Map.ID == 1731
                                        || client.Map.ID == 1730 || client.Map.ID == 1766
                                        || client.Map.ID == 3842 || client.Map.ID == 3820
                                        || client.Map.ID == 8839 || client.Map.ID == 1826
                                        || client.Map.ID == 3844 || client.Map.ID == 3845
                                        || client.Map.ID == 3055 || client.Map.ID == 38200
                                        || client.Entity.MapID == 4573 || client.Entity.MapID == 4574 || client.Entity.MapID == 4575 || client.Entity.MapID == 4576 || client.Entity.MapID == 4577 || client.Entity.MapID == 4578)
                                        client.Entity.Teleport(1002, 310, 230);
                                    else
                                    {
                                        switch (client.Map.ID)
                                        {
                                            default:
                                                {
                                                    client.Entity.Teleport(1002, 300, 278);
                                                    break;
                                                }
                                            case 1000:
                                                {
                                                    client.Entity.Teleport(1000, 500, 650);
                                                    break;
                                                }
                                            case 1020:
                                                {
                                                    client.Entity.Teleport(1020, 565, 562);
                                                    break;
                                                }
                                            case 1011:
                                                {
                                                    client.Entity.Teleport(1011, 188, 264);
                                                    break;
                                                }
                                            case 1015:
                                                {
                                                    client.Entity.Teleport(1015, 717, 571);
                                                    break;
                                                }
                                        }
                                    }
                                    client.OfflineTGEnterTime = DateTime.Now;
                                    break;
                                }
                            default:
                                client.Send(otgr);
                                break;
                        }
                        break;
                    }
                #endregion
                #region Trade partner (2046)
                case 2046:
                    {
                        TradePartner partner = new TradePartner(false);
                        partner.Deserialize(packet);
                        switch (partner.Type)
                        {
                            case TradePartner.RequestPartnership:
                                RequestTradePartnership(partner, client);
                                break;
                            case TradePartner.RejectRequest:
                                RejectPartnership(partner, client);
                                break;
                            case TradePartner.BreakPartnership:
                                BreakPartnership(partner, client);
                                break;
                        }
                        break;
                    }
                #endregion
                #region Guild Arsenal (2202 + 2203)
                case 2202:
                    {
                        ArsenalView view = new ArsenalView(false, 0);
                        view.Deserialize(packet);
                        ViewArsenalPage(view, client);
                        break;
                    }
                case 2203:
                    {
                        ArsenalCommand command = new ArsenalCommand();
                        command.Deserialize(packet);
                        switch (command.Type)
                        {
                            case ArsenalCommand.Unlock:
                                UnlockArsenal(command, client);
                                break;
                            case ArsenalCommand.Inscribe:
                                InscribeArsenalItem(command, client);
                                break;
                            case ArsenalCommand.Uninscribe:
                                UninscribeArsenalItem(command, client);
                                break;
                            case ArsenalCommand.Enchant:
                                EnchantArsenal(command, client);
                                break;
                            case ArsenalCommand.View:
                                ViewGuildArsenal(client);
                                break;
                        }
                        break;
                    }
                case 2204:
                    {
                        byte count = packet[4];
                        List<uint> item_uids = new List<uint>();
                        int offset = 5;
                        for (int i = 0; i < count; i++)
                        {
                            item_uids.Add(BitConverter.ToUInt32(packet, offset));
                            offset += 4;
                        }
                        for (int i = 0; i < item_uids.Count; i++)
                        {
                            var UID = item_uids[i];
                            var item = Database.ConquerItemTable.LoadItem(UID);
                            if (item != null)
                            {
                                int arsenalRealPosition = ArsenalPosition(item.ID);
                                if ((item.ID % 10) >= 8 && !item.Inscribed)
                                {
                                    if (client.Entity.GuildID != 0 && client.Guild != null &&
                                        client.Guild.Arsenals[arsenalRealPosition].Unlocked)
                                    {
                                        item.Inscribed = true;
                                        item.Mode = Game.Enums.ItemMode.Update;
                                        item.Send(client);
                                        var Arsenal = client.Guild.Arsenals[arsenalRealPosition];
                                        Arsenal.AddItem(item, client);
                                        client.Guild.SaveArsenal();
                                    }
                                }
                            }
                        }

                        break;
                    }
                #endregion
                #region ItemLock (2048)
                case 2048:
                    {
                        if (client.Action != 2)
                            return;
                        ItemLock itemlock = new ItemLock(false);
                        itemlock.Deserialize(packet);
                        switch (itemlock.ID)
                        {
                            case ItemLock.RequestLock:
                                LockItem(itemlock, client);
                                break;
                            case ItemLock.RequestUnlock:
                                UnlockItem5Days(itemlock, client);
                                break;
                        }
                        break;
                    }
                #endregion
                #region Broadcast (2050)
                case 2050:
                    {
                        Broadcast cast = new Broadcast(false);
                        cast.Deserialize(packet);
                        switch (cast.Type)
                        {
                            case Broadcast.ReleaseSoonMessages:
                                {
                                    BroadcastInfoAwaiting(cast, client);
                                    break;
                                }
                            case Broadcast.MyMessages:
                                {
                                    BroadcastClientMessages(cast, client);
                                    break;
                                }
                            case Broadcast.BroadcastMessage:
                                {
                                    if (Game.ConquerStructures.Broadcast.Broadcasts.Count == Constants.MaxBroadcasts)
                                    {
                                        client.Send(new Message("You cannot send any broadcasts for now. The limit has been reached. Wait until a broadcast is chopped down.", System.Drawing.Color.Red, Message.TopLeft));
                                        break;
                                    }
                                    DateTime Now = DateTime.Now;
                                    DateTime LastBC = client["lastbroadcast"];

                                    if (Now >= LastBC.AddMinutes(2))
                                    {
                                        if (client.Trade != null)
                                        {
                                            if (client.Trade.InTrade)
                                                break;
                                        }
                                        if (client.Entity.ConquerPoints >= 5)
                                        {
                                            client["lastbroadcast"] = Now;
                                            client.Entity.ConquerPoints -= 5;
                                            Game.ConquerStructures.Broadcast.BroadcastStr broadcast = new Game.ConquerStructures.Broadcast.BroadcastStr();
                                            broadcast.EntityID = client.Entity.UID;
                                            broadcast.EntityName = client.Entity.Name;
                                            broadcast.ID = Game.ConquerStructures.Broadcast.BroadcastCounter.Next;
                                            if (cast.List[0].Length > 80)
                                                cast.List[0] = cast.List[0].Remove(80);
                                            broadcast.Message = cast.List[0];
                                            if (Game.ConquerStructures.Broadcast.Broadcasts.Count == 0)
                                            {
                                                if (Game.ConquerStructures.Broadcast.CurrentBroadcast.EntityID == 1)
                                                {
                                                    Game.ConquerStructures.Broadcast.CurrentBroadcast = broadcast;
                                                    Game.ConquerStructures.Broadcast.LastBroadcast = DateTime.Now;
                                                    foreach (var client2 in Kernel.GamePool.Values)
                                                    {
                                                        client2.Send(new Message(cast.List[0], "ALLUSERS", client.Entity.Name, System.Drawing.Color.Red, Message.BroadcastMessage));

                                                    }
                                                    break;
                                                }
                                            }
                                            Game.ConquerStructures.Broadcast.Broadcasts.Add(broadcast);
                                            cast.dwParam = (uint)Game.ConquerStructures.Broadcast.Broadcasts.Count;
                                            client.Send(cast);
                                            break;
                                        }
                                    }
                                    break;
                                }
                            case Broadcast.Urgen5CPs:
                                {
                                    for (int c = 0; c < Game.ConquerStructures.Broadcast.Broadcasts.Count; c++)
                                    {
                                        var broadcast = Game.ConquerStructures.Broadcast.Broadcasts[c];
                                        if (broadcast.ID == cast.dwParam)
                                        {
                                            if (c != 0)
                                            {
                                                if (client.Trade != null)
                                                {
                                                    if (client.Trade.InTrade)
                                                        break;
                                                }
                                                if (client.Entity.ConquerPoints > 5)
                                                {
                                                    broadcast.SpentCPs += 5;
                                                    client.Entity.ConquerPoints -= 5;
                                                    if (Game.ConquerStructures.Broadcast.Broadcasts[c - 1].SpentCPs <= broadcast.SpentCPs)
                                                    {

                                                        Game.ConquerStructures.Broadcast.Broadcasts[c] = Game.ConquerStructures.Broadcast.Broadcasts[c - 1];
                                                        Game.ConquerStructures.Broadcast.Broadcasts[c - 1] = broadcast;
                                                    }
                                                    else
                                                    {
                                                        Game.ConquerStructures.Broadcast.Broadcasts[c] = broadcast;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    break;
                                }
                            case Broadcast.Urgen15CPs:
                                {
                                    for (int c = 0; c < Game.ConquerStructures.Broadcast.Broadcasts.Count; c++)
                                    {
                                        var broadcast = Game.ConquerStructures.Broadcast.Broadcasts[c];
                                        if (broadcast.ID == cast.dwParam)
                                        {
                                            if (c != 0)
                                            {
                                                if (client.Trade != null)
                                                {
                                                    if (client.Trade.InTrade)
                                                        break;
                                                }
                                                if (client.Entity.ConquerPoints > 15)
                                                {
                                                    broadcast.SpentCPs += 15;
                                                    client.Entity.ConquerPoints -= 15;
                                                    for (int b = c - 1; b > 0; b--)
                                                        Game.ConquerStructures.Broadcast.Broadcasts[b] = Game.ConquerStructures.Broadcast.Broadcasts[b - 1];

                                                    Game.ConquerStructures.Broadcast.Broadcasts[0] = broadcast;
                                                }
                                            }
                                        }
                                    }
                                    break;
                                }
                        }
                        break;
                    }
                #endregion
                #region Nobility (2064)
                case 2064:
                    {
                        NobilityInfo nobility = new NobilityInfo(false);
                        nobility.Deserialize(packet);
                        Game.ConquerStructures.Nobility.Handle(nobility, client);
                        break;
                    }
                #endregion
                #region Race potions (2072)
                case 2072:
                    {
                        RacePotion pot = new RacePotion(false);
                        pot.Deserialize(packet);
                        int i = pot.Location - 1;
                        if (i < 0 || i > 4)
                            return;
                        if (client.Potions[i] == null)
                            return;
                        var potion = client.Potions[i];
                        potion.Count--;

                        pot.PotionType = potion.Type;
                        pot.Amount = (ushort)potion.Count;
                        client.Send(pot);

                        client.ApplyRacePotion(potion.Type, pot.dwParam);

                        if (potion.Count == 0)
                            client.Potions[i] = null;
                        break;
                    }
                #endregion
                #region MemoryAgate
                case 2110:
                    {
                        uint ItemUID = BitConverter.ToUInt32(packet, 8);
                        switch (packet[4])
                        {
                            case 1:
                                {
                                    if (client.Map.IsDynamic()) return;
                                    ConquerItem Item = null;
                                    if (client.Inventory.TryGetItem(ItemUID, out Item))
                                    {
                                        if (Item.Agate_map.ContainsKey(packet[12]))
                                        {
                                            Item.Agate_map[(uint)packet[12]] = client.Entity.MapID + "~" + client.Entity.X + "~" + client.Entity.Y;
                                            Database.ConquerItemTable.UpdateItemAgate(Item);
                                            Item.SendAgate(client);
                                            break;
                                        }
                                        if (packet[12] > Item.Agate_map.Count)
                                        {
                                            Item.Agate_map.Add((byte)(Item.Agate_map.Count), client.Entity.MapID + "~" + client.Entity.X + "~" + client.Entity.Y);
                                            Database.ConquerItemTable.UpdateItemAgate(Item);
                                            Item.SendAgate(client);
                                            break;
                                        }
                                        else
                                        {
                                            if (!Item.Agate_map.ContainsKey(packet[12]))
                                            {
                                                Item.Agate_map.Add(packet[12], client.Entity.MapID + "~" + client.Entity.X + "~" + client.Entity.Y);
                                                Database.ConquerItemTable.UpdateItemAgate(Item);
                                                Item.SendAgate(client);
                                            }
                                            break;
                                        }
                                    }
                                    break;
                                }
                            case 3:
                                {
                                    if (client.Map.IsDynamic()) return;
                                    ConquerItem Item = null;
                                    if (client.Inventory.TryGetItem(ItemUID, out Item))
                                    {
                                        if (Item.Agate_map.ContainsKey(packet[12]))
                                        {
                                            if (!Constants.PKFreeMaps.Contains(client.Entity.MapID))
                                            {
                                                if (ushort.Parse(Item.Agate_map[packet[12]].Split('~')[0].ToString()) == 1038)
                                                    return;
                                                if (ushort.Parse(Item.Agate_map[packet[12]].Split('~')[0].ToString()) == 6001)
                                                    return;
                                                if (ushort.Parse(Item.Agate_map[packet[12]].Split('~')[0].ToString()) == 6002)
                                                    return;
                                                if (ushort.Parse(Item.Agate_map[packet[12]].Split('~')[0].ToString()) == 1098)
                                                    return;
                                                if (ushort.Parse(Item.Agate_map[packet[12]].Split('~')[0].ToString()) == 1508)
                                                    return;
                                                if (ushort.Parse(Item.Agate_map[packet[12]].Split('~')[0].ToString()) == 1518)
                                                    return;
                                                if (ushort.Parse(Item.Agate_map[packet[12]].Split('~')[0].ToString()) == 3825)
                                                    return;
                                                if (ushort.Parse(Item.Agate_map[packet[12]].Split('~')[0].ToString()) == 6003)
                                                    return;
                                                if (ushort.Parse(Item.Agate_map[packet[12]].Split('~')[0].ToString()) == 6004)
                                                    return;
                                                client.Entity.Teleport(ushort.Parse(Item.Agate_map[packet[12]].Split('~')[0].ToString())
                                                    , ushort.Parse(Item.Agate_map[packet[12]].Split('~')[1].ToString())
                                                    , ushort.Parse(Item.Agate_map[packet[12]].Split('~')[2].ToString()));
                                                Item.Durability -= 100;
                                                Database.ConquerItemTable.UpdateDurabilityItem(Item);
                                                Item.SendAgate(client);
                                                Database.ConquerItemTable.UpdateItemAgate(Item);
                                            }
                                            else
                                            {
                                                client.Send(new Message("You can not Teleport!", Message.System));
                                            }
                                        }
                                    }
                                    break;
                                }
                            case 4:
                                {
                                    ConquerItem Item = null;
                                    if (client.Inventory.TryGetItem(ItemUID, out Item))
                                    {
                                        int cost = (int)(Item.MaximDurability - Item.Durability) / 2;
                                        if (cost == 0) cost = 1;
                                        if (client.Entity.ConquerPoints > cost)
                                        {
                                            client.Entity.ConquerPoints -= (uint)cost;
                                            Item.Durability = Item.MaximDurability;
                                            Item.SendAgate(client);
                                            Database.ConquerItemTable.UpdateItemAgate(Item);
                                        }
                                    }
                                    break;
                                }
                                
                        }
                        break;
                    }
                #endregion
                #region MsgMessageBoard 1111
                case 1111:
                    {
                        Nyx.Server.Network.MsgMessageBoard.Process(client, packet);
                        return;
                    }
                #endregion MsgMessageBoard
                #region TopGuilds (1058)
                case 1058:
                    {
                        if (client.Guild != null && client.AsMember != null)
                        {
                            if (client.AsMember != null)
                            {
                                Writer.Write((uint)client.AsMember.SilverDonation, 8, packet);
                                if (client.Entity.GuildRank != (ushort)Nyx.Server.Game.Enums.GuildMemberRank.DeputyLeader)
                                    if (client.Entity.GuildRank != (ushort)Nyx.Server.Game.Enums.GuildMemberRank.GuildLeader)
                                        if (client.Entity.GuildRank != (ushort)Nyx.Server.Game.Enums.GuildMemberRank.LeaderSpouse)
                                            if (client.AsMember.TotalDoantion > client.Guild.SilverFund)
                                            {
                                                client.Guild.SilverFund = (uint)client.AsMember.TotalDoantion;
                                                client.Entity.GuildRank = (ushort)Nyx.Server.Game.Enums.GuildMemberRank.OSupervisor;
                                                client.AsMember.Rank = (Nyx.Server.Game.Enums.GuildMemberRank)client.Entity.GuildRank;
                                            }

                                Writer.Write((uint)client.AsMember.ConquerPointDonation, 12, packet);
                                if (client.Entity.GuildRank != (ushort)Nyx.Server.Game.Enums.GuildMemberRank.DeputyLeader)
                                    if (client.Entity.GuildRank != (ushort)Nyx.Server.Game.Enums.GuildMemberRank.GuildLeader)
                                        if (client.Entity.GuildRank != (ushort)Nyx.Server.Game.Enums.GuildMemberRank.LeaderSpouse)
                                            if (client.AsMember.ConquerPointDonation > client.Guild.ConquerPointFund)
                                            {
                                                client.Guild.ConquerPointFund = (uint)client.AsMember.ConquerPointDonation;
                                                client.Entity.GuildRank = (ushort)Nyx.Server.Game.Enums.GuildMemberRank.CPSupervisor;
                                                client.AsMember.Rank = (Nyx.Server.Game.Enums.GuildMemberRank)client.Entity.GuildRank;
                                            }

                            }
                            Writer.Write(client.Entity.PKPoints, 20, packet);
                            if (client.Entity.GuildRank != (ushort)Nyx.Server.Game.Enums.GuildMemberRank.DeputyLeader)
                                if (client.Entity.GuildRank != (ushort)Nyx.Server.Game.Enums.GuildMemberRank.GuildLeader)
                                    if (client.Entity.GuildRank != (ushort)Nyx.Server.Game.Enums.GuildMemberRank.LeaderSpouse)
                                        if (client.Entity.PKPoints > client.Guild.pkp_donation)
                                        {
                                            client.Guild.pkp_donation = (uint)client.Entity.PKPoints;
                                            client.Entity.GuildRank = (ushort)Nyx.Server.Game.Enums.GuildMemberRank.PKSupervisor;
                                            client.AsMember.Rank = (Nyx.Server.Game.Enums.GuildMemberRank)client.Entity.GuildRank;
                                            client.Guild.PKSupervisorCount++;
                                        }

                            if (client.ArenaStatistic != null)
                            {
                                Writer.Write(client.ArenaStatistic.CurrentHonor, 24, packet);
                                if (client.Entity.GuildRank != (ushort)Nyx.Server.Game.Enums.GuildMemberRank.DeputyLeader)
                                    if (client.Entity.GuildRank != (ushort)Nyx.Server.Game.Enums.GuildMemberRank.GuildLeader)
                                        if (client.Entity.GuildRank != (ushort)Nyx.Server.Game.Enums.GuildMemberRank.LeaderSpouse)
                                            if (client.ArenaStatistic.CurrentHonor > client.Guild.honor_donation)
                                            {
                                                client.Guild.honor_donation = (uint)client.ArenaStatistic.CurrentHonor;
                                                client.Entity.GuildRank = (ushort)Nyx.Server.Game.Enums.GuildMemberRank.HonoraryManager;
                                                client.AsMember.Rank = (Nyx.Server.Game.Enums.GuildMemberRank)client.Entity.GuildRank;
                                                client.Guild.HonoraryManagerCount++;
                                            }
                            }
                            if (client.Entity.Flowers != null)
                            {
                                Writer.Write((uint)client.Entity.Flowers.RedRoses, 28, packet);
                                {
                                    if (client.Entity.GuildRank != (ushort)Game.Enums.GuildMemberRank.DeputyLeader)
                                        if (client.Entity.GuildRank != (ushort)Game.Enums.GuildMemberRank.GuildLeader)
                                            if (client.Entity.Flowers.RedRoses > client.Guild.rose_donation)
                                            {
                                                client.Guild.rose_donation = (uint)client.Entity.Flowers.RedRoses;
                                                client.Entity.GuildRank = (ushort)Game.Enums.GuildMemberRank.RoseSupervisor;
                                                client.AsMember.Rank = (Game.Enums.GuildMemberRank)client.Entity.GuildRank;
                                            }
                                }
                                Writer.Write((uint)client.Entity.Flowers.Lilies, 36, packet);
                                {
                                    if (client.Entity.GuildRank != (ushort)Game.Enums.GuildMemberRank.DeputyLeader)
                                        if (client.Entity.GuildRank != (ushort)Game.Enums.GuildMemberRank.GuildLeader)
                                            if (client.Entity.Flowers.Lilies > client.Guild.lilies_donation)
                                            {
                                                client.Guild.lilies_donation = (uint)client.Entity.Flowers.Lilies;
                                                client.Entity.GuildRank = (ushort)Game.Enums.GuildMemberRank.LilySupervisor;
                                                client.AsMember.Rank = (Game.Enums.GuildMemberRank)client.Entity.GuildRank;
                                            }
                                }
                                Writer.Write((uint)client.Entity.Flowers.Orchads, 40, packet);
                                {
                                    if (client.Entity.GuildRank != (ushort)Game.Enums.GuildMemberRank.DeputyLeader)
                                        if (client.Entity.GuildRank != (ushort)Game.Enums.GuildMemberRank.GuildLeader)
                                            if (client.Entity.Flowers.Orchads > client.Guild.orchid_donation)
                                            {
                                                client.Guild.orchid_donation = (uint)client.Entity.Flowers.Orchads;
                                                client.Entity.GuildRank = (ushort)Game.Enums.GuildMemberRank.OrchidFollower;
                                                client.AsMember.Rank = (Game.Enums.GuildMemberRank)client.Entity.GuildRank;
                                            }
                                }
                                Writer.Write((uint)client.Entity.Flowers.Tulips, 32, packet);
                                {
                                    if (client.Entity.GuildRank != (ushort)Game.Enums.GuildMemberRank.DeputyLeader)
                                        if (client.Entity.GuildRank != (ushort)Game.Enums.GuildMemberRank.GuildLeader)
                                            if (client.Entity.Flowers.Tulips > client.Guild.tuil_donation)
                                            {
                                                client.Guild.tuil_donation = (uint)client.Entity.Flowers.Tulips;
                                                client.Entity.GuildRank = (ushort)Game.Enums.GuildMemberRank.TulipFollower;
                                                client.AsMember.Rank = (Game.Enums.GuildMemberRank)client.Entity.GuildRank;
                                            }
                                }
                                Writer.Write((uint)(client.Entity.Flowers.Orchads
                                                        + (uint)client.Entity.Flowers.RedRoses
                                                        + (uint)client.Entity.Flowers.Tulips
                                                        + (uint)client.Entity.Flowers.Lilies), 44, packet);
                            }
                            if (client.Entity.GuildRank != (ushort)Nyx.Server.Game.Enums.GuildMemberRank.DeputyLeader)
                                if (client.Entity.GuildRank != (ushort)Nyx.Server.Game.Enums.GuildMemberRank.GuildLeader)
                                    if (client.Entity.GuildRank != (ushort)Nyx.Server.Game.Enums.GuildMemberRank.LeaderSpouse)
                                    {
                                        client.AsMember.LoadArsenalDonation(client);
                                        if (client.AsMember.Arsenal_Donation >= 12260970)
                                        {
                                            client.Entity.GuildRank = (ushort)Nyx.Server.Game.Enums.GuildMemberRank.Manager;
                                            client.AsMember.Rank = (Nyx.Server.Game.Enums.GuildMemberRank)client.Entity.GuildRank;
                                            client.Guild.ManagerCount++;
                                        }
                                    }
                            Writer.Write(0U, 16, packet);
                            if (client.Entity != null && client.Entity.Flowers != null)
                            {
                                Writer.Write(client.Entity.Flowers.RedRoses, 28, packet);
                                if ((int)client.Entity.GuildRank != 990 && (int)client.Entity.GuildRank != 1000 && client.Entity.Flowers.RedRoses > client.Guild.rose_donation)
                                {
                                    client.Guild.rose_donation = client.Entity.Flowers.RedRoses;
                                    client.Entity.GuildRank = (ushort)852;
                                    client.AsMember.Rank = (Enums.GuildMemberRank)client.Entity.GuildRank;
                                }
                                Writer.Write(client.Entity.Flowers.Tulips, 32, packet);
                                if ((int)client.Entity.GuildRank != 990 && (int)client.Entity.GuildRank != 1000 && client.Entity.Flowers.Tulips > client.Guild.tuil_donation)
                                {
                                    client.Guild.tuil_donation = client.Entity.Flowers.Tulips;
                                    client.Entity.GuildRank = (ushort)499;
                                    client.AsMember.Rank = (Enums.GuildMemberRank)client.Entity.GuildRank;
                                }
                                Writer.Write(client.Entity.Flowers.Lilies, 36, packet);
                                if ((int)client.Entity.GuildRank != 990 && (int)client.Entity.GuildRank != 1000 && client.Entity.Flowers.Lilies > client.Guild.lilies_donation)
                                {
                                    client.Guild.lilies_donation = client.Entity.Flowers.Lilies;
                                    client.Entity.GuildRank = (ushort)851;
                                    client.AsMember.Rank = (Enums.GuildMemberRank)client.Entity.GuildRank;
                                }
                                Writer.Write(client.Entity.Flowers.Orchads, 40, packet);
                                if ((int)client.Entity.GuildRank != 990 && (int)client.Entity.GuildRank != 1000 && client.Entity.Flowers.Orchads > client.Guild.orchid_donation)
                                {
                                    client.Guild.orchid_donation = client.Entity.Flowers.Orchads;
                                    client.Entity.GuildRank = (ushort)498;
                                    client.AsMember.Rank = (Enums.GuildMemberRank)client.Entity.GuildRank;
                                }
                                Writer.Write(client.Entity.Flowers.Orchads + client.Entity.Flowers.RedRoses + client.Entity.Flowers.Tulips + client.Entity.Flowers.Lilies, 44, packet);
                            }
                            if (client.Entity.GuildRank != (ushort)Nyx.Server.Game.Enums.GuildMemberRank.DeputyLeader)
                                if (client.Entity.GuildRank != (ushort)Nyx.Server.Game.Enums.GuildMemberRank.GuildLeader)
                                    if (client.Entity.GuildRank != (ushort)Nyx.Server.Game.Enums.GuildMemberRank.LeaderSpouse)
                                    {
                                        if (client.Entity.Name == client.Guild.LeaderName)
                                        {
                                            client.Entity.GuildRank = (ushort)Nyx.Server.Game.Enums.GuildMemberRank.LeaderSpouse;
                                            client.AsMember.Rank = (Nyx.Server.Game.Enums.GuildMemberRank)client.Entity.GuildRank;
                                            client.Guild.LeaderSpouseCount++;
                                        }
                                    }
                            if (client.Guild != null)
                                client.Guild.SendGuild(client);
                            client.Send(packet);
                        }
                        break;
                    }
                #endregion
                #region PK Explorer (2220)
                case 2220:
                    {
                        PkExplorer pk = new PkExplorer(packet, client);
                        pk.SubType = 1;
                        client.Send(pk.Build());
                        break;
                    }
                #endregion
                #region FairyFlower
                case 2070:
                    {
                        FairySpawn.Process(packet, client);
                        break;
                    }
                #endregion
                //#region Flowers
                //case 1150:
                //    {
                //        Game.Features.Flowers.SendFlower(client, packet);
                //        return;
                //    }
                //case 1151:
                //    {
                //        Game.Features.Flowers.FlowersPacket(packet, client);
                //        break;
                //    }
                //#endregion
                #region Achievement
                case 1136:
                    {
                        switch (packet[4])
                        {
                            case 1:
                                {
                                    Client.GameClient obj;
                                    if (Kernel.GamePool.TryGetValue(BitConverter.ToUInt32(packet, 8), out obj))
                                    {
                                        client.Send(obj.Entity.MyAchievement.ViewOpen());
                                    }
                                    break;
                                }
                            case 2:
                                {
                                    client.Entity.MyAchievement.CreateFlaID((int)BitConverter.ToUInt32(packet, 12));
                                    break;
                                }
                        }
                        break;
                    }
                #endregion
                #region VipSystem (1128)
                case 1128:
                    {
                        if (client.Entity.MapID == 601 || (client.Map.BaseID == 1038 && Game.GuildWar.IsWar)) return;
                        if (client.Map.BaseID == 6000 || client.Map.BaseID == 6001 || client.Map.BaseID == 1844 || client.Map.BaseID == 1801 || client.Map.BaseID == 8883 || client.Map.BaseID == 1005 && client.Entity.MapID != 1005 || client.Map.BaseID == 700)
                        {
                            client.Send(Constants.vipteleport);
                            return;
                        }
                        VIPTeleport tele = new VIPTeleport();
                        tele.Deserialize(packet);
                        switch (tele.TeleportType)
                        {
                            case VIPTeleportTypes.SelfTeleport:
                                {
                                    client.LastVIPTeleport = Time32.Now;
                                    VIPTeleport.Teleport(client, tele.Location);
                                    break;
                                }
                            case VIPTeleportTypes.TeamTeleport:
                                {

                                    if (Time32.Now > client.LastVIPTeamTeleport.AddSeconds(5))
                                    {
                                        client.LastVIPTeamTeleport = Time32.Now;
                                        if (client.Team != null)
                                        {
                                            foreach (var teammate in client.Team.Teammates)
                                            {
                                                if (teammate.Entity.UID != client.Entity.UID)
                                                {
                                                    teammate.Send(new VIPTeleport()
                                                    {
                                                        Countdown = 10,
                                                        Location = tele.Location,
                                                        Name = client.Entity.Name,
                                                        TeleportType = VIPTeleportTypes.TeammateConfirmation
                                                    }.Encode());
                                                }
                                            }
                                        }
                                        VIPTeleport.Teleport(client, tele.Location);
                                    }
                                    else
                                        client.Send(new Message("You have to wait 5 more seconds to use the VIP Team Teleport.", Color.Red, Message.Talk));

                                    break;
                                }
                            case VIPTeleportTypes.TeammateTeleport:
                                {
                                    VIPTeleport.Teleport(client, tele.Location);
                                    break;
                                }
                        }
                        break;
                    }
                #endregion
                #region Guild members (2102)
                case 2102:
                    {
                        ushort Page = BitConverter.ToUInt16(packet, 8);
                        if (client.Guild != null)
                        {
                            if (client.AsMember != null)
                                client.Guild.SendMembers(client, Page);
                        }
                        break;
                    }
                #endregion
                #region Arena (2207<->2211)
                case 2207:
                    {
                        ushort PageIndex = BitConverter.ToUInt16(packet, 6);
                        Game.Arena.Statistics.ShowRankingPage(packet[4], PageIndex, client);
                        break;
                    }
                case 2206:
                    {
                        ushort PageIndex = BitConverter.ToUInt16(packet, 4);
                        Game.Arena.QualifyEngine.RequestGroupList(client, PageIndex);
                        break;
                    }
                case 2205:
                    {
                        uint DialogID = BitConverter.ToUInt32(packet, 4);
                        uint ButtonID = BitConverter.ToUInt32(packet, 8);
                        switch (DialogID)
                        {
                            case 4:
                                {
                                    switch (ButtonID)
                                    {
                                        case 0:
                                            {
                                                Game.Arena.QualifyEngine.DoQuit(client);
                                                break;
                                            }
                                    }
                                    break;
                                }
                            case 0: Game.Arena.QualifyEngine.DoSignup(client); client.Send(packet); break;
                            case 1: Game.Arena.QualifyEngine.DoQuit(client); client.Send(packet); break;
                            case 3:
                                {
                                    switch (ButtonID)
                                    {
                                        case 2: Game.Arena.QualifyEngine.DoGiveUp(client); break;
                                        case 1: Game.Arena.QualifyEngine.DoAccept(client); break;
                                    }
                                    break;
                                }
                            case 5:
                                {
                                    if (client.ArenaPoints <= 1500)
                                        if (client.Entity.Money >= 9000000)
                                        {
                                            client.Entity.Money -= 9000000;
                                            client.ArenaPoints += 1500;
                                            client.Send(client.ArenaStatistic);
                                        }
                                    break;
                                }
                            case 11:
                                {
                                    switch (ButtonID)
                                    {
                                        case 0: Game.Arena.QualifyEngine.DoSignup(client); break;
                                    }
                                    break;
                                }

                        }
                        break;
                    }
                case 2208:
                    {
                        Game.Arena.Statistics.ShowWiners(client);
                        break;
                    }
                case 2209:
                    {
                        client.ArenaStatistic.Send(client);
                        break;
                    }
                case 2211:
                    {
                        if (client.Entity.MapID == 601) return;
                        if (client.Map.BaseID >= 6000 && client.Map.BaseID <= 6003) return;
                        ushort Type = BitConverter.ToUInt16(packet, 4);
                        ushort SubType = BitConverter.ToUInt16(packet, 6);
                        uint Fighter = BitConverter.ToUInt32(packet, 10);
                        if (Type == 0)
                        {
                            // if (!Constants.PKFreeMaps.Contains(client.Entity.MapID))
                            {

                                if (Kernel.GamePool.ContainsKey(Fighter))
                                {
                                    Client.GameClient Client = Kernel.GamePool[Fighter];
                                    if (Client.Team != null)
                                    {
                                        if (Client.Team.EliteMatch != null)
                                        {
                                            if (Client.Team.EliteMatch.OnGoing)
                                            {
                                                Client.Team.EliteMatch.BeginWatch(client);
                                            }
                                        }
                                    }
                                    else if (Client.ElitePKMatch != null)
                                    {
                                        if (Client.ElitePKMatch.OnGoing)
                                        {
                                            Client.ElitePKMatch.BeginWatch(client);
                                        }
                                    }
                                    else if (Client.InQualifier())
                                    {
                                        if (Client.QualifierGroup != null)
                                        {
                                            if (!Client.QualifierGroup.Done)
                                            {
                                                Client.QualifierGroup.BeginWatching(client, Fighter);
                                            }
                                        }
                                        else if (Client.TeamQualifierGroup != null)
                                        {
                                            if (!Client.TeamQualifierGroup.Done)
                                            {
                                                Client.TeamQualifierGroup.BeginWatching(client);
                                            }
                                        }
                                    }
                                }
                            }

                        }
                        else if (Type == 1)
                        {
                            if (client.Entity.SkillTeamWatchingElitePKMatch != null)
                                client.Entity.SkillTeamWatchingElitePKMatch.LeaveWatch(client);
                            else if (client.WatchingElitePKMatch != null)
                                client.WatchingElitePKMatch.LeaveWatch(client);
                            else if (client.WatchingGroup != null)
                                Game.Arena.QualifyEngine.DoLeave(client);
                            else
                                if (client.TeamWatchingGroup != null)
                                    Game.TeamArena.QualifyEngine.DoLeave(client);
                        }
                        else if (Type == 4)
                        {
                            uint fighter = BitConverter.ToUInt32(packet, 10);
                            if (client.Entity.SkillTeamWatchingElitePKMatch != null)
                                client.Entity.SkillTeamWatchingElitePKMatch.Cheer(client, fighter);
                            else if (client.WatchingElitePKMatch != null)
                                client.WatchingElitePKMatch.Cheer(client, fighter);
                            else if (client.WatchingGroup != null)
                                Game.Arena.QualifyEngine.DoCheer(client, fighter);
                            else
                                if (client.TeamWatchingGroup != null)
                                    Game.TeamArena.QualifyEngine.DoCheer(client, fighter);
                        }
                        break;
                    }
                #endregion
                #region Champion Point
                case 2600:
                    {
                        if (client.CP != null)
                            client.CP.Send(client);
                        break;
                    }
                #endregion
                #region ElitePk Tournament 2223 | 2219
                case 2223:
                    {
                        client.Send(packet);
                        ElitePKRanking ranks = new ElitePKRanking(false);
                        ranks.Deserialize(packet);
                        ElitePKTournament.Tournaments[ranks.Group].Rankings(client);
                        break;
                    }
                case 2219:
                    {
                        client.Send(packet);
                        ElitePKBrackets brackets = new ElitePKBrackets(false);
                        brackets.Deserialize(packet);
                        if (brackets.Type == ElitePKBrackets.RequestInformation || brackets.Type == ElitePKBrackets.InitialList)
                            ElitePKTournament.Tournaments[brackets.Group].Update(client, brackets.Page);
                        break;
                    }
                case 1064:
                    {
                        ElitePKWager wager = new ElitePKWager();
                        wager.Deserialize(packet);
                        if (Kernel.GamePool.ContainsKey(wager.WagedUID))
                        {
                            var pClient = Kernel.GamePool[wager.WagedUID];
                            if (pClient != null)
                            {
                                if (pClient.ElitePKMatch != null)
                                {
                                    if (pClient.ElitePKMatch.Flag == ElitePK.Match.StatusFlag.AcceptingWagers)
                                    {
                                        if (client.Entity.Money >= wager.Wager * 100000)
                                        {
                                            client.Entity.Money -= wager.Wager * 100000;
                                            if (!pClient.ElitePKStats.Wagers.ContainsKey(client.Entity.UID))
                                                pClient.ElitePKStats.Wagers[client.Entity.UID] = wager.Wager;
                                            else
                                                pClient.ElitePKStats.Wagers[client.Entity.UID] += wager.Wager;
                                            pClient.ElitePKStats.Wager += wager.Wager;
                                            pClient.ElitePKMatch.TotalWagers += wager.Wager;
                                            var epk = ElitePKTournament.Tournaments[pClient.ElitePKMatch.GroupID];
                                            epk.Update(client, 0);
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    }
                case 1065:
                    {
                        ElitePKWagersList wager = new ElitePKWagersList(false);
                        wager.Deserialize(packet);
                        var epk = ElitePKTournament.Tournaments[wager.Group];

                        int count = 0;//epk.Matches.Values.Count(p => p.TotalWagers != 0);
                        foreach (var p in epk.Matches.Values)
                        {
                            if (p.TotalWagers != 0)
                                count++;
                        }

                        wager = new ElitePKWagersList(true, count);
                        wager.TotalMatches = (uint)count;
                        int i = 0;
                        foreach (var match in epk.Matches.Values)
                            if (match.TotalWagers != 0)
                                wager.Append(match, i++);
                        client.Send(wager);
                        break;
                    }
                case 1130:
                    {
                        try
                        {
                            TitlePacket tpacket = new TitlePacket(false);
                            tpacket.Deserialize(packet);

                            switch (tpacket.Type)
                            {
                                case TitlePacket.Types.List:
                                    {
                                        tpacket.Title = client.Entity.MyTitle;
                                        if (client.Entity.Titles.Count > 0)
                                        {
                                            tpacket.Count = (Byte)client.Entity.Titles.Count();
                                            foreach (var title in client.Entity.Titles)
                                                tpacket.Add((Byte)title.Key);
                                        }
                                        client.Send(tpacket);
                                        break;
                                    }
                                case TitlePacket.Types.Switch:
                                    {
                                        if (client.Entity.Titles.Keys.Contains(tpacket.Title) || tpacket.Title == TitlePacket.Titles.None)
                                        {
                                            client.Entity.MyTitle = tpacket.Title;
                                            client.Send(tpacket);
                                            client.Entity.Teleport(client.Entity.MapID, client.Entity.X, client.Entity.Y);
                                        }
                                        break;
                                    }
                            }
                        }
                        catch (Exception) {  }
                        break;
                    }
                #endregion
                #region Team Tournament & Skill Tournament
                case 2232:
                    {

                        client.Send(packet);
                        if (packet[4] == GamePackets.TeamElitePkBrackets.UpdateList || packet[4] == GamePackets.TeamElitePkBrackets.RequestInformation
                            || packet[4] == GamePackets.TeamElitePkBrackets.InitialList)
                            Game.Features.Tournaments.TeamElitePk.TeamTournament.Tournaments[packet[14]].Update(client, packet[6]);

                        break;
                    }
                case 2233:
                    {
                        client.Send(packet);
                        Game.Features.Tournaments.TeamElitePk.TeamTournament.Tournaments[packet[8]].Rankings(client);
                        break;
                    }
                case 2240:
                case 2260:
                    {
                        string TeamName = ReadString(packet, 12, 32);
                        byte Mode = packet[4];
                        if (client.Team != null)
                        {
                            if (client.Team.EliteFighterStats != null)
                            {
                                client.Team.EliteFighterStats.Name = TeamName;

                                client.Send(packet);
                            }

                        }
                        break;
                    }
                case 2252:
                    {

                        client.Send(packet);
                        if (packet[4] == GamePackets.TeamElitePkBrackets.UpdateList
                            || packet[4] == GamePackets.TeamElitePkBrackets.RequestInformation
                            || packet[4] == GamePackets.TeamElitePkBrackets.InitialList)//1 
                            Game.Features.Tournaments.TeamElitePk.SkillTeamTournament.Tournaments[packet[14]].Update(client, packet[6]);

                        break;
                    }
                case 2253:
                    {

                        client.Send(packet);
                        Game.Features.Tournaments.TeamElitePk.SkillTeamTournament.Tournaments[packet[8]].Rankings(client);
                        break;
                    }
                #endregion
                #region TeamArena (2243<->2247)
                case 2243://Request Arena ranking List
                    {
                        //Code snippet that belongs to Ultimation
                        ushort PageIndex = BitConverter.ToUInt16(packet, 6);
                        Game.TeamArena.Statistics.ShowRankingPage(packet[4], packet[4], client);
                        break;
                    }
                case 2242:
                    {
                        //Code snippet that belongs to Ultimation
                        ushort PageIndex = BitConverter.ToUInt16(packet, 4);
                        Game.TeamArena.QualifyEngine.RequestGroupList(client, PageIndex);
                        break;
                    }
                case 2241://Arena Signup!
                    {
                        //Code snippet that belongs to Ultimation
                        uint DialogID = BitConverter.ToUInt32(packet, 4);
                        uint ButtonID = BitConverter.ToUInt32(packet, 8);
                        switch (DialogID)
                        {
                            case 4:
                                {
                                    switch (ButtonID)
                                    {
                                        case 0:
                                            {
                                                Game.TeamArena.QualifyEngine.DoQuit(client);
                                                break;
                                            }
                                    }
                                    break;
                                }
                            case 0: Game.TeamArena.QualifyEngine.DoSignup(client); client.Send(packet); break;
                            case 1: Game.TeamArena.QualifyEngine.DoQuit(client); client.Send(packet); break;
                            case 3:
                                {
                                    switch (ButtonID)
                                    {
                                        case 2: Game.TeamArena.QualifyEngine.DoGiveUp(client); break;
                                        case 1: Game.TeamArena.QualifyEngine.DoAccept(client); break;
                                    }
                                    break;
                                }
                            case 5:
                                {
                                    if (client.ArenaPoints <= 1500)
                                    {
                                        if (client.Entity.Money >= 9000000)
                                        {
                                            client.Entity.Money -= 9000000;
                                            client.ArenaPoints += 1500;
                                            client.Send(client.TeamArenaStatistic);
                                        }
                                    }
                                    break;
                                }
                            case 11://Win/Lose Dialog
                                {
                                    switch (ButtonID)
                                    {
                                        case 0: Game.TeamArena.QualifyEngine.DoSignup(client); break;
                                    }
                                    break;
                                }

                        }
                        break;
                    }
                case 2244://Request Arena Winner List
                    {
                        //Code snippet that belongs to Ultimation
                        Game.TeamArena.Statistics.ShowWiners(client);
                        break;
                    }
                case 2245:
                    {
                        client.TeamArenaStatistic.Send(client);
                        break;
                    }
                case 2247:
                    {
                        if (client.Entity.MapID == 601) return;
                        if (client.Map.BaseID >= 6000 && client.Map.BaseID <= 6003) return;
                        ushort Type = BitConverter.ToUInt16(packet, 4);
                        uint Fighter = BitConverter.ToUInt32(packet, 8);
                        if (Type == 0)
                        {
                            if (Kernel.GamePool.ContainsKey(Fighter))
                            {
                                Client.GameClient Client = Kernel.GamePool[Fighter];
                                if (Client.InTeamQualifier())
                                {
                                    Game.TeamArena.QualifierList.QualifierParticipants particiaptants = new Game.TeamArena.QualifierList.QualifierParticipants(Client, Game.TeamArena.QualifierList.QualifierParticipants.KindOfParticipants.Neutral);
                                    client.Send(particiaptants.Build(client.Entity.UID));
                                }
                            }
                        }
                        break;
                    }
                #endregion
                #region Movement/Walk (10005)
                case 10005:
                    {
                        if (client.Action != 2)
                            return;
                        GroundMovement groundMovement = new GroundMovement(false);
                        groundMovement.Deserialize(packet);
                        client.LastMove = Time32.Now;
                        PlayerGroundMovment(groundMovement, client);
                        break;
                    }
                #endregion
                #region Reincarnation (1066)
                case 1066:
                    {
                        if (client.Entity.Reborn != 2) return;
                        if (Kernel.ReincarnatedCharacters.ContainsKey(client.Entity.UID))
                        {
                            if (client.Entity.Level > 110)
                            {
                                Database.ReincarnationTable.RemoveReincarnated(client.Entity);
                                Kernel.ReincarnatedCharacters.Remove(client.Entity.UID);
                            }
                            else
                            {
                                return;
                            }
                        }
                        byte NewClass = packet[8];
                        ushort NewBody = packet[12];
                        if (client.Entity.Body.ToString().EndsWith("1") || client.Entity.Body.ToString().EndsWith("2"))
                            NewBody += 2000;
                        else NewBody += 1000;

                        if (client.Inventory.Contains(711083, 1))
                        {
                            if (client.Inventory.Count > 40 - 10) { client.Send("You need atleast 10 open spots!"); return; }
                            client.Entity.Body = NewBody;
                            PacketHandler.Reincarnation(client, NewClass);
                            client.Inventory.Remove(711083, 1);
                            RemoveBadSkills(client);
                        }
                        break;
                    }
                #endregion
                #region PurifyItem (2076)
                case 2076:
                    {
                        Purification ps = new Purification(false);
                        ps.Deserialize(packet);
                        switch (ps.Mode)
                        {
                            case Purification.Purify:
                                PurifyItem(ps, client); break;
                            case Purification.ItemArtifact:
                                PurifyRefinery(ps, client); break;
                            //case Purification.Stabilaze:
                            //new Game.Features.Refinery.Handle(packet, client); break;
                        }
                        break;
                    }
                #endregion
                #region Clans (1312)
                case 1312:
                    {
                        Clan clanp = new Clan();
                        clanp.Deserialize(packet);
                        GameClient target;
                        switch (clanp.Type)
                        {
                            case Clan.Types.Announce:
                                {
                                    Clan clan = client.Entity.GetClan;
                                    if (clan != null)
                                    {
                                        client.Send(new ClanAnnouncement(clan));
                                    }
                                    break;
                                }
                            case Clan.Types.Kick:
                                {
                                    var clan = client.Entity.GetClan;
                                    var kickedmem = Kernel.GamePool.Values.SingleOrDefault(x => x.Entity.Name == clanp.Offset18String);
                                    if (kickedmem != null)
                                    {
                                        byte[] Packet = new byte[90];
                                        Writer.Write(82, 0, Packet);
                                        Writer.Write(1312, 2, Packet);
                                        Writer.Write(22, 4, Packet);
                                        Writer.Write(kickedmem.Entity.UID, 8, Packet);
                                        kickedmem.Send(Packet);

                                        kickedmem.Entity.ClanRank = Clan.Ranks.None;
                                        kickedmem.Entity.ClanName = "";
                                        kickedmem.Entity.ClanId = 0;
                                        kickedmem.SendScreenSpawn(kickedmem.Entity, true);
                                    }
                                    if (clan.Members.Remove(clan.Members.SingleOrDefault(x => x.Value.Name == clanp.Offset18String).Key))
                                    {
                                        clan.InfoToMembers();
                                        Database.EntityTable.RemoveClanMember(clanp.Offset18String);
                                        client.Send(new Message(String.Format("{0} has kicked {1} form his Clan!", client.Entity.Name, clanp.Offset18String), Color.Red, Message.TopLeft));
                                    }
                                    break;
                                }
                            case Clan.Types.MyClan:
                                {
                                    Clan clan = client.Entity.GetClan;
                                    if (clan != null)
                                    {
                                        clan.Build(client, Clan.Types.MyClan);
                                        client.Send(clan);

                                        clan.Build(client, Clan.Types.Info);
                                        client.Send(clan);
                                    }
                                    break;
                                }
                            case Clan.Types.Members:
                                {
                                    Clan clan = client.Entity.GetClan;
                                    if (clan != null)
                                    {
                                        ClanMembers memclanp = new ClanMembers(clan);
                                        memclanp.Type = clanp.Type;
                                        client.Send(memclanp);
                                    }
                                    break;
                                }
                            case Clan.Types.Dedicate:
                                {
                                    Clan clan = client.Entity.GetClan;
                                    if (clan != null)
                                    {
                                        if (client.Entity.Money >= clanp.ID)
                                        {
                                            client.Entity.Money -= clanp.ID;
                                            clan.Fund += clanp.ID;

                                            ClanMember member;
                                            if (clan.Members.TryGetValue(client.Entity.UID, out member))
                                            {
                                                member.Donation += clanp.ID;
                                                Database.MySqlCommand Command = new Database.MySqlCommand(Database.MySqlCommandType.UPDATE);
                                                Command.Update("entities")
                                                    .Set("clandonation", member.Donation)
                                                    .Where("uid", client.Entity.UID)
                                                    .Execute();
                                            }
                                            clan.Save(client, "fund", clan.Fund);

                                            clan.InfoToMembers();
                                        }
                                    }
                                    break;
                                }

                            case (Clan.Types)11://add player
                                {
                                    uint lider = BitConverter.ToUInt32(packet, 8);
                                    if (Kernel.GamePool.ContainsKey(lider))
                                    {
                                        packet[4] = 11;
                                        Writer.Write(client.Entity.UID, 8, packet);

                                        packet[16] = 1;
                                        packet[17] = (byte)client.Entity.Name.Length;
                                        for (int i = 0; i < client.Entity.Name.Length; i++)
                                        {
                                            try
                                            {
                                                packet[18 + i] = Convert.ToByte(client.Entity.Name[i]);

                                            }
                                            catch { }
                                        }
                                        Kernel.GamePool[lider].Send(packet);
                                    }
                                    break;
                                }
                            case (Clan.Types)9://add player
                                {
                                    uint lider = BitConverter.ToUInt32(packet, 8);

                                    byte[] pack = new byte[89 + client.Entity.ClanName.Length + client.Entity.Name.Length];
                                    Writer.Write((ushort)(81 + client.Entity.Name.Length + client.Entity.ClanName.Length), 0, pack);
                                    Writer.Write(1312, 2, pack);
                                    pack[4] = 9;

                                    Writer.Write(client.Entity.UID, 8, pack);
                                    Writer.Write(new List<string>()
                                    {
                                        client.Entity.ClanName, 
                                        client.Entity.Name
                                    }, 16, pack);
                                    Kernel.GamePool[lider].Send(pack);
                                    break;
                                }

                            case (Clan.Types)10://add player
                                {
                                    uint lider = BitConverter.ToUInt32(packet, 8);
                                    var Client = Kernel.GamePool[lider];

                                    if (Client == null) break;
                                    if (packet[16] == 1)
                                    {
                                        Clan clientClan = Client.Entity.GetClan;
                                        if (Client.Entity.ClanRank == Clan.Ranks.ClanLeader)
                                        {
                                            if (clientClan != null)
                                            {
                                                if (clientClan.Members.Count < 12)
                                                {
                                                    clientClan.Join(client);
                                                }
                                            }
                                        }
                                    }
                                    Database.EntityTable.UpdateClanID(Client);
                                    Database.EntityTable.UpdateClanRank(Client);
                                    break;
                                }
                            case (Clan.Types)12:
                                {
                                    if (packet[16] == 1)
                                    {
                                        Clan clientClan = client.Entity.GetClan;
                                        if (client.Entity.ClanRank == Clan.Ranks.ClanLeader)
                                        {
                                            if (clientClan != null)
                                            {
                                                if (clientClan.Members.Count < 12)
                                                {
                                                    GameClient member = null;
                                                    if (Kernel.GamePool.TryGetValue(BitConverter.ToUInt32(packet, 8), out member))
                                                    {
                                                        clientClan.Join(member);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    break;
                                }
                            case Clan.Types.Quit:
                                {
                                    Clan clan = client.Entity.GetClan;
                                    if (clan != null)
                                    {
                                        if (client.Entity.ClanRank != Clan.Ranks.ClanLeader)
                                        {
                                            if (clan.Members.ContainsKey(client.Entity.UID))
                                                clan.Members.Remove(client.Entity.UID);

                                            client.Entity.ClanRank = Clan.Ranks.None;
                                            client.Entity.ClanName = "";
                                            client.Entity.ClanId = 0;

                                            Database.EntityTable.UpdateClanID(client);
                                            Database.EntityTable.UpdateClanRank(client);
                                            Database.EntityTable.UpdateClanDonation(client);
                                            clan.InfoToMembers();
                                            client.SendScreen(client.Entity.SpawnPacket, false);

                                            clan.SendMessage(new Message(String.Format("{0} Has Left the Clan ", client.Entity.Name), Color.Red, Message.Clan));

                                            client.Send(clanp);
                                        }
                                    }
                                    break;
                                }
                            case Clan.Types.AddAlly:
                                {
                                    Clan clan = client.Entity.GetClan;
                                    if (clan != null)
                                    {
                                        if (client.Entity.ClanRank == Clan.Ranks.ClanLeader)
                                        {
                                            if (clan.Allies.Count() >= 5) { client.Send(new Message("The Ammount of Allies You can Have has exceeded", Color.Red, Message.TopLeft)); break; }

                                            if (Kernel.GamePool.TryGetValue(clanp.ID, out target))
                                            {
                                                Clan tclan = target.Entity.GetClan;
                                                if (tclan != null)
                                                {
                                                    if (target.Entity.ClanRank == Clan.Ranks.ClanLeader)
                                                    {
                                                        if (tclan.Allies.Count() >= 5) { client.Send(new Message("The Ammount of Allies the Target Clan can Have has exceeded", Color.Red, Message.TopLeft)); break; }

                                                        if (!clan.Allies.ContainsKey(tclan.ID))
                                                        {
                                                            if (!clan.Enemies.ContainsKey(tclan.ID))
                                                            {
                                                                String clanName = client.Entity.ClanName;

                                                                clanp.Offset16 = 2;
                                                                clanp.ID = client.Entity.UID;

                                                                Writer.Write((Byte)clanName.Length, 17, clanp.Encode());
                                                                Writer.Write(clanName, 18, clanp.Encode());

                                                                tclan.AllyRequest = clan.ID;

                                                                target.Send(clanp);
                                                            }
                                                            else client.Send(new Message("That clan is Your Enemy.", Color.Red, Message.TopLeft));
                                                        }
                                                    }
                                                    else client.Send(new Message("This target is not the clan leader.", Color.Red, Message.TopLeft));
                                                }
                                            }
                                            else client.Send(new Message("Can not find target.", Color.Red, Message.TopLeft));
                                        }
                                        else client.Send(new Message("You are not the clan leader.", Color.Red, Message.TopLeft));
                                    }
                                    break;
                                }
                            case Clan.Types.AcceptAlliance:
                                {
                                    Clan clan = client.Entity.GetClan;
                                    if (clan != null)
                                    {
                                        if (client.Entity.ClanRank == Clan.Ranks.ClanLeader)
                                        {
                                            Clan tclan;
                                            if (Kernel.Clans.TryGetValue(clan.AllyRequest, out tclan))
                                            {
                                                if (tclan != null)
                                                {
                                                    if (!tclan.Enemies.ContainsKey(clan.ID))
                                                    {
                                                        if (!clan.Enemies.ContainsKey(tclan.ID))
                                                        {
                                                            if (!clan.Allies.ContainsKey(tclan.ID))
                                                                clan.Allies.Add(tclan.ID, tclan);
                                                            tclan.Allies.Add(clan.ID, clan);

                                                            clan.SendMessage(new ClanRelations(clan, ClanRelations.RelationTypes.Allies));
                                                            tclan.SendMessage(new ClanRelations(tclan, ClanRelations.RelationTypes.Allies));

                                                            clan.SendMessage(new Message(String.Format("Our Clan has Allianced with {0}", tclan.Name), Color.Red, Message.Clan));
                                                            tclan.SendMessage(new Message(String.Format("Our Clan has Allianced with {0}", clan.Name), Color.Red, Message.Clan));

                                                            clan.AddRelation(tclan.ID, ClanRelations.RelationTypes.Allies);
                                                            tclan.AddRelation(clan.ID, ClanRelations.RelationTypes.Allies);

                                                            clan.AllyRequest = tclan.AllyRequest = 0;
                                                        }
                                                        else client.Send(new Message("This Clan is Your Enemy.", Color.Red, Message.TopLeft));
                                                    }
                                                    client.Send(new Message("This Clan Has Enemied You!.", Color.Red, Message.TopLeft));
                                                }
                                            }
                                            else client.Send(new Message("Can not find target", Color.Red, Message.TopLeft));
                                        }
                                        else client.Send(new Message("You are not the clan leader.", Color.Red, Message.TopLeft));
                                    }
                                    break;
                                }
                            case Clan.Types.DeleteEnemy:
                                {
                                    Clan clan = client.Entity.GetClan;
                                    if (clan != null)
                                    {
                                        if (client.Entity.ClanRank == Clan.Ranks.ClanLeader)
                                        {
                                            String EnemyTarget = clanp.Offset18String;
                                            UInt32 ClanId = clan.GetClanId(EnemyTarget);

                                            Clan tclan;
                                            if (Kernel.Clans.TryGetValue(ClanId, out tclan))
                                            {
                                                clan.Enemies.Remove(ClanId);

                                                clan.DeleteRelation(ClanId, ClanRelations.RelationTypes.Enemies);

                                                clan.SendMessage(new ClanRelations(clan, ClanRelations.RelationTypes.Enemies));

                                                clan.SendMessage(new Message(String.Format("We are no longer Enemies With {0}", tclan.Name), Color.Red, Message.Clan));

                                                client.Send(clanp);
                                            }
                                        }
                                        else client.Send(new Message("You are not authorized to continue with this action", Color.Red, Message.TopLeft));
                                    }
                                    break;
                                }
                            case Clan.Types.DeleteAlly:
                                {
                                    Clan clan = client.Entity.GetClan;
                                    if (clan != null)
                                    {
                                        if (client.Entity.ClanRank == Clan.Ranks.ClanLeader)
                                        {
                                            String AlliedTarget = clanp.Offset18String;
                                            UInt32 ClanId = clan.GetClanId(AlliedTarget);

                                            Clan tclan;
                                            if (clan.Allies.TryGetValue(ClanId, out tclan))
                                            {
                                                clan.Allies.Remove(ClanId);
                                                tclan.Allies.Remove(clan.ID);

                                                clan.DeleteRelation(ClanId, ClanRelations.RelationTypes.Allies);
                                                tclan.DeleteRelation(clan.ID, ClanRelations.RelationTypes.Allies);

                                                clan.SendMessage(new ClanRelations(clan, ClanRelations.RelationTypes.Allies));
                                                tclan.SendMessage(new ClanRelations(tclan, ClanRelations.RelationTypes.Allies));

                                                clan.SendMessage(new Message(String.Format("We are no longer allied with {0}", tclan.Name), Color.Red, Message.Clan));
                                                tclan.SendMessage(new Message(String.Format("We are no longer allied with {0}", clan.Name), Color.Red, Message.Clan));

                                                client.Send(clanp);
                                            }
                                        }
                                        else client.Send(new Message("You are not authorized to continue with this action", Color.Red, Message.TopLeft));
                                    }
                                    break;
                                }
                            case Clan.Types.AddEnemy:
                                {
                                    Clan clan = client.Entity.GetClan;
                                    if (clan != null)
                                    {
                                        if (client.Entity.ClanRank == Clan.Ranks.ClanLeader)
                                        {
                                            String Enemy = clanp.Offset18String;
                                            UInt32 ClanId = clan.GetClanId(Enemy);
                                            if (!clan.Enemies.ContainsKey(ClanId))
                                            {
                                                if (!clan.Allies.ContainsKey(ClanId))
                                                {
                                                    if (clan.Enemies.Count() >= 5) { client.Send(new Message("The Ammount of Enemies You can Have has exceeded", Color.Red, Message.TopLeft)); break; }

                                                    Clan tclan;
                                                    if (Kernel.Clans.TryGetValue(ClanId, out tclan))
                                                    {
                                                        if (!clan.Enemies.ContainsKey(tclan.ID))
                                                            clan.Enemies.Add(tclan.ID, tclan);
                                                        clan.AddRelation(ClanId, ClanRelations.RelationTypes.Enemies);

                                                        clan.SendMessage(new ClanRelations(clan, ClanRelations.RelationTypes.Enemies));

                                                        clan.SendMessage(new Message(String.Format("We Have Enemied the clan {0}", tclan.Name), Color.Red, Message.Clan));
                                                        tclan.SendMessage(new Message(String.Format("The Clan {0} Has Made us their Enemy!", clan.Name), Color.Red, Message.Clan));
                                                    }
                                                }
                                                else client.Send(new Message("This clan is one of your alliance, What has gone wrong?", Color.Red, Message.TopLeft));
                                            }
                                            else client.Send(new Message("This clan is Already One of Your Enemies", Color.Red, Message.TopLeft));
                                        }
                                    }
                                    break;
                                }
                            case Clan.Types.SetAnnouncement:
                                {
                                    Clan clan = client.Entity.GetClan;
                                    if (clan != null)
                                    {
                                        if (client.Entity.ClanRank == Clan.Ranks.ClanLeader)
                                        {
                                            clan.Announcement = clanp.Offset18String;

                                            clan.SendMessage(new ClanAnnouncement(clan));
                                            clan.Save(client, "announcement", clan.Announcement);
                                        }
                                        else client.Send(new Message("You are not authorized to continue with this action", Color.Red, Message.TopLeft));
                                    }
                                    break;
                                }
                            case Clan.Types.TransferLeader:
                                {
                                    if (client.Entity.Myclan != null)
                                    {
                                        uint lider = 0;
                                        string name_receive = System.Text.Encoding.Default.GetString(packet, 18, packet[17]);
                                        foreach (var clien in Kernel.GamePool.Values)
                                        {
                                            if (clien.Entity.Name == name_receive)
                                                lider = clien.Entity.UID;
                                        }
                                        if (lider == client.Entity.UID) return;
                                        Client.GameClient aClient = null;
                                        if (Nyx.Server.Kernel.GamePool.TryGetValue(lider, out aClient))
                                        {

                                            if (Nyx.Server.Kernel.Clans.ContainsKey(client.Entity.Myclan.ID))
                                            {
                                                if (Nyx.Server.Kernel.Clans[client.Entity.Myclan.ID].Members.ContainsKey(aClient.Entity.UID))
                                                {
                                                    Nyx.Server.Kernel.Clans[client.Entity.Myclan.ID].LeaderName = aClient.Entity.Name;
                                                    aClient.Entity.ClanRank = Clan.Ranks.ClanLeader;
                                                    aClient.Entity.Myclan.Members[aClient.Entity.UID].Rank = Clan.Ranks.ClanLeader;
                                                    if (aClient.Entity.Myclan.Members.ContainsKey(client.Entity.UID))
                                                        aClient.Entity.Myclan.Members[client.Entity.UID].Rank = 0;
                                                    client.Entity.ClanRank = 0;
                                                    Clan.SaveClan(aClient.Entity.Myclan);
                                                    Clan clan = client.Entity.GetClan;
                                                    clan.Join(client);
                                                }
                                            }

                                        }
                                        else
                                        {
                                            Nyx.Server.Kernel.Clans[client.Entity.Myclan.ID].LeaderName = name_receive;
                                            client.Entity.ClanRank = 0;
                                            Clan clan = client.Entity.GetClan;
                                            clan.Join(client);
                                            Clan.SaveClan(client.Entity.Myclan);
                                            Clan.TransferClan(name_receive);
                                        }
                                    }
                                    break;
                                }
                            default:
                                break;
                        }
                        break;
                    }
                #endregion
                #region ClanArena(1313)
                case 1313:
                    {
                        ClanArena CA = new ClanArena();
                        CA.Deserialize(packet);
                        switch (CA.Mode)
                        {
                            case (byte)ClanArena.Modes.Apply:
                                {
                                    if (client.Entity.Money > 100)
                                    {
                                        client.Entity.Money -= 100;
                                        Kernel.ClanCityApply = true;
                                    }
                                    break;
                                }

                            case (byte)ClanArena.Modes.Cancel:
                                {
                                    Kernel.ClanCityApply = false;
                                    break;
                                }
                            case (byte)ClanArena.Modes.ShowGUI:
                                {
                                    if (client.Entity.ClanRank == Clan.Ranks.ClanLeader)
                                    {
                                        if (Kernel.ClanCityApply == false)
                                            CA.Param = 5;
                                        else
                                            CA.Param = 3;
                                    }
                                    if (client.Entity.GetClan != null)
                                    {
                                        CA.WinningClanName = client.Entity.GetClan.Name;
                                    }
                                    else
                                    {
                                        CA.WinningClanName = "N/A";
                                    }
                                    // CA.ClanCityName = Entity.GetMapName(client.Entity.MapID) + "Clan";
                                    if (DateTime.Now.Hour == 20 && DateTime.Now.Minute >= 30)
                                    {
                                        if (client.Entity.GetClan != null)
                                        {
                                            packet[92] = 1;
                                        }
                                    }
                                    CA.OccuPrevYDays = 1;
                                    CA.ItemID1 = 729536;
                                    CA.ItemID2 = 729536;
                                    CA.Fee = 1000000;
                                    CA.Send(client);
                                    break;
                                }
                            case (byte)ClanArena.Modes.Join:
                                {
                                    if (client.Entity.GetClan == null)
                                        break;
                                    else if (Kernel.ClanCityApply == false)
                                        break;
                                    
                                    Map map = Kernel.Maps[1505];
                                    Tuple<ushort, ushort> tuple = map.RandomCoordinates();
                                    client.Entity.Teleport(1505, tuple.Item1, tuple.Item2);
                                    break;
                                }
                            default:
                                {
                                    break;
                                }
                        }
                        break;
                    }
                #endregion
                #region SubClasses
                case 2320:
                    {
                        ushort packets = BitConverter.ToUInt16(packet, 8);
                        byte index2 = packet[10];
                        byte[] Packet;
                        Packet = null;
                        switch (packets)
                        {
                            //9 = learn 10= upgrade pro
                            #region [Restore/Switch]
                            case 0:
                                {
                                    byte To = packet[10];
                                    Packet = new byte[0];
                                    client.Send(packet);
                                    if (To > 0)//Switch
                                    {
                                        Packet = new byte[0];
                                        Packet = new SubClassShowFull(true)
                                        {
                                            ID = 1,
                                            Class = To,
                                            Level = client.Entity.SubClasses.Classes[To].Phase
                                        }.Encode();
                                        //client.Entity.SubClasses.Classes[To].Phase
                                        client.Send(Packet);
                                        //Packet = new SubClass(client.Entity).Encode();
                                        //client.Send(Packet);
                                        client.Entity.SubClass = To;
                                        /// client.Entity.SubClassLevel = client.Entity.SubClasses.Classes[To].Level;
                                        client.Entity.SubClasses.Active = To;
                                        client.Entity.SubClassesActive = To;
                                        //("s " + To + "");
                                    }
                                    else//Restore
                                    {
                                        client.Entity.SubClass = 0;
                                        client.Entity.SubClasses.Active = 0;
                                        client.Entity.SubClassesActive = 0;
                                        Packet = new SubClassShowFull(true) { ID = 1 }.Encode();
                                        client.Send(Packet);
                                    }
                                    client.SendScreen(client.Entity.SpawnPacket, false);
                                    break;
                                }
                            #endregion
                            #region [Upgrade]
                            case 2:
                                {
                                    if (!client.Entity.SubClasses.Classes.ContainsKey(index2))
                                        return;
                                    Nyx.Server.Game.SubClass subClass1 = client.Entity.SubClasses.Classes[index2];
                                    if ((int)subClass1.Level == 9)
                                        return;
                                    uint num6 = (uint)Subclasses.GetRequired(subClass1);
                                    if ((uint)client.Entity.SubClasses.StudyPoints < num6)
                                        return;
                                    ++subClass1.Level;
                                    client.Entity.SubClasses.StudyPoints -= (ushort)num6;
                                    Database.SubClassTable.Update(client.Entity, subClass1);
                                    Database.SubClassTable.Update(client);
                                    client.Send(new SubClassShow((ushort)0)
                                    {
                                        ID = (ushort)3,
                                        Class = subClass1.ID
                                    }.Encode());
                                    goto case 6;
                                }
                            #endregion
                            #region [Info]
                            case 6:
                                {
                                    client.Entity.SubClasses.Send(client);
                                    break;
                                }
                            #endregion
                            #region [Learn]
                            case 9:
                                switch (index2)
                                {
                                    case 1:
                                        {
                                            if (client.Entity.SubClasses.Classes.ContainsKey((byte)1) || !client.Inventory.Remove(721259U, (byte)5))
                                                return;
                                            Nyx.Server.Game.SubClass subClass2 = new Nyx.Server.Game.SubClass();
                                            subClass2.ID = index2;
                                            subClass2.Phase = (byte)1;
                                            subClass2.Level = (byte)1;
                                            client.Entity.SubClasses.Classes.Add(subClass2.ID, subClass2);
                                            client.Entity.SubClasses.SendLearn((Subclasses.ClassID)subClass2.ID, subClass2.Level, client);
                                            Database.SubClassTable.Insert(client.Entity, subClass2.ID);
                                            break;
                                        }
                                    case 2:
                                        {
                                            if (client.Entity.SubClasses.Classes.ContainsKey((byte)2) || !client.Inventory.Remove(721261U, (byte)10))
                                                return;
                                            Nyx.Server.Game.SubClass subClass3 = new Nyx.Server.Game.SubClass();
                                            subClass3.ID = index2;
                                            subClass3.Phase = (byte)1;
                                            subClass3.Level = (byte)1;
                                            client.Entity.SubClasses.Classes.Add(subClass3.ID, subClass3);
                                            client.Entity.SubClasses.SendLearn((Subclasses.ClassID)subClass3.ID, subClass3.Level, client);
                                            Database.SubClassTable.Insert(client.Entity, subClass3.ID);
                                            break;
                                        }
                                    case 3:
                                        {
                                            if (client.Entity.SubClasses.Classes.ContainsKey((byte)3) || !client.Inventory.Remove(711188U, (byte)1))
                                                return;
                                            Nyx.Server.Game.SubClass subClass4 = new Nyx.Server.Game.SubClass();
                                            subClass4.ID = index2;
                                            subClass4.Phase = (byte)1;
                                            subClass4.Level = (byte)1;
                                            client.Entity.SubClasses.Classes.Add(subClass4.ID, subClass4);
                                            client.Entity.SubClasses.SendLearn((Subclasses.ClassID)subClass4.ID, subClass4.Level, client);
                                            Database.SubClassTable.Insert(client.Entity, subClass4.ID);
                                            break;
                                        }
                                    case 4:
                                        {
                                            if (client.Entity.SubClasses.Classes.ContainsKey((byte)4) || !client.Inventory.Remove(723087U, (byte)20))
                                                return;
                                            Nyx.Server.Game.SubClass subClass5 = new Nyx.Server.Game.SubClass();
                                            subClass5.ID = index2;
                                            subClass5.Phase = (byte)1;
                                            subClass5.Level = (byte)1;
                                            client.Entity.SubClasses.Classes.Add(subClass5.ID, subClass5);
                                            client.Entity.SubClasses.SendLearn((Subclasses.ClassID)subClass5.ID, subClass5.Level, client);
                                            Database.SubClassTable.Insert(client.Entity, subClass5.ID);
                                            break;
                                        }
                                    case 5:
                                        {
                                            if (client.Entity.SubClasses.Classes.ContainsKey((byte)5) || !client.Inventory.Remove(1088001U, (byte)10))
                                                return;
                                            Nyx.Server.Game.SubClass subClass6 = new Nyx.Server.Game.SubClass();
                                            subClass6.ID = index2;
                                            subClass6.Phase = (byte)1;
                                            subClass6.Level = (byte)1;
                                            client.Entity.SubClasses.Classes.Add(subClass6.ID, subClass6);
                                            client.Entity.SubClasses.SendLearn((Subclasses.ClassID)subClass6.ID, subClass6.Level, client);
                                            Database.SubClassTable.Insert(client.Entity, subClass6.ID);
                                            break;
                                        }
                                    case 6:
                                        {
                                            if (client.Entity.SubClasses.Classes.ContainsKey((byte)6) || !client.Inventory.Remove(711679U, (byte)1))
                                                return;
                                            Nyx.Server.Game.SubClass subClass7 = new Nyx.Server.Game.SubClass();
                                            subClass7.ID = index2;
                                            subClass7.Phase = (byte)1;
                                            subClass7.Level = (byte)1;
                                            client.Entity.SubClasses.Classes.Add(subClass7.ID, subClass7);
                                            client.Entity.SubClasses.SendLearn((Subclasses.ClassID)subClass7.ID, subClass7.Level, client);
                                            Database.SubClassTable.Insert(client.Entity, subClass7.ID);
                                            break;
                                        }
                                    case 7:
                                        {
                                            break;
                                        }
                                    case 8:
                                        {
                                            break;
                                        }
                                    case 9:
                                        {
                                            if (client.Entity.SubClasses.Classes.ContainsKey((byte)9) || !client.Inventory.Remove(723903U, (byte)40))
                                                return;
                                            Nyx.Server.Game.SubClass subClass8 = new Nyx.Server.Game.SubClass();
                                            subClass8.ID = index2;
                                            subClass8.Phase = (byte)1;
                                            subClass8.Level = (byte)1;
                                            client.Entity.SubClasses.Classes.Add(subClass8.ID, subClass8);
                                            client.Entity.SubClasses.SendLearn((Subclasses.ClassID)subClass8.ID, subClass8.Level, client);
                                            Database.SubClassTable.Insert(client.Entity, subClass8.ID);
                                            break;
                                        }
                                    default:
                                        break;

                                }
                                break;
                            #endregion
                            #region [UpgradePro]
                            case 10:
                                {
                                    {
                                        if (!client.Entity.SubClasses.Classes.ContainsKey(index2))
                                            return;
                                        Nyx.Server.Game.SubClass SubClass = client.Entity.SubClasses.Classes[index2];
                                        if ((int)SubClass.Phase == 9 || (int)SubClass.Phase >= (int)SubClass.Level)
                                            return;
                                        ++SubClass.Phase;
                                        if ((int)SubClass.ID == 6)
                                        {
                                            if ((int)SubClass.Phase == 3)
                                                client.AddSpell((ISkill)new Spell(true)
                                                {
                                                    ID = 1416
                                                });
                                            if ((int)SubClass.Phase == 5)
                                                client.AddSpell((ISkill)new Spell(true)
                                                {
                                                    ID = 1417
                                                });
                                            if ((int)SubClass.Phase == 7)
                                                client.AddSpell((ISkill)new Spell(true)
                                                {
                                                    ID = 1418
                                                });
                                            if ((int)SubClass.Phase == 9)
                                                client.AddSpell((ISkill)new Spell(true)
                                                {
                                                    ID = 1419
                                                });
                                        }
                                        client.Entity.SubClasses.UpgradeStatus(client, true);
                                        Database.SubClassTable.Update(client.Entity, SubClass);
                                        client.Entity.SubClasses.SendPromoted((Subclasses.ClassID)SubClass.ID, SubClass.Phase, client);
                                        break;
                                    }
                                }
                            #endregion
                        }
                        break;
                    }
                #endregion
                #region ItemAdding Stabilization
                case 1038:
                    {
                        ItemAddingStabilization stabilization = new ItemAddingStabilization(false);
                        stabilization.Deserialize(packet);
                        StabilazeArtifact(stabilization, client);
                        break;
                    }
                #endregion
                #region Data (10010)
                case 10010:
                    {
                        if (client.Action != 2)
                            return;
                        HandleData(client, packet);
                        break;
                    }
                #endregion
                #region TimePacket (1033)
                case 1033:
                    {
                        ServerTime time = new ServerTime();
                        time.Year = (uint)DateTime.Now.Year;
                        time.Month = (uint)DateTime.Now.Month;
                        time.DayOfYear = (uint)DateTime.Now.DayOfYear;
                        time.DayOfMonth = (uint)DateTime.Now.Day;
                        time.Hour = (uint)DateTime.Now.Hour;
                        time.Minute = (uint)DateTime.Now.Minute;
                        time.Second = (uint)DateTime.Now.Second;
                        client.Send(time);
                        break;
                    }
                #endregion
                #region Chi (2533)

                case 2533:
                    {
                        Chi chi = new Chi(false);
                        chi.Deserialize(packet);
                        switch (chi.Type)
                        {
                            case Chi.Unlock:
                                UnlockChi(chi, client);
                                break;
                            case Chi.QueryInfo:
                                QueryChi(chi, client);
                                break;
                            case Chi.Study:
                                StudyChi(chi, client);
                                break;
                            case Chi.BuyStrength:
                                BuyStrengthChi(chi, client);
                                break;
                            case Chi.BuyStrength2:
                                BuyStrengthChi2(chi, client);
                                break;

                        }
                        break;
                    }

                #endregion
                default:
                    {
                        if (client.Account.State == Nyx.Server.Database.AccountTable.AccountState.GameMaster)
                            client.Send(new Message("Unknown Packet : ID : " + ID + ", Length : " + packet.Length, System.Drawing.Color.Red, Message.System));

                        break;
                    }
            }
        }
        private static void HandleData(GameClient client, byte[] packet)
        {
            Data gData = new Data(false);
            gData.Deserialize(packet);
            switch (gData.ID)
            {
                case Data.FinishSteedRace:
                    if (client.Entity.MapID == SteedRace.MAPID)
                        Program.World.SteedRace.FinishRace(client);
                    break;
                case Data.DetainWindowRequest:
                    {
                        if (!client.JustOpenedDetain)
                        {
                            if (client.DeatinedItem.Count != 0)
                                client.Send(new Data(true) { ID = Data.OpenWindow, dwParam = Data.WindowCommands.DetainRedeem, UID = client.Entity.UID });
                            if (client.ClaimableItem.Count != 0)
                                client.Send(new Data(true) { ID = Data.OpenWindow, dwParam = Data.WindowCommands.DetainClaim, UID = client.Entity.UID });
                        }
                        client.JustOpenedDetain = !client.JustOpenedDetain;
                        break;
                    }
                case 440://AddPersonToBlackList
                    {
                        var targetname = System.Text.UnicodeEncoding.UTF8.GetString(packet, 43, packet[42]).Replace("/0", "");
                        foreach (var person in Kernel.GamePool.Values)
                        {
                            if (person.Entity.Name == targetname)
                            {
                                if (!client.Entity.BlackList.Contains(targetname))
                                {
                                    client.Entity.BlackList.Add(targetname);
                                    gData.Unknown2 = 1;
                                    gData.dwParam = 1;
                                    gData.UID = client.Entity.UID;
                                    gData.TimeStamp = Time32.Now;
                                    gData.ID = 440;
                                    gData.DailyQuestWordLenght = packet[42];
                                    gData.DailyQuestWord = targetname;
                                    gData.Send(client);

                                }
                            }
                        }
                        break;
                    }
                case 441://RemovePersonFromBlackList
                    {
                        var targetname = System.Text.UnicodeEncoding.UTF8.GetString(packet, 43, packet[42]).Replace("/0", "");
                        if (client.Entity.BlackList.Contains(targetname))
                        {
                            client.Entity.BlackList.Remove(targetname);
                            gData.Unknown2 = 1;
                            gData.dwParam = 1;
                            gData.UID = client.Entity.UID;
                            gData.TimeStamp = Time32.Now;
                            gData.ID = 441;
                            gData.DailyQuestWordLenght = packet[42];
                            gData.DailyQuestWord = targetname;
                            gData.Send(client);
                        }
                        break;
                    }
                case 408:
                    {
                        if (!client.JustOpenedDetain)
                            if (client.ClaimableItem.Count != 0)
                                client.Send(new Data(true) { ID = Data.OpenWindow, dwParam = Data.WindowCommands.DetainClaim, UID = client.Entity.UID });
                        client.JustOpenedDetain = !client.JustOpenedDetain;
                        break;
                    }
                case 132:
                    {
                        client.Disconnect();
                        break;
                    }
                case 256:
                    {
                        if (client.Entity.ExtraInventory < 300)
                        {
                            if (client.Entity.ConquerPoints >= 90)
                            {
                                client.Entity.ExtraInventory += 1;
                                client.Entity.ConquerPoints -= 90;
                            }
                        }
                        break;
                    }
                case 166://Bulltion
                    {
                        if (client != null && !client.Entity.Dead && client.Entity != null && !client.Entity.InJail() && !client.InQualifier() && !client.InTeamQualifier() && !client.IsWatching() && client.Booth == null && !Constants.PKFreeMaps.Contains(client.Entity.MapID) && client.Entity.MapID < 10000)
                        {
                            switch (packet[12])
                            {
                                case 104:
                                    if (client.Entity.Level >= 90)
                                        client.Entity.Teleport(4020, 83, 73);
                                    else client.MessageBox("You haven't reached level 90 yet!");
                                    break;
                                case 91:
                                    client.Entity.Teleport(1002, 286, 291);
                                    break;
                                case 9:
                                case 10:
                                case 11:
                                case 12:
                                    client.Entity.Teleport(1002, 301, 145);
                                    break;
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                    client.Entity.Teleport(1002, 291, 146);
                                    break;
                                case 14:
                                case 37:
                                case 54:
                                    client.Entity.Teleport(1002, 327, 196);
                                    break;
                                case 15:
                                    client.Entity.Teleport(1002, 225, 238);
                                    break;
                                case 35:
                                case 17:
                                    client.Entity.Teleport(1038, 338, 346);
                                    break;
                                case 18:
                                case 19:
                                case 20:
                                case 21:
                                    client.Entity.Teleport(1002, 313, 146);
                                    break;
                                case 82:
                                    client.Entity.Teleport(1002, 308, 145);
                                    break;
                                case 22:
                                    client.Entity.Teleport(1002, 298, 206);
                                    client.MessageBox("You have been teleported to Squidward Octopus.");
                                    break;
                                case 1:
                                    client.Entity.Teleport(1002, 289, 149);
                                    break;
                                case 81:
                                    client.Entity.Teleport(1002, 336, 137);
                                    break;
                                case 8:
                                    client.Entity.Teleport(1002, 297, 149);
                                    break;
                                case 98:
                                    client.Entity.Teleport(1002, 265, 138);
                                    break;
                            }
                        }
                        break;
                    }
                case Data.AppearanceType:
                    ChangeAppearance(gData, client);
                    break;
                case Data.LevelUpSpell:
                    LevelUpSpell(gData, client);
                    break;
                case Data.LevelUpProficiency:
                    LevelUpProficiency(gData, client);
                    break;
                case Data.SwingPickaxe:
                    client.Mining = true;
                    break;
                case Data.Revive:
                    {
                        if (client.Entity.ContainsFlag(Update.Flags2.SoulShackle))
                            break;
                        if (Time32.Now >= client.Entity.DeathStamp.AddSeconds(20) && client.Entity.Dead)
                        {
                            client.Entity.Action = Nyx.Server.Game.Enums.ConquerAction.None;
                            client.ReviveStamp = Time32.Now;
                            client.Attackable = false;
                            client.Entity.AutoRev = 0;
                            client.Entity.TransformationID = 0;
                            client.Entity.RemoveFlag(Update.Flags.Dead);
                            client.Entity.RemoveFlag(Update.Flags.Ghost);
                            client.Entity.Hitpoints = client.Entity.MaxHitpoints;
                            bool ReviveHere = gData.dwParam == 1;
                            if (client.Spells.ContainsKey(12660) && client.Entity.EpicWarrior())
                            {
                                client.XPCount = client.Entity.XPCountTwist;
                            }
                            if (client.Entity.MapID == 1038 && GuildWar.IsWar)
                            {
                                client.Entity.Teleport(1002, 300, 288);
                            }
                            else if (client.Entity.MapID == 1002)
                            {
                                client.Entity.Teleport(1002, 300, 278);
                            }

                            else
                            {
                                if (ReviveHere && client.Entity.HeavenBlessing > 0)
                                {
                                    client.Entity.Teleport(client.Entity.MapID, client.Entity.X, client.Entity.Y);

                                }
                                else
                                {
                                    ushort[] Point = Database.DataHolder.FindReviveSpot(client.Map.ID);
                                    client.Entity.Teleport(Point[0], Point[1], Point[2]);
                                }
                            }

                        }
                        break;
                    }
                case Data.UsePortal:
                    UsePortal(gData, client);
                    break;
                case Data.ChangePKMode:
                    ChangePKMode(gData, client);
                    break;
                case Data.ChangeAction:
                    ChangeAction(gData, client);
                    break;
                case Data.ChangeDirection:
                    client.Entity.Facing = (Game.Enums.ConquerAngle)gData.Facing;
                    client.SendScreen(gData, false);
                    break;
                case Data.Hotkeys:
                    client.Send(packet);
                    break;
                case Data.ConfirmSpells:
                    if (client.Spells != null)
                        foreach (Interfaces.ISkill spell in client.Spells.Values)
                            if (spell.ID != 3060)
                                spell.Send(client);
                    client.Send(packet);
                    break;
                case Data.ConfirmProficiencies:
                    if (client.Proficiencies != null)
                        foreach (Interfaces.IProf proficiency in client.Proficiencies.Values)
                            proficiency.Send(client);
                    client.Send(packet);
                    break;
                case Data.ConfirmGuild:
                    client.Send(packet);
                    break;
                case Data.ConfirmFriends:
                    #region Friends/Enemy/TradePartners/Apprentices
                    Message msg2 = new Message("Your friend, " + client.Entity.Name + ", has logged on.", System.Drawing.Color.Red, Message.TopLeft);

                    foreach (Game.ConquerStructures.Society.Friend friend in client.Friends.Values)
                    {
                        if (friend.IsOnline)
                        {
                            var pckt = new KnownPersons(true)
                            {
                                UID = client.Entity.UID,
                                Type = KnownPersons.RemovePerson,
                                Name = client.Entity.Name,
                                Online = true
                            };
                            friend.Client.Send(pckt);
                            pckt.Type = KnownPersons.AddFriend;
                            friend.Client.Send(pckt);
                            friend.Client.Send(msg2);
                        }
                        client.Send(new KnownPersons(true)
                        {
                            UID = friend.ID,
                            Type = KnownPersons.AddFriend,
                            Name = friend.Name,
                            Online = friend.IsOnline
                        });
                        if (friend.Message != "")
                        {
                            client.Send(new Message(friend.Message, client.Entity.Name, friend.Name, System.Drawing.Color.Red, Message.Whisper));
                            Database.KnownPersons.UpdateMessageOnFriend(friend.ID, client.Entity.UID, "");
                        }
                    }

                    foreach (Game.ConquerStructures.Society.Enemy enemy in client.Enemy.Values)
                    {
                        client.Send(new KnownPersons(true)
                        {
                            UID = enemy.ID,
                            Type = KnownPersons.AddEnemy,
                            Name = enemy.Name,
                            Online = enemy.IsOnline
                        });
                    }
                    Message msg3 = new Message("Your partner, " + client.Entity.Name + ", has logged in.", System.Drawing.Color.Red, Message.TopLeft);

                    foreach (Game.ConquerStructures.Society.TradePartner partner in client.Partners.Values)
                    {
                        if (partner.IsOnline)
                        {
                            var packet3 = new TradePartner(true)
                            {
                                UID = client.Entity.UID,
                                Type = TradePartner.BreakPartnership,
                                Name = client.Entity.Name,
                                HoursLeft = (int)(new TimeSpan(partner.ProbationStartedOn.AddDays(3).Ticks).TotalHours - new TimeSpan(DateTime.Now.Ticks).TotalHours),
                                Online = true
                            };
                            partner.Client.Send(packet3);
                            packet3.Type = TradePartner.AddPartner;
                            partner.Client.Send(packet3);
                            partner.Client.Send(msg3);
                        }
                        var packet4 = new TradePartner(true)
                        {
                            UID = partner.ID,
                            Type = TradePartner.AddPartner,
                            Name = partner.Name,
                            HoursLeft = (int)(new TimeSpan(partner.ProbationStartedOn.AddDays(3).Ticks).TotalHours - new TimeSpan(DateTime.Now.Ticks).TotalHours),
                            Online = partner.IsOnline
                        };
                        client.Send(packet4);
                    }

                    foreach (Game.ConquerStructures.Society.Apprentice appr in client.Apprentices.Values)
                    {
                        if (appr.IsOnline)
                        {
                            ApprenticeInformation AppInfo = new ApprenticeInformation();
                            AppInfo.Apprentice_ID = appr.ID;
                            AppInfo.Apprentice_Level = appr.Client.Entity.Level;
                            AppInfo.Apprentice_Class = appr.Client.Entity.Class;
                            AppInfo.Apprentice_PkPoints = appr.Client.Entity.PKPoints;
                            AppInfo.Apprentice_Experience = appr.Actual_Experience;
                            AppInfo.Apprentice_Composing = appr.Actual_Plus;
                            AppInfo.Apprentice_Blessing = appr.Actual_HeavenBlessing;
                            AppInfo.Apprentice_Name = appr.Name;
                            AppInfo.Apprentice_Online = true;
                            AppInfo.Apprentice_Spouse_Name = appr.Client.Entity.Spouse;
                            AppInfo.Enrole_date = appr.EnroleDate;
                            AppInfo.Mentor_ID = client.Entity.UID;
                            AppInfo.Mentor_Mesh = client.Entity.Mesh;
                            AppInfo.Mentor_Name = client.Entity.Name;
                            AppInfo.Type = 2;
                            client.Send(AppInfo);

                            MentorInformation Information = new MentorInformation(true);
                            Information.Mentor_Type = 1;
                            Information.Mentor_ID = client.Entity.UID;
                            Information.Apprentice_ID = appr.ID;
                            Information.Enrole_Date = appr.EnroleDate;
                            Information.Mentor_Level = client.Entity.Level;
                            Information.Mentor_Class = client.Entity.Class;
                            Information.Mentor_PkPoints = client.Entity.PKPoints;
                            Information.Mentor_Mesh = client.Entity.Mesh;
                            Information.Mentor_Online = true;
                            Information.Shared_Battle_Power = appr.Client.Entity.BattlePowerFrom(client.Entity);
                            Information.String_Count = 3;
                            Information.Mentor_Name = client.Entity.Name;
                            Information.Apprentice_Name = appr.Name;
                            Information.Mentor_Spouse_Name = client.Entity.Spouse;
                            appr.Client.ReviewMentor();
                            appr.Client.Send(Information);
                        }
                        else
                        {
                            ApprenticeInformation AppInfo = new ApprenticeInformation();
                            AppInfo.Apprentice_ID = appr.ID;
                            AppInfo.Apprentice_Name = appr.Name;
                            AppInfo.Apprentice_Online = false;
                            AppInfo.Enrole_date = appr.EnroleDate;
                            AppInfo.Mentor_ID = client.Entity.UID;
                            AppInfo.Mentor_Mesh = client.Entity.Mesh;
                            AppInfo.Mentor_Name = client.Entity.Name;
                            AppInfo.Type = 2;
                            client.Send(AppInfo);
                        }
                    }
                    #endregion
                    client.Send(packet);
                    break;

                case Data.EndTeleport:
                    break;
                case Data.FirstCredit:
                    {
                        if (client.Entity.FirstCredit == 1)
                        {
                            client.Entity.FirstCredit = 2;
                            client.Inventory.AddBound(3001266, 0, 1);//FortunePack
                            client.Inventory.AddBound(3001268, 0, 1);//EXPPotionPack
                            client.Inventory.AddBound(3001270, 0, 1);//MeteorPack
                            client.Inventory.AddBound(3001271, 0, 1);//BigEXPBallPack
                            client.Inventory.AddBound(3001275, 0, 1);//SuperWeapon
                            client.Inventory.AddBound(3001280, 0, 1);//SuperArmor
                            client.Inventory.AddBound(3001267, 0, 1);//+3WhiteSteed
                            client.Inventory.AddBound(3001282, 0, 1);//PrayingStone(L)
                            client.Inventory.AddBound(3001289, 0, 1);//PromotionGift
                            Update upgrade = new Update(true);
                            upgrade.UID = client.Entity.UID;
                            upgrade.Append((byte)Update.FirstCreditGift, 21, 0, 0, 0);
                            client.Send(upgrade.Encode());
                        }
                        else
                        {
                            client.Send(new Message("Sorry not have CreditPoints you can donate to get CreditPoints", Message.System));
                        }
                        break;
                    }
                case Data.SetLocation:
                    SetLocation(gData, client);
                    break;
                case Data.Jump:
                    client.Entity.SetAway(false);
                    client.LastMove = Time32.Now;
                    PlayerJump(gData, client);
                    client.Entity.SpellStamp = Time32.Now.AddSeconds(-1);
                    break;
                case Data.UnknownEntity:
                    {
                        #region UnknownEntity
                        Client.GameClient pClient = null;
                        if (Kernel.GamePool.TryGetValue(gData.dwParam, out pClient))
                        {
                            if (Kernel.GetDistance(pClient.Entity.X, pClient.Entity.Y, client.Entity.X, client.Entity.Y) <= Constants.pScreenDistance && client.Map.ID == pClient.Map.ID)
                            {
                                if (pClient.Guild != null)
                                    pClient.Guild.SendName(client);
                                if (client.Guild != null)
                                    client.Guild.SendName(pClient);
                                if (pClient.Entity.UID != client.Entity.UID)
                                {
                                    if (pClient.Map.ID == client.Map.ID)
                                    {
                                        if (pClient.Map.BaseID == 700 && pClient.Map.ID != 700)
                                        {
                                            if (client.InQualifier())
                                            {
                                                if (pClient.InQualifier())
                                                {
                                                    client.Entity.SendSpawn(pClient);
                                                    pClient.Entity.SendSpawn(client);
                                                    if (pClient.Guild != null)
                                                        client.Entity.SendSpawn(pClient, false);
                                                    if (client.Guild != null)
                                                        pClient.Entity.SendSpawn(client, false);
                                                }
                                                else
                                                {
                                                    client.Entity.SendSpawn(pClient);

                                                    if (pClient.Guild != null)
                                                        client.Entity.SendSpawn(pClient, false);
                                                    client.Screen.Add(pClient.Entity);
                                                }
                                            }
                                            else
                                            {
                                                if (pClient.InQualifier())
                                                {
                                                    pClient.Entity.SendSpawn(client);
                                                    if (client.Guild != null)
                                                        pClient.Entity.SendSpawn(client, false);
                                                    pClient.Screen.Add(client.Entity);
                                                }
                                                else
                                                {
                                                    client.Entity.SendSpawn(pClient, false);
                                                    pClient.Entity.SendSpawn(client, false);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            client.Entity.SendSpawn(pClient, false);
                                            pClient.Entity.SendSpawn(client, false);
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            Game.Entity monster = null;
                            if (client.Map.Entities.TryGetValue(gData.dwParam, out monster))
                            {
                                if (Kernel.GetDistance(monster.X, monster.Y, client.Entity.X, client.Entity.Y) <= Constants.pScreenDistance)
                                {
                                    monster.SendSpawn(client, false);
                                }
                            }
                            if (client.Map.Companions.TryGetValue(gData.dwParam, out monster))
                            {
                                if (Kernel.GetDistance(monster.X, monster.Y, client.Entity.X, client.Entity.Y) <= Constants.pScreenDistance)
                                {
                                    monster.SendSpawn(client, false);
                                }
                            }
                            if (client.Map.BodyGuards.TryGetValue(gData.dwParam, out monster) && (Kernel.GetDistance(monster.X, monster.Y, client.Entity.X, client.Entity.Y) <= 0x13))
                            {
                                monster.SendSpawn(client, false);
                                client.SendScreenSpawn(client.BodyGuard, true);
                            }
                        }
                        #endregion
                        break;
                    }
                case Data.GetSurroundings:
                    {
                        if (client.Booth != null)
                        {
                            client.Entity.TransformationID = 0;
                            client.Booth.Remove();
                            client.Booth = null;
                        }
                        client.Screen.FullWipe();
                        client.Screen.Reload(null);
                        if (client.Entity.PreviousMapID == CaptureTheFlag.MapID)
                            Program.World.CTF.CloseList(client);

                        client.Send(new MapStatus()
                        {
                            BaseID = client.Map.BaseID,
                            ID = client.Map.ID,
                            Status = Database.MapsTable.MapInformations[client.Map.ID].Status,
                            Weather = Database.MapsTable.MapInformations[client.Map.ID].Weather
                        });
                        client.Send(gData);
                        break;
                    }
                case Data.CompleteLogin:
                    {
                        client.Entity.Update(Network.GamePackets.Update.ExtraInventory, client.Entity.ExtraInventory, false);
                        client.Entity.Update(Network.GamePackets.Update.AvailableSlots, 300, false);
                        #region InnerPower
                        if (!InnerPower.InnerPowerPolle.TryGetValue(client.Entity.UID, out client.Entity.InnerPower))
                        {
                            client.Entity.InnerPower = new InnerPower(client.Entity.Name, client.Entity.UID);
                            Database.InnerPowerTable.New(client);
                        }
                        client.Entity.InnerPower.UpdateStatus();
                        client.Entity.InnerPower.AddPotency(null, client, 0);
                        #endregion
                        #region SendInnerPowerPotency
                        client.Entity.Update(Update.InnerPowerPotency, client.Entity.InnerPower.Potency, false);
                        #endregion
                        new MsgUserAbilityScore().SendScore(client, client);
                        new MsgItemRefineRecord().Send(client);
                        client.Send(packet);
                        #region Union
                        if (Kernel.Unions.Count > 0)
                        {
                            Union.MsgLeagueOpt Res = new Union.MsgLeagueOpt(true);
                            Res.Action = Union.Actions.KingdomIcon;
                            if (client.Union != null)
                            {
                                Res.dwParam2 = client.Union.ID;
                            }
                            Res.dwParam3 = Kernel.ServerKingdom;
                            client.Send(Res.Encode());
                        }
                        if (client.Union != null)
                        {
                            client.Send(client.Union.SendOverheadLeagueInfo(client));
                        }
                        if (client.Union != null)
                        {
                            if (client.Union.IsKingdom())
                            {
                                if (client.Union.IsLeader(client.Entity.UID))
                                {
                                    new TitleStorage().AddTitle(client, 4001, 1000, false);
                                    new TitleStorage().AddTitle(client, 1, 1000, false);
                                    Union.MsgLeagueOpt Res = new Union.MsgLeagueOpt(true);
                                    Res.Action = Union.Actions.KingdomTitleGui;
                                    Res.dwParam3 = Kernel.ServerKingdom;
                                    client.Send(Res.Encode());
                                }
                            }
                            var array = client.Union.Members.OrderByDescending(i => i.UnionExploits).ToArray();
                            for (int i = 0; i < Math.Min(array.Length, 4); i++)
                            {
                                if (array[i].ID == client.Entity.UID)
                                {
                                   /* if (i == 0)
                                        client.Entity.AddFlag3(Update.Flags3.GoldBrickSuper);
                                    if (i == 1)
                                        client.Entity.AddFlag3(Update.Flags3.GoldBrickElite);
                                    if (i == 2)
                                        client.Entity.AddFlag3(Update.Flags3.GoldBrickUnique);
                                    if (i == 3)
                                        client.Entity.AddFlag3(Update.Flags3.GoldBrickRefined);
                                    if (i == 4)
                                        client.Entity.AddFlag3(Update.Flags3.GoldBrickNormal);*/
                                }
                            }
                        }
                        #endregion
                        #region VIP ICON
                        if (client.Entity.VIPLevel > 0)
                        {
                            client.Entity.VIPLevel = (byte)((client.Entity.VIPLevel) + 0);
                            Network.GamePackets.VipStatus vip = new Network.GamePackets.VipStatus();
                            client.Send(vip.Encode());
                        }
                        #endregion
                        if (client.Quests.GetQuest(QuestID.UnknownDangers) == null && client.Quests.CheckQuest(QuestID.UnknownDangers) != QuestPacket.QuestData.QuestStatus.Finished && client.Entity.Level >= 110)
                        {
                            client.Quests.Accept(QuestID.UnknownDangers);
                        }
                        client.LoadItemStats();
                        MsgSignIn.Show(client);
                        break;
                    }
                case Data.ChangeFace:
                    ChangeFace(gData, client);
                    break;
                case Data.ObserveEquipment:
                case Data.ObserveEquipment2:
                case Data.ObserveKnownPerson:
                    ObserveEquipment(gData, client);
                    break;
                case Data.ViewEnemyInfo:
                    {
                        if (client.Enemy.ContainsKey(gData.dwParam))
                        {
                            if (client.Enemy[gData.dwParam].IsOnline)
                            {
                                KnownPersonInfo info = new KnownPersonInfo(true);
                                info.Fill(client.Enemy[gData.dwParam], true, false);
                                if (client.Enemy[gData.dwParam].Client.Guild != null)
                                    client.Enemy[gData.dwParam].Client.Guild.SendName(client);
                                client.Send(info);
                            }
                        }
                        break;
                    }
                case Data.ViewFriendInfo:
                    {
                        if (client.Friends.ContainsKey(gData.dwParam))
                        {
                            if (client.Friends[gData.dwParam].IsOnline)
                            {
                                KnownPersonInfo info = new KnownPersonInfo(true);
                                info.Fill(client.Friends[gData.dwParam], false, false);
                                if (client.Friends[gData.dwParam].Client.Guild != null)
                                    client.Friends[gData.dwParam].Client.Guild.SendName(client);
                                client.Send(info);
                            }
                        }
                        break;
                    }
                case Data.ViewPartnerInfo:
                    {
                        if (client.Partners.ContainsKey(gData.dwParam))
                        {
                            if (client.Partners[gData.dwParam].IsOnline)
                            {
                                TradePartnerInfo info = new TradePartnerInfo(true);
                                info.Fill(client.Partners[gData.dwParam]);
                                if (client.Partners[gData.dwParam].Client.Guild != null)
                                    client.Partners[gData.dwParam].Client.Guild.SendName(client);
                                client.Send(info);
                            }
                        }
                        break;
                    }
                case Data.EndFly:
                    client.Entity.RemoveFlag(Update.Flags.Fly);
                    break;
                case Data.EndTransformation:
                    client.Entity.Untransform();
                    break;
                case Data.XPListEnd:
                case Data.Die:
                    break;
                case Data.OwnBooth:
                    {
                        if (client.WarehouseOpen || client.WarehousePW == 0)
                        {
                            client.Booth = new Nyx.Server.Game.ConquerStructures.Booth(client, gData);
                            client.Send(new Data(true) { ID = Data.ChangeAction, UID = client.Entity.UID, dwParam = 0 });
                            if (client.WarehousePW == 0)
                            {
                                client.Send(
                                    new Network.GamePackets.Message(
                                        "You should set a secondary password first! Do it from the Options window!",
                                        System.Drawing.Color.Red, 0x7d0));
                            }
                        }
                        else
                        {
                            client.Entity.NextAction = WareHousePassword.Nextaction.OwnBooth;
                            client.Entity.actionX = client.Entity.X;
                            client.Entity.actionY = client.Entity.Y;
                            Data data = new Data(true);
                            data.UID = client.Entity.UID;
                            data.ID = Data.OpenWindow;
                            data.TimeStamp = Time32.Now;
                            data.dwParam = Data.WindowCommands.SecondaryPasswordVerification;
                            data.wParam1 = client.Entity.X;
                            data.wParam2 = client.Entity.Y;
                            client.Send(data);
                        }
                        break;
                    }
                case Data.Away:
                    {
                        if (client.Entity.Away == 0)
                        {
                            client.Entity.Away = 1;
                        }
                        else
                        {
                            client.Entity.Away = 0;
                        }
                        client.SendScreenSpawn(client.Entity, false);
                        break;
                    }
                case Data.DeleteCharacter:
                    {
                        if (client.WarehousePW == 0 && gData.dwParam == 0 || client.WarehousePW == gData.dwParam)
                        {
                            client.Account.EntityID = 0;
                            client.Account.Save(client);
                            client.Disconnect();
                        }
                        break;
                    }
                case Data.PokerTournament:
                    {
                        if (client != null && client.Entity.MapID < 10000 && !client.Entity.Dead && client.Entity != null && !client.Entity.InJail() && !client.InQualifier() && !client.InTeamQualifier() && !client.IsWatching() && client.Booth == null && !Constants.PKFreeMaps.Contains(client.Entity.MapID))
                        {
                            switch (packet[12])
                            {
                                case 1:
                                    client.Entity.Teleport(8880, 85, 112);
                                    break;
                                case 2:
                                    client.Entity.Teleport(8881, 57, 63);
                                    break;
                                case 4:
                                    client.Entity.Teleport(2807, 57, 66);
                                    break;
                                case 3:
                                    client.Entity.Teleport(1036, 239, 240);
                                    break;
                            }
                        }
                        break;
                    }
                case Data.TeamSearchForMember:
                    {
                        if (client.Team != null)
                        {
                            Client.GameClient Client = null;
                            if (!client.Team.IsTeammate(gData.UID))
                                return;
                            if (Kernel.GamePool.TryGetValue(gData.UID, out Client))
                            {
                                gData.wParam1 = Client.Entity.X;
                                gData.wParam2 = Client.Entity.Y;
                                gData.Send(client);
                            }
                        }
                        break;
                    }
                case 436://GoldBrick
                    {
                        client.Send(new Message("You successfully submitted 1 Gold Brick!", Color.Red, Message.System));
                        _String str3 = new _String(true);
                        str3.TextsCount = 1;
                        str3.Type = 10;
                        if (client.Entity.StatusFlag3 == Update.Flags3.GoldBrickNormal)
                        {
                            client.Entity.KingdomDeed += 10;
                            str3.Texts.Add("accession");
                        }
                        if (client.Entity.StatusFlag3 == Update.Flags3.GoldBrickRefined)
                        {
                            client.Entity.KingdomDeed += 25;
                            str3.Texts.Add("accession1");
                        }
                        if (client.Entity.StatusFlag3 == Update.Flags3.GoldBrickUnique)
                        {
                            client.Entity.KingdomDeed += 50;
                            str3.Texts.Add("accession2");
                        }
                        if (client.Entity.StatusFlag3 == Update.Flags3.GoldBrickElite)
                        {
                            client.Entity.KingdomDeed += 100;
                            str3.Texts.Add("accession3");
                        }
                        if (client.Entity.StatusFlag3 == Update.Flags3.GoldBrickSuper)
                        {
                            client.Entity.KingdomDeed += 200;
                            str3.Texts.Add("accession4");
                        }
                        client.SendScreen(str3, true);
                        client.Entity.RemoveFlag3(client.Entity.StatusFlag3);
                        break;
                    }
                default:
                    if (client.Account.State == Nyx.Server.Database.AccountTable.AccountState.GameMaster)
                        client.Send(new Message("Unknown Data : ID: " + gData.ID, System.Drawing.Color.Red, Message.System));
                    break;
            }
        }
        public static string DumpPacket(byte[] packet)
        {
            string p = "";
            foreach (byte D in packet)
            {
                p += (Convert.ToString(D, 16)).PadLeft(2, '0') + " ";
            }
            return p.ToUpper();
        }
        public static string DumpPacket(uint[] packet)
        {
            string p = "";
            foreach (byte D in packet)
            {
                p += (Convert.ToString(D, 16)).PadLeft(2, '0') + " ";
            }
            return p.ToUpper();
        }
        public static void PrintPacket(byte[] packet)
        {
            foreach (byte D in packet)
            {
                System.Console.Write((Convert.ToString(D, 16)).PadLeft(2, '0').ToUpper() + " ");
            }
            System.Console.Write("\n\n");
        }
        #region SubClasses
        public static bool PassLearn(byte ID, Game.Entity Entity)
        {
            Boolean Pass = false;

            switch ((Game.Subclasses.ClassID)ID)
            {
                case Game.Subclasses.ClassID.MartialArtist:
                    if (Entity.Owner.Inventory.Contains(721259, 5))
                    {
                        Entity.Owner.Inventory.Remove(721259, 5);
                        Pass = true;
                    }
                    break;
                case Game.Subclasses.ClassID.Warlock:
                    if (Entity.Owner.Inventory.Contains(721261, 10))
                    {
                        Entity.Owner.Inventory.Remove(721261, 10);
                        Pass = true;
                    }
                    break;
                case Game.Subclasses.ClassID.ChiMaster:
                    if (Entity.Owner.Inventory.Contains(711188, 1))
                    {
                        Entity.Owner.Inventory.Remove(711188, 1);
                        Pass = true;
                    }
                    break;
                case Game.Subclasses.ClassID.Sage:
                    if (Entity.Owner.Inventory.Contains(723087, 20))
                    {
                        Entity.Owner.Inventory.Remove(723087, 20);
                        Pass = true;
                    }
                    break;
                case Game.Subclasses.ClassID.Apothecary:
                    if (Entity.Owner.Inventory.Contains(1088002, 10))
                    {
                        Entity.Owner.Inventory.Remove(1088002, 10);
                        Pass = true;
                    }
                    break;
                case Game.Subclasses.ClassID.Performer:
                    if (Entity.Owner.Inventory.Contains(753003, 5))
                    {
                        Entity.Owner.Inventory.Remove(753003, 5);
                        Pass = true;
                    }
                    else if (Entity.Owner.Inventory.Contains(753009, 1) && Entity.Owner.Inventory.Contains(753003, 2))
                    {
                        Entity.Owner.Inventory.Remove(753003, 2);
                        Entity.Owner.Inventory.Remove(753009, 1);
                        Pass = true;
                    }
                    else if (Entity.Owner.Inventory.Contains(753001, 15))
                    {
                        Entity.Owner.Inventory.Remove(753001, 15);
                        Pass = true;
                    }
                    break;
                case Game.Subclasses.ClassID.Wrangler:
                    if (Entity.Owner.Inventory.Contains(723903, 40))
                    {
                        Entity.Owner.Inventory.Remove(723903, 40);
                        Pass = true;
                    }
                    break;
            }

            return Pass;
        }
        public static void SubclassAutoSwitch(GameClient client, byte To)
        {
            foreach (Nyx.Server.Game.SubClass subClass1 in client.Entity.SubClasses.Classes.Values)
            {
                if (client.Entity.SubClasses.Classes.ContainsKey(To) && (int)To > 0 && (int)client.Entity.SubClass != 0)
                {
                    Nyx.Server.Game.SubClass subClass2 = client.Entity.SubClasses.Classes[client.Entity.SubClass];
                    byte[] numArray = (byte[])null;
                    numArray = new byte[0];
                    byte[] buffer = new SubClassShowFull(true)
                    {
                        ID = (ushort)1,
                        Class = subClass2.ID,
                        Level = client.Entity.SubClasses.Classes[subClass2.ID].Phase
                    }.Encode();
                    client.Send(buffer);
                    client.Entity.SubClass = subClass2.ID;
                    client.Entity.SubClassLevel = client.Entity.SubClasses.Classes[subClass2.ID].Level;
                    client.Entity.SubClasses.Active = subClass2.ID;
                    client.Entity.SubClassesActive = subClass2.ID;
                }
            }
        }
        public static bool PassRequeriments(Game.SubClass Sc, Game.Entity Entity)
        {
            Boolean Pass = false;
            byte Level = 0;
            byte Reborns = 0;
            #region [Switch Phases]
            switch (Sc.Phase)
            {
                case 0:
                case 1: return true;
                case 2: Level = 90; Reborns = 0; break;
                case 3: Level = 110; Reborns = 0; break;
                case 4: Level = 120; Reborns = 0; break;
                case 5: Level = 90; Reborns = 0; break;
                case 6: Level = 110; Reborns = 0; break;
                case 7: Level = 120; Reborns = 0; break;
                case 8: Level = 120; Reborns = 0; break;
                case 9: Level = 120; Reborns = 0; break;
            }
            #endregion

            if (Sc.Level > Sc.Phase && Entity.Level >= Level && Entity.Reborn >= Reborns)
                Pass = true;

            if (Sc.Level == 9 && Sc.Phase == 9)
                Pass = false;

            return Pass;
        }
        public static bool PassJoinRequirements(Client.GameClient client, Game.ConquerStructures.Society.Guild guild)
        {
            GuildCommand cmd = new GuildCommand(true);
            cmd.Type = GuildCommand.GuildRequirements;
            cmd.dwParam2 = guild.LevelRequirement;
            cmd.dwParam3 = guild.RebornRequirement;
            cmd.dwParam4 = guild.ClassRequirement;
            if (((client.Entity.Class >= 10 && client.Entity.Class <= 15) && !guild.AllowTrojans) ||
                ((client.Entity.Class >= 20 && client.Entity.Class <= 25) && !guild.AllowWarriors) ||
                ((client.Entity.Class >= 40 && client.Entity.Class <= 45) && !guild.AllowArchers) ||
                ((client.Entity.Class >= 50 && client.Entity.Class <= 55) && !guild.AllowNinjas) ||
                ((client.Entity.Class >= 60 && client.Entity.Class <= 65) && !guild.AllowMonks) ||
                ((client.Entity.Class >= 70 && client.Entity.Class <= 75) && !guild.AllowPirates) ||
                ((client.Entity.Class >= 100 && client.Entity.Class <= 190) && !guild.AllowTaoists))
            {
                client.Send(cmd);
                return false;
            }
            if (client.Entity.Reborn < guild.RebornRequirement)
            {
                client.Send(cmd);
                return false;
            }
            if (client.Entity.Level < guild.LevelRequirement)
            {
                client.Send(cmd);
                return false;
            }
            return true;
        }
        #endregion
        #region Chi
        public static void SendChiRankings(GenericRanking ranking, GameClient client)
        {
            SendRankingQuery(ranking, client, GenericRanking.DragonChi, (uint)client.ChiData.DragonRank,
                (uint)client.ChiPoints);
            SendRankingQuery(ranking, client, GenericRanking.PhoenixChi, (uint)client.ChiData.PhoenixRank,
                (uint)client.ChiPoints);
            SendRankingQuery(ranking, client, GenericRanking.TigerChi, (uint)client.ChiData.TigerRank,
                (uint)client.ChiPoints);
            SendRankingQuery(ranking, client, GenericRanking.TurtleChi, (uint)client.ChiData.TurtleRank,
                (uint)client.ChiPoints);
        }
        public static void SendRankingQuery(GenericRanking ranking, GameClient client, uint type, uint rank,uint points)
        {
            if (rank != 0)
            {
                ranking.RankingType = type;
                ranking.Append(rank, points, client.Entity.UID, client.Entity.Name);
                client.Send(ranking);
                ranking.Reset();
            }
        }
        private static void QueryChi(Chi chi, GameClient client)
        {
            Client.GameClient pClient;
            if (Kernel.GamePool.TryGetValue(chi.UID, out pClient))
                client.Send(new ChiPowers(true).Query(pClient, false));
        }
        public static void ShowGenericRanking2(GenericRanking ranking, GameClient client)
        {
            ushort page = ranking.Page;
            Game.Features.Flowers[] list = null;
            Func<Game.Features.Flowers, uint> select = null;

            if (ranking.RankingType == GenericRanking.RoseFairy)
            {
                list = Game.Features.Flowers.RedRousesTop100;
                select = (flower) => { return flower.RedRoses; };
            }
            else if (ranking.RankingType == GenericRanking.LilyFairy)
            {
                list = Game.Features.Flowers.LiliesTop100;
                select = (chiData) => { return chiData.Lilies; };
            }
            else if (ranking.RankingType == GenericRanking.OrchidFairy)
            {
                list = Game.Features.Flowers.OrchidsTop100;
                select = (chiData) => { return chiData.Orchads; };
            }
            else if (ranking.RankingType == GenericRanking.TulipFairy)
            {
                list = Game.Features.Flowers.TulipsTop100;
                select = (chiData) => { return chiData.Tulips; };
            }

            else if (ranking.RankingType == GenericRanking.Kiss)
            {
                list = Game.Features.Flowers.KissTop100;
                select = (flower) => { return flower.RedRoses; };
            }
            else if (ranking.RankingType == GenericRanking.Love)
            {
                list = Game.Features.Flowers.LoveTop100;
                select = (chiData) => { return chiData.Lilies; };
            }
            else if (ranking.RankingType == GenericRanking.Tins)
            {
                list = Game.Features.Flowers.TineTop100;
                select = (chiData) => { return chiData.Orchads; };
            }
            else if (ranking.RankingType == GenericRanking.Jade)
            {
                list = Game.Features.Flowers.JadeTop100;
                select = (chiData) => { return chiData.Tulips; };
            }

            if (list.Length < page * 10) return;
            uint count = (uint)Math.Min(list.Length - page * 10, 10);
          //  var nRanking = new GenericRanking(true, count);
            var nRanking = new GenericRanking(true);
            nRanking.Mode = GenericRanking.Ranking;
            nRanking.RankingType = ranking.RankingType;
            nRanking.Page = page;
            nRanking.RegisteredCount = (ushort)list.Length;
            int rank = (int)page * 10;
            for (int i = rank; i < rank + count; i++)
            {
                var current = list[i];
                nRanking.Append((uint)(i + 1), (uint)select(current), current.UID, current.Name);
            }
            client.Send(nRanking);
        }
        public static void ShowGenericRanking(GenericRanking ranking, GameClient client)
        {
            ushort page = ranking.Page;
            Database.ChiTable.ChiData[] list = null;
            Func<Database.ChiTable.ChiData, int> select = null;

            if (ranking.RankingType == GenericRanking.DragonChi)
            {
                list = Database.ChiTable.Dragon;
                select = (chiData) => { return chiData.DragonPoints; };
            }
            else if (ranking.RankingType == GenericRanking.PhoenixChi)
            {
                list = Database.ChiTable.Phoenix;
                select = (chiData) => { return chiData.PhoenixPoints; };
            }
            else if (ranking.RankingType == GenericRanking.TigerChi)
            {
                list = Database.ChiTable.Tiger;
                select = (chiData) => { return chiData.TigerPoints; };
            }
            else if (ranking.RankingType == GenericRanking.TurtleChi)
            {
                list = Database.ChiTable.Turtle;
                select = (chiData) => { return chiData.TurtlePoints; };
            }
            if (list.Length < page * 10) return;
            uint count = (uint)Math.Min(list.Length - page * 10, 10);
           // var nRanking = new GenericRanking(true, count);
            var nRanking = new GenericRanking(true);
            nRanking.Mode = GenericRanking.Ranking;
            nRanking.RankingType = ranking.RankingType;
            nRanking.Page = page;
            nRanking.RegisteredCount = (ushort)list.Length;
            int rank = (int)page * 10;
            for (int i = rank; i < rank + count; i++)
            {
                var current = list[i];
                nRanking.Append((uint)(i + 1), (uint)select(current), current.UID, current.Name);
            }
            client.Send(nRanking);
        }
        private static void UnlockChi(Chi chi, GameClient client)
        {
            if (chi.Mode == Game.Enums.ChiPowerType.Dragon)
                if (client.Entity.Level < 110)
                    return;
            if (chi.Mode == Game.Enums.ChiPowerType.Phoenix)
                if (client.Entity.Level < 110 || client.Entity.Reborn < 1 || client.ChiPowers.Count <= 0)
                    return;
                else if (client.ChiPowers[0].Points < 300)
                    return;
            if (chi.Mode == Game.Enums.ChiPowerType.Tiger)
                if (client.Entity.Level < 110 || client.Entity.Reborn < 2 || client.ChiPowers.Count <= 1)
                    return;
                else if (client.ChiPowers[1].Points < 300)
                    return;
            if (chi.Mode == Game.Enums.ChiPowerType.Turtle)
                if (client.Entity.Level < 110 || client.Entity.Reborn != 2 || client.ChiPowers.Count <= 2)
                    return;
                else if (client.ChiPowers[2].Points < 300)
                    return;

            if (client.ChiPoints >= 300)
            {
                foreach (var power in client.ChiPowers)
                    if (power.Power == chi.Mode)
                        return;
                client.ChiPoints -= 300;
                client.ChiPowers.Add(new Game.ConquerStructures.ChiPowerStructure(chi.Mode));
                client.Send(new ChiPowers(true).Query(client));
                Database.ChiTable.Save(client);
            }
        }
        private static Game.Enums.ChiAttribute RandomChi()
        {
            return (Game.Enums.ChiAttribute)Kernel.Random.Next(1, 14);
        }
        private static ushort ChiValue(Game.Enums.ChiAttribute attribute)
        {
            ushort value = 0;
            int max = Game.Enums.ChiMaxValues(attribute),
                min = Game.Enums.ChiMinValues(attribute);
            value = (ushort)Kernel.Random.Next(min, max);
            while (100 * value / max >= 70 && Kernel.Rate(60) || 100 * value / max >= 90 && Kernel.Rate(95))
            {
                value = (ushort)Kernel.Random.Next(min, max);
            }
            return value;
        }
        private static bool CanKeepChiPower(Game.ConquerStructures.ChiPowerStructure strct, int attribute)
        {
#if NOTMULTIPLECHIPOWERS
            var attr = strct.Attributes;
            var att = attr[attribute];
            for (int i = 0; i < attr.Length; i++)
                if (i != attribute)
                    if (attr[i].Type == att.Type)
                        return false;
#endif
            return true;
        }
        private static void StudyChi(Chi chi, GameClient client)
        {
            if (client.ChiPowers.Count >= (int)chi.Mode)
            {
                var powers = client.ChiPowers[(int)chi.Mode - 1];
                var attributes = powers.Attributes;
                uint cost = 50;
                if ((chi.dwParam & 0x1) == 0x1) cost += 50;
                if ((chi.dwParam & 0x2) == 0x2) cost += 50;
                if ((chi.dwParam & 0x4) == 0x4) cost += 50;
                if (client.ChiPoints >= cost)
                {
                    if ((chi.dwParam & 0x1) != 0x1)
                    {
                        do
                        {
                            attributes[0].Type = RandomChi();
                        } while (!CanKeepChiPower(powers, 0));
                        attributes[0].Value = ChiValue(attributes[0].Type);
                        if (100 * attributes[0].Value / Game.Enums.ChiMaxValues(attributes[0].Type) >= 90)
                        {
                            foreach (var ccclient in Kernel.GamePool.Values)
                                ccclient.Send(new Message(client.Entity.Name + " got a good effect of " + chi.Mode + " (" + attributes[0].Type + "+" + attributes[0].Value + "), while studying.", Color.Red, 2024));
                        }
                    }
                    if ((chi.dwParam & 0x2) != 0x2)
                    {
                        do
                        {
                            attributes[1].Type = RandomChi();
                        } while (!CanKeepChiPower(powers, 1));
                        attributes[1].Value = ChiValue(attributes[1].Type);
                        if (100 * attributes[1].Value / Game.Enums.ChiMaxValues(attributes[1].Type) >= 90)
                        {
                            foreach (var ccclient in Kernel.GamePool.Values)
                                ccclient.Send(new Message(client.Entity.Name + " got a good effect of " + chi.Mode + " (" + attributes[1].Type + "+" + attributes[1].Value + "), while studying.", Color.Red, 2024));
                        }
                    }
                    if ((chi.dwParam & 0x4) != 0x4)
                    {
                        do
                        {
                            attributes[2].Type = RandomChi();
                        } while (!CanKeepChiPower(powers, 2));
                        powers.Attributes[2].Value = ChiValue(attributes[2].Type);
                        if (100 * attributes[2].Value / Game.Enums.ChiMaxValues(attributes[2].Type) >= 90)
                        {
                            foreach (var ccclient in Kernel.GamePool.Values)
                                ccclient.Send(new Message(client.Entity.Name + " got a good effect of " + chi.Mode + " (" + attributes[2].Type + "+" + powers.Attributes[2].Value + "), while studying.", Color.Red, 2024));
                        }
                    }
                    if ((chi.dwParam & 0x8) != 0x8)
                    {
                        do
                        {
                            attributes[3].Type = RandomChi();
                        } while (!CanKeepChiPower(powers, 3));
                        powers.Attributes[3].Value = ChiValue(attributes[3].Type);
                        if (100 * attributes[3].Value / Game.Enums.ChiMaxValues(attributes[3].Type) >= 90)
                        {
                            foreach (var ccclient in Kernel.GamePool.Values)
                                ccclient.Send(new Message(client.Entity.Name + " got a good effect of " + chi.Mode + " (" + attributes[3].Type + "+" + powers.Attributes[3].Value + "), while studying.", Color.Red, 2024));
                        }
                    }
                    powers.CalculatePoints();
                    powers.Power = chi.Mode;
                    client.Send(new ChiPowers(true).Query(client));
                    client.ChiPoints -= cost;
                    Database.ChiTable.Save(client);
                    client.LoadItemStats();
                    client.Entity.ChiStudyTimes++;
                    client.Activenes.SendSinglePacket(client, Activeness.Types.ChiTask, (byte)client.Entity.ChiStudyTimes);
                }
            }
            if (client.ChiData.DragonPoints == 400 && client.ChiData.PhoenixPoints == 400 && client.ChiData.TigerPoints == 400 && client.ChiData.TurtlePoints == 400)
            {
                new TitleStorage().AddTitle(client, 2018, 1, false);
            }
            Database.ChiTable.Sort();
            foreach (var player in Kernel.GamePool.Values)
            {
                if (player != null)
                {
                    if (player.ChiData != null && player.ChiPowers.Count != 0)
                    {
                        Network.PacketHandler.SendChiRankings
                            (new GenericRanking(true) { Mode = GenericRanking.QueryCount }, player);
                    }
                }
            }
        }
        private static void BuyStrengthChi(Chi chi, GameClient client)
        {
            uint cost = 4000 - client.ChiPoints;
            cost /= 4;
            if (client.Entity.ConquerPoints >= cost)
            {
                client.Entity.ConquerPoints -= cost;
                client.ChiPoints = 4000;
                client.ChampionPoints += 100;
                client.Send(new ChiPowers(true).Query(client));
            }
        }
        public static void BuyStrengthChi2(Chi chi, Client.GameClient client)
        {
            uint cost = 200 - client.ChiPoints;
            cost /= 2;
            cost *= 1;
            if (client.Entity.ConquerPoints >= cost)
            {
                client.Entity.ConquerPoints -= cost;
                client.ChiPoints = 200;
                client.Send(new ChiPowers(true).Query(client));
                Database.ChiTable.Save(client);
            }
        }
        #endregion
        static void LevelUpSpell(Data generalData, Client.GameClient client)
        {

            ushort spellID = (ushort)generalData.dwParam;
            Interfaces.ISkill spell = null;
            if (client.Spells.TryGetValue(spellID, out spell))
            {
                var spellInfo = Database.SpellTable.GetSpell(spellID, client);
                if (spellInfo != null)
                {
                    if (spellInfo.CPCost != 0)
                    {
                        if (client.Trade.InTrade)
                            return;
                        if (client.Trade.InTrade) return;
                        uint cpCost = spellInfo.CPCost;
                        int max = Math.Max((int)spell.Experience, 1);
                        int percentage = 100 - (int)(max / Math.Max((spellInfo.NeedExperience / 100), 1));
                        cpCost = (uint)(cpCost * percentage / 100);
                        if (client.Entity.ConquerPoints >= cpCost)
                        {
                            client.Entity.ConquerPoints -= cpCost;
                            spell.Level++;
                            if (spell.Level == spell.PreviousLevel / 2)
                                spell.Level = spell.PreviousLevel;
                            spell.Experience = 0;
                            spell.Send(client);
                            client.Send(new Message("Sucessfully upgraded the skill level by CPs!", Color.Red, Message.System));
                        }
                    }
                }
            }
        }
        static void LevelUpProficiency(Data generalData, Client.GameClient client)
        {
            ushort proficiencyID = (ushort)generalData.dwParam;
            Interfaces.IProf proficiency = null;
            if (client.Proficiencies.TryGetValue(proficiencyID, out proficiency))
            {
                if (proficiency.Level != 20)
                {
                    if (client.Trade.InTrade)
                        return;
                    uint cpCost = 0;
                    #region Costs
                    switch (proficiency.Level)
                    {
                        case 1: cpCost = 100; break;
                        case 2: cpCost = 120; break;
                        case 3: cpCost = 140; break;
                        case 4: cpCost = 160; break;
                        case 5: cpCost = 180; break;
                        case 6: cpCost = 200; break;
                        case 7: cpCost = 220; break;
                        case 8: cpCost = 240; break;
                        case 9: cpCost = 260; break;
                        case 10: cpCost = 280; break;
                        case 11: cpCost = 300; break;
                        case 12: cpCost = 320; break;
                        case 13: cpCost = 340; break;
                        case 14: cpCost = 360; break;
                        case 15: cpCost = 380; break;
                        case 16: cpCost = 400; break;
                        case 17: cpCost = 800; break;
                        case 18: cpCost = 1000; break;
                        case 19: cpCost = 2000; break;
                    }
                    #endregion
                    uint needExperience = Database.DataHolder.ProficiencyLevelExperience(proficiency.Level);
                    int max = Math.Max((int)proficiency.Experience, 1);
                    int percentage = 100 - (int)(max / (needExperience / 100));
                    cpCost = (uint)(cpCost * percentage / 100);
                    if (client.Entity.ConquerPoints >= cpCost)
                    {
                        client.Entity.ConquerPoints -= cpCost;
                        proficiency.Level++;
                        if (proficiency.Level == proficiency.PreviousLevel / 2)
                        {
                            proficiency.Level = proficiency.PreviousLevel;
                            Database.DataHolder.ProficiencyLevelExperience((byte)(proficiency.Level + 1));
                        }
                        proficiency.Experience = 0;
                        proficiency.Send(client);
                    }
                }
            }
        }
        #region Guild Arsenal
        public static int ArsenalPosition(uint ID)
        {
            ushort pos = ItemPosition(ID);
            switch (pos)
            {
                case ConquerItem.Head:
                    return 0;
                case ConquerItem.Armor:
                    return 1;
                case ConquerItem.LeftWeapon:
                case ConquerItem.RightWeapon:
                    return 2;
                case ConquerItem.Ring:
                    return 3;
                case ConquerItem.Boots:
                    return 4;
                case ConquerItem.Necklace:
                    return 5;
                case ConquerItem.Fan:
                    return 6;
                case ConquerItem.Tower:
                    return 7;
                default:
                    return -1;
            }
        }
        static void ViewArsenalPage(ArsenalView view, Client.GameClient client)
        {
            if (client.Entity.GuildID == 0 || client.Guild == null) return;
            if (client.Guild.Arsenals.Length < view.ArsenalType) return;
            var Arsenal = client.Guild.Arsenals[view.ArsenalType];
            if (Arsenal.Unlocked)
            {
                uint beginAt = view.BeginAt - 1;
                uint length = (uint)Arsenal.OrderedList.Count;
                length -= beginAt;
                length = Math.Min(length, 8);
                view = new ArsenalView(true, length);
                view.BeginAt = beginAt + 1;
                for (int i = (int)beginAt; i < beginAt + length; i++)
                    view.AppendItem(Arsenal.OrderedList[i]);
                view.EndAt = length + view.BeginAt - 1;
                view.ArsenalType = (uint)(Arsenal.Position - 1);
                view.Count = length;
                view.Donation = Arsenal.Donation;
                view.Enchantment = Arsenal.Enhancement;
                view.EnchantmentExpirationDate = Arsenal.EnhancementExpirationDate();
                view.SharedBattlepower = Arsenal.SharedBattlePower;
                view.TotalInscribed = Arsenal.OrderedList.Count;
                client.Send(view);
            }
        }
        static void InscribeArsenalItem(ArsenalCommand command, Client.GameClient client)
        {
            ConquerItem item = null;
            if (client.Inventory.TryGetItem(command.dwParam2, out item))
            {
                int arsenalRealPosition = ArsenalPosition(item.ID);
                if ((item.ID % 10) >= 8 && arsenalRealPosition == command.dwParam && !item.Inscribed)
                {
                    if (client.Entity.GuildID != 0 && client.Guild != null && client.Guild.Arsenals[command.dwParam].Unlocked)
                    {
                        item.Inscribed = true;
                        item.Mode = Game.Enums.ItemMode.Update;
                        item.Send(client);
                        var Arsenal = client.Guild.Arsenals[command.dwParam];
                        Arsenal.AddItem(item, client);
                        client.Guild.SaveArsenal();
                    }
                }
            }
        }
        static void UninscribeArsenalItem(ArsenalCommand command, Client.GameClient client)
        {
            if (client.Entity.GuildID != 0 && client.Guild != null)
            {
                var Arsenal = client.Guild.Arsenals[command.dwParam];
                if (Arsenal.Unlocked)
                {
                    if (Arsenal.ItemDictionary.ContainsKey(command.dwParam2))
                    {
                        var item = Arsenal.ItemDictionary[command.dwParam2];
                        if (item.OwnerUID == client.Entity.UID)
                        {
                            ConquerItem Item = null;
                            #region Find the item
                            if (!client.Inventory.TryGetItem(item.UID, out Item))
                            {
                                bool found = false;
                                foreach (var eqItem in client.Equipment.Objects)
                                    if (eqItem != null)
                                        if (eqItem.UID == item.UID)
                                        { Item = eqItem; found = true; break; }
                                if (!found)
                                {
                                    foreach (var wh in client.Warehouses.Values)
                                        foreach (var eqItem in wh.Objects)
                                            if (eqItem != null)
                                                if (eqItem.UID == item.UID)
                                                { Item = eqItem; break; }
                                }
                            }
                            #endregion
                            if (Item != null)
                            {
                                Item.Inscribed = false;
                                if (Item.Warehouse == 0)
                                {
                                    Item.Mode = Game.Enums.ItemMode.Update;
                                    Item.Send(client);
                                }
                                Arsenal.RemoveItem(item, client);
                                client.Guild.ArsenalBPChanged = true;
                                client.Guild.GetMaxSharedBattlepower();
                                client.Guild.SaveArsenal();
                            }
                        }
                    }
                }
            }
        }
        static void UnlockArsenal(ArsenalCommand command, Client.GameClient client)
        {
            if (client.Entity.GuildID == 0) return;
            var Guild = client.Guild;
            if (Guild == null) return;
            if (Guild.Arsenals[command.dwParam].Unlocked)
            {
                client.Send(new Message("This arsenal was already unlocked!", System.Drawing.Color.Red, Message.Talk));
                return;
            }
            uint cost = Guild.GetCurrentArsenalCost();
            if (Guild.SilverFund >= cost)
            {
                Guild.SilverFund -= cost;
                Guild.Arsenals[command.dwParam].Unlocked = true;
                Guild.SendGuild(client);

                Guild.ArsenalBPChanged = true;
                Guild.GetMaxSharedBattlepower();
                client.Guild.SaveArsenal();
            }
            else
            {
                client.Send(new Message("Your guild doesn't have enough funds!", System.Drawing.Color.Red, Message.Talk));
            }
        }
        static void ViewGuildArsenal(Client.GameClient client)
        {
            if (client.Entity.GuildID == 0) return;
            if (client.Guild == null) return;
            ArsenalTab view = new ArsenalTab(true);
            view.SharedBattlepower = (uint)client.Guild.GetMaxSharedBattlepower();
            view.ArsenalCount = 8;
            foreach (var arsenal in client.Guild.Arsenals)
                view.AppendArsenal(arsenal);
            view.HeroDonation = client.GetArsenalDonation();
            view.HeroSharedBattlepower = client.Entity.GuildBattlePower;
            client.Send(view);
        }
        public static void UninscribeItem(ConquerItem item, Client.GameClient client)
        {
            if (client.Entity.GuildID == 0 || client.Guild == null) return;
            int arsenalPosition = ArsenalPosition(item.ID);
            client.Guild.Arsenals[arsenalPosition].RemoveItem(item, client);
            item.Inscribed = false;
            item.Mode = Game.Enums.ItemMode.Update;
            item.Send(client);
            //Save is done other else.
        }
        public static void UninscribeAllItems(Client.GameClient client)
        {
            foreach (var item in client.Inventory.Objects)
                if (item.Inscribed)
                    UninscribeItem(item, client);
            foreach (var item in client.Equipment.Objects)
                if (item != null)
                    if (item.Inscribed)
                        UninscribeItem(item, client);
            foreach (var wh in client.Warehouses.Values)
                foreach (var item in wh.Objects)
                    if (item.Inscribed)
                        UninscribeItem(item, client);

            client.Guild.ArsenalBPChanged = true;
            client.Guild.GetMaxSharedBattlepower();
            client.Guild.SaveArsenal();
        }
        public static void EnchantArsenal(ArsenalCommand command, Client.GameClient client)
        {
            if (client.Entity.GuildID == 0 || client.Guild == null) return;
            var guild = client.Guild;
            var arsenal = guild.Arsenals[command.dwParam];
            if (!arsenal.Unlocked) return;
            if (arsenal.SharedBattlePower == 3) return;
            uint cost = 20000000 + command.dwParam3 * 40000000;
            if (guild.SilverFund >= cost)
            {
                guild.SilverFund -= cost;
                arsenal.Enhancement = command.dwParam3;
                arsenal.EnhancementExpDate = DateTime.Now.AddDays(30);

                guild.ArsenalBPChanged = true;
                guild.GetMaxSharedBattlepower();
                client.Guild.SaveArsenal();
            }
        }
        #endregion
        #region Reincarnation
        public static void ReincarnationHash(Client.GameClient client)
        {
            if (Kernel.ReincarnatedCharacters.ContainsKey(client.Entity.UID))
            {
                if (client.Entity.Level >= 110 && client.Entity.Reborn == 2)
                {
                    ushort stats = 0;
                    uint lev1 = client.Entity.Level;
                    Game.Features.Reincarnation.ReincarnateInfo info = Kernel.ReincarnatedCharacters[client.Entity.UID];
                    client.Entity.Level = info.Level;
                    client.Entity.Experience = info.Experience;
                    Kernel.ReincarnatedCharacters.Remove(info.UID);
                    Database.ReincarnationTable.RemoveReincarnated(client.Entity);
                    stats = (ushort)(((client.Entity.Level - lev1) * 3) - 3);
                    client.Entity.Atributes += stats;
                }
            }
        }
        public static void Reincarnation(Client.GameClient client, byte new_class)
        {
            if (client.Entity.Level < 120)
                return;
            if (Kernel.ReincarnatedCharacters.ContainsKey(client.Entity.UID))
                return;
            Database.ReincarnationTable.NewReincarnated(client.Entity);
            Game.Features.Reincarnation.ReincarnateInfo info = new Game.Features.Reincarnation.ReincarnateInfo();
            info.UID = client.Entity.UID;
            info.Level = client.Entity.Level;
            info.Experience = client.Entity.Experience;
            Kernel.ReincarnatedCharacters.Add(info.UID, info);
            client.Entity.FirstRebornClass = client.Entity.SecondRebornClass;
            client.Entity.SecondRebornClass = client.Entity.Class;
            client.Entity.Class = new_class;
            client.Entity.SecondRebornLevel = client.Entity.Level;
            //client.Entity.ReincarnationLev = client.Entity.Level;//kikoz
            client.Entity.Level = 15;
            client.Entity.Experience = 0;
            client.Entity.Atributes =
                (ushort)
                    (client.ExtraAtributePoints(client.Entity.FirstRebornClass, client.Entity.FirstRebornLevel) +
                     client.ExtraAtributePoints(client.Entity.SecondRebornClass, client.Entity.SecondRebornLevel) +
                     62);

            #region RemoveAllSpells

            Interfaces.ISkill[] spells = client.Spells.Values.ToArray();
            foreach (Interfaces.ISkill spell in spells)
            {
                if (!Constants.AvaibleSpells.Contains(spell.ID))
                {
                    client.RemoveSpell(spell);
                    Database.SkillTable.DeleteSpell(client, spell.ID);
                }
            }
            client.Spells.Clear();
            Database.SkillTable.removeAllSkills(client);
            client.Proficiencies.Clear();
            Database.SkillTable.removeAllProfs(client);

            #region Archer2
            #region Arch-Arch

            if (client.Entity.FirstRebornClass == 45 && client.Entity.SecondRebornClass == 45)
            {
                if (client.Entity.Class == 41)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 10313 }); //Star Arrow
                    client.AddSpell(new Spell(true) { ID = 5000 }); //Freezing Arrows
                }
                else
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 5000 }); //Freezing Arrows
                    client.AddSpell(new Spell(true) { ID = 5002 }); //Poisonous Arrows
                }
            }
            #endregion
            #region Arch-Fire

            else if (client.Entity.FirstRebornClass == 45 && client.Entity.SecondRebornClass == 145)
            {
                if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 41 ||
                    client.Entity.Class == 71 || client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1000 }); //Thunder
                    client.AddSpell(new Spell(true) { ID = 1001 }); //Fire
                    client.AddSpell(new Spell(true) { ID = 1005 }); //Cure
                    client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                    client.AddSpell(new Spell(true) { ID = 5002 }); //Poisonous Arrows
                }
                else if (client.Entity.Class == 51 || client.Entity.Class == 61)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1000 }); //Thunder
                    client.AddSpell(new Spell(true) { ID = 1001 }); //Fire
                    client.AddSpell(new Spell(true) { ID = 1005 }); //Cure
                    client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                    client.AddSpell(new Spell(true) { ID = 10010 }); //Poison
                }
                else if (client.Entity.Class == 132)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 5002 }); //Poisonous Arrows
                    client.AddSpell(new Spell(true) { ID = 1120 }); //FireCircle
                }
                else if (client.Entity.Class == 142)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 5002 }); //Poisonous Arrows
                    client.AddSpell(new Spell(true) { ID = 3080 }); //Dodge
                }
            }

            #endregion
            #region Arch-Tro

            if (client.Entity.FirstRebornClass == 45 && client.Entity.SecondRebornClass == 15)
            {
                if (client.Entity.Class == 41 || client.Entity.Class == 132 || client.Entity.Class == 142 ||
                    client.Entity.Class == 51 || client.Entity.Class == 61 || client.Entity.Class == 71 ||
                    client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 5002 }); //Poisonous Arrows
                    client.AddSpell(new Spell(true) { ID = 1110 }); //Cyclone
                    client.AddSpell(new Spell(true) { ID = 1190 }); //SpiritHealing
                    client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
                }
                else if (client.Entity.Class == 11)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 3050 }); //CruelShade
                    client.AddSpell(new Spell(true) { ID = 5002 }); //Poisonous Arrows
                }
                else if (client.Entity.Class == 21)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 5002 }); //Poisonous Arrows
                    client.AddSpell(new Spell(true) { ID = 1110 }); //Cyclone
                    client.AddSpell(new Spell(true) { ID = 1190 }); //SpiritHealing
                    client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
                    client.AddSpell(new Spell(true) { ID = 5100 }); //Iron Shirt
                }
            }

            #endregion
            #region Arch-War

            if (client.Entity.FirstRebornClass == 45 && client.Entity.SecondRebornClass == 25)
            {
                if (client.Entity.Class == 142 || client.Entity.Class == 41)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 5002 }); //Poisonous Arrows
                    client.AddSpell(new Spell(true) { ID = 1020 }); //Shield
                    client.AddSpell(new Spell(true) { ID = 1040 }); //Roar
                    client.AddSpell(new Spell(true) { ID = 3060 }); //Reflect
                }
                else if (client.Entity.Class == 11 || client.Entity.Class == 51 || client.Entity.Class == 61 ||
                         client.Entity.Class == 71 || client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 5002 }); //Poisonous Arrows
                    client.AddSpell(new Spell(true) { ID = 1015 }); //Accuracy
                    client.AddSpell(new Spell(true) { ID = 1040 }); //Roar
                    client.AddSpell(new Spell(true) { ID = 3060 }); //Reflect
                    client.AddSpell(new Spell(true) { ID = 1320 }); //FlyingMoon
                }
                else if (client.Entity.Class == 51)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 5002 }); //Poisonous Arrows
                    client.AddSpell(new Spell(true) { ID = 3060 }); //Reflect
                }
                else if (client.Entity.Class == 21)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 5002 }); //Poisonous Arrows
                    client.AddSpell(new Spell(true) { ID = 3060 }); //Reflect
                }
                else if (client.Entity.Class == 132)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 5002 }); //Poisonous Arrows
                    client.AddSpell(new Spell(true) { ID = 1020 }); //Shield
                    client.AddSpell(new Spell(true) { ID = 1040 }); //Roar
                    client.AddSpell(new Spell(true) { ID = 3060 }); //Reflect
                    client.AddSpell(new Spell(true) { ID = 1025 }); //SuperMan
                }
            }

            #endregion
            #region Arch-Water

            if (client.Entity.FirstRebornClass == 45 && client.Entity.SecondRebornClass == 135)
            {
                if (client.Entity.Class == 41)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1005 }); //Cure
                    client.AddSpell(new Spell(true) { ID = 1090 }); //MagicShield
                    client.AddSpell(new Spell(true) { ID = 1095 }); //Stigma
                    client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                    client.AddSpell(new Spell(true) { ID = 5002 }); //Poisonous Arrows
                    client.AddSpell(new Spell(true) { ID = 1280 }); //WaterElf
                    client.AddSpell(new Spell(true) { ID = 1350 }); //DivineHare
                }
                else if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 61)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1005 }); //Cure
                    client.AddSpell(new Spell(true) { ID = 1085 }); //StarOfAccuracy
                    client.AddSpell(new Spell(true) { ID = 1090 }); //MagicShield
                    client.AddSpell(new Spell(true) { ID = 1095 }); //Stigma
                    client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                    client.AddSpell(new Spell(true) { ID = 5002 }); //Poisonous Arrows
                    client.AddSpell(new Spell(true) { ID = 1280 }); //WaterElf
                    client.AddSpell(new Spell(true) { ID = 1350 }); //DivineHare
                }
                else if (client.Entity.Class == 142)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1050 }); //XPRevive
                    client.AddSpell(new Spell(true) { ID = 5002 }); //Poisonous Arrows
                    client.AddSpell(new Spell(true) { ID = 1055 }); //HealingRain 
                    client.AddSpell(new Spell(true) { ID = 1175 }); //AdvancedCure
                    client.AddSpell(new Spell(true) { ID = 1280 }); //WaterElf
                    client.AddSpell(new Spell(true) { ID = 1350 }); //DivineHare
                }
                else if (client.Entity.Class == 132)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 5002 }); //Poisonous Arrows
                    client.AddSpell(new Spell(true) { ID = 1280 }); //WaterElf
                    client.AddSpell(new Spell(true) { ID = 1350 }); //DivineHare
                    client.AddSpell(new Spell(true) { ID = 3090 }); //Pervade
                }
                else if (client.Entity.Class == 51)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 10010 }); //Poison
                    client.AddSpell(new Spell(true) { ID = 1005 }); //Cure
                    client.AddSpell(new Spell(true) { ID = 1085 }); //StarOfAccuracy
                    client.AddSpell(new Spell(true) { ID = 1090 }); //MagicShield
                    client.AddSpell(new Spell(true) { ID = 1095 }); //Stigma
                    client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                }
                else if (client.Entity.Class == 71 || client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 5002 }); //Poisonous Arrows
                    client.AddSpell(new Spell(true) { ID = 1005 }); //Cure
                    client.AddSpell(new Spell(true) { ID = 1085 }); //StarOfAccuracy
                    client.AddSpell(new Spell(true) { ID = 1090 }); //MagicShield
                    client.AddSpell(new Spell(true) { ID = 1095 }); //Stigma
                    client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                }
            }

            #endregion
            #region Arch-Nin

            if (client.Entity.FirstRebornClass == 45 && client.Entity.SecondRebornClass == 55)
            {
                if (client.Entity.Class == 41)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 6001 }); //ToxicFog
                }
                else if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 132 ||
                         client.Entity.Class == 142 || client.Entity.Class == 61 || client.Entity.Class == 71 ||
                    client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 5002 }); //Poisonous Arrows
                    client.AddSpell(new Spell(true) { ID = 6001 }); //ToxicFog
                }
                else if (client.Entity.Class == 51)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 5002 }); //Poisonous Arrows
                    client.AddSpell(new Spell(true) { ID = 6000 }); //TwofoldBlades
                    client.AddSpell(new Spell(true) { ID = 6001 }); //ToxicFog
                    client.AddSpell(new Spell(true) { ID = 6002 }); //PoisonStar
                    client.AddSpell(new Spell(true) { ID = 6004 }); //ArcherBane
                    client.AddSpell(new Spell(true) { ID = 6011 }); //FatalStrike
                    client.AddSpell(new Spell(true) { ID = 6010 }); //ShurikenVortex
                }
            }

            #endregion
            #region Arch-Monk

            if (client.Entity.FirstRebornClass == 145 && client.Entity.SecondRebornClass == 65)
            {
                if (client.Entity.Class == 21)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 10400 }); //Serenity
                    client.AddSpell(new Spell(true) { ID = 5002 }); //Poisonous Arrows
                    client.AddSpell(new Spell(true) { ID = 1000 }); //Thunder
                    client.AddSpell(new Spell(true) { ID = 1001 }); //Fire
                    client.AddSpell(new Spell(true) { ID = 1005 }); //Cure
                }
                else if (client.Entity.Class == 11 || client.Entity.Class == 41 || client.Entity.Class == 132 ||
                         client.Entity.Class == 142 || client.Entity.Class == 51 || client.Entity.Class == 61 ||
                         client.Entity.Class == 71 || client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 5002 }); //Poisonous Arrows
                    client.AddSpell(new Spell(true) { ID = 10400 }); //Serenity
                }
            }

            #endregion
            #region Arch-Pirate

            if (client.Entity.FirstRebornClass == 145 && client.Entity.SecondRebornClass == 75)
            {
                if (client.Entity.Class == 132 || client.Entity.Class == 142 || client.Entity.Class == 41)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 11070 }); //Gale Bomb
                }
                else if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 51 ||
                         client.Entity.Class == 61 || client.Entity.Class == 71 || client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 11070 }); //Gale Bomb
                    client.AddSpell(new Spell(true) { ID = 5002 }); //Poisonous Arrows
                }
            }

            #endregion
            #region Arch-KungFu

            if (client.Entity.FirstRebornClass == 145 && client.Entity.SecondRebornClass == 85)
            {
                if (client.Entity.Class == 132 || client.Entity.Class == 142 || client.Entity.Class == 41)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                }
                else if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 51 ||
                         client.Entity.Class == 61 || client.Entity.Class == 71 || client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 5002 }); //Poisonous Arrows
                }
            }

            #endregion
            #endregion
            #region Trojan2
            #region Tro-Arch

            if (client.Entity.FirstRebornClass == 15 && client.Entity.SecondRebornClass == 45)
            {
                if (client.Entity.Class == 41)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1190 }); //SpiritHealing
                    client.AddSpell(new Spell(true) { ID = 1110 }); //Cyclone
                    client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
                    client.AddSpell(new Spell(true) { ID = 5000 }); //Freezing Arrows
                }
                else if (client.Entity.Class == 71 || client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1190 }); //SpiritHealing
                    client.AddSpell(new Spell(true) { ID = 1110 }); //Cyclone
                    client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
                }
                else
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1190 }); //SpiritHealing
                    client.AddSpell(new Spell(true) { ID = 1110 }); //Cyclone
                    client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
                    client.AddSpell(new Spell(true) { ID = 5002 }); //Poisonous Arrows
                }
            }

            #endregion
            #region Tro-Fire

            if (client.Entity.FirstRebornClass == 15 && client.Entity.SecondRebornClass == 145)
            {
                if (client.Entity.Class == 41 || client.Entity.Class == 51 || client.Entity.Class == 61 ||
                    client.Entity.Class == 71 || client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1190 }); //SpiritHealing
                    client.AddSpell(new Spell(true) { ID = 1110 }); //Cyclone
                    client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
                    client.AddSpell(new Spell(true) { ID = 1000 }); //Thunder
                    client.AddSpell(new Spell(true) { ID = 1001 }); //Fire
                    client.AddSpell(new Spell(true) { ID = 1005 }); //Cure
                    client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                }
                else if (client.Entity.Class == 11 || client.Entity.Class == 21)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
                    client.AddSpell(new Spell(true) { ID = 1000 }); //Thunder
                    client.AddSpell(new Spell(true) { ID = 1001 }); //Fire
                    client.AddSpell(new Spell(true) { ID = 1005 }); //Cure
                    client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                }
                else if (client.Entity.Class == 142)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 3080 }); //Dodge
                    client.AddSpell(new Spell(true) { ID = 1190 }); //SpiritHealing
                    client.AddSpell(new Spell(true) { ID = 1110 }); //Cyclone
                    client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
                }
                else if (client.Entity.Class == 132)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1190 }); //SpiritHealing
                    client.AddSpell(new Spell(true) { ID = 1110 }); //Cyclone
                    client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
                    client.AddSpell(new Spell(true) { ID = 1120 }); //FireCircle
                }
            }

            #endregion
            #region Tro-Tro

            if (client.Entity.FirstRebornClass == 15 && client.Entity.SecondRebornClass == 15)
            {
                if (client.Entity.Class == 41 || client.Entity.Class == 51 || client.Entity.Class == 61 ||
                    client.Entity.Class == 71 || client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1190 }); //SpiritHealing
                    client.AddSpell(new Spell(true) { ID = 1110 }); //Cyclone
                    client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
                    client.AddSpell(new Spell(true) { ID = 3050 }); //CruelShade
                }
                else if (client.Entity.Class == 142)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1190 }); //SpiritHealing
                    client.AddSpell(new Spell(true) { ID = 1110 }); //Cyclone
                    client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
                    client.AddSpell(new Spell(true) { ID = 3050 }); //CruelShade
                }
                else if (client.Entity.Class == 11)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 3050 }); //Cruel Shade
                    client.AddSpell(new Spell(true) { ID = 10315 }); //DragonWhirl
                }
                else if (client.Entity.Class == 21)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 3050 }); //Cruel Shade
                    client.AddSpell(new Spell(true) { ID = 1110 }); //Cyclone
                    client.AddSpell(new Spell(true) { ID = 1190 }); //SpiritHealing
                    client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
                    client.AddSpell(new Spell(true) { ID = 5100 }); //Iron Shirt
                }
                else if (client.Entity.Class == 132)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 3050 }); //Cruel Shade
                    client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
                    client.AddSpell(new Spell(true) { ID = 1190 }); //Spirit Healing
                    client.AddSpell(new Spell(true) { ID = 1110 }); //Cyclone
                }
            }

            #endregion
            #region Tro-War

            if (client.Entity.FirstRebornClass == 15 && client.Entity.SecondRebornClass == 25)
            {
                if (client.Entity.Class == 41 || client.Entity.Class == 142)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1110 }); //Cyclone
                    client.AddSpell(new Spell(true) { ID = 1190 }); //SpiritHealing
                    client.AddSpell(new Spell(true) { ID = 5100 }); //IronShirt
                    client.AddSpell(new Spell(true) { ID = 1040 }); //Roar
                    client.AddSpell(new Spell(true) { ID = 1020 }); //ShieldShield
                    client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
                    client.AddSpell(new Spell(true) { ID = 3060 }); //Reflect
                }
                else if (client.Entity.Class == 11 || client.Entity.Class == 51 || client.Entity.Class == 61 ||
                         client.Entity.Class == 71 || client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1110 }); //Cyclone
                    client.AddSpell(new Spell(true) { ID = 1190 }); //SpiritHealing
                    client.AddSpell(new Spell(true) { ID = 5100 }); //IronShirt
                    client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
                    client.AddSpell(new Spell(true) { ID = 3060 }); //Reflect
                    client.AddSpell(new Spell(true) { ID = 1040 }); //Roar
                    client.AddSpell(new Spell(true) { ID = 1015 }); //Accuracy
                    client.AddSpell(new Spell(true) { ID = 1320 }); //FlyingMoon
                }
                else if (client.Entity.Class == 21)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1110 }); //Cyclone
                    client.AddSpell(new Spell(true) { ID = 1190 }); //SpiritHealing
                    client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
                    client.AddSpell(new Spell(true) { ID = 3060 }); //Reflect
                }
                else if (client.Entity.Class == 132)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1110 }); //Cyclone
                    client.AddSpell(new Spell(true) { ID = 1190 }); //SpiritHealing
                    client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
                    client.AddSpell(new Spell(true) { ID = 3060 }); //Reflect
                    client.AddSpell(new Spell(true) { ID = 5100 }); //IronShirt
                    client.AddSpell(new Spell(true) { ID = 1040 }); //Roar
                    client.AddSpell(new Spell(true) { ID = 1020 }); //ShieldShield
                    client.AddSpell(new Spell(true) { ID = 1025 }); //SuperMan
                }
            }

            #endregion
            #region Tro-Water

            if (client.Entity.FirstRebornClass == 15 && client.Entity.SecondRebornClass == 135)
            {
                if (client.Entity.Class == 41)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1110 }); //Cyclone
                    client.AddSpell(new Spell(true) { ID = 1190 }); //SpiritHealing
                    client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
                    client.AddSpell(new Spell(true) { ID = 1005 }); //Cure
                    client.AddSpell(new Spell(true) { ID = 1095 }); //Stigma
                    client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                    client.AddSpell(new Spell(true) { ID = 1090 }); //MagicShield
                    client.AddSpell(new Spell(true) { ID = 1075 }); //Invisibility
                }
                else if (client.Entity.Class == 142)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1110 }); //Cyclone
                    client.AddSpell(new Spell(true) { ID = 1190 }); //SpiritHealing
                    client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
                    client.AddSpell(new Spell(true) { ID = 1050 }); //XPRevive
                    client.AddSpell(new Spell(true) { ID = 1175 }); //AdvancedCure
                    client.AddSpell(new Spell(true) { ID = 1075 }); //Invisibility
                }
                else if (client.Entity.Class == 11)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
                    client.AddSpell(new Spell(true) { ID = 1005 }); //Cure
                    client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                    client.AddSpell(new Spell(true) { ID = 1095 }); //Stigma
                    client.AddSpell(new Spell(true) { ID = 1090 }); //MagicShield
                    client.AddSpell(new Spell(true) { ID = 1085 }); //StarOfAccuracy
                }
                else if (client.Entity.Class == 21 || client.Entity.Class == 51 || client.Entity.Class == 71 ||
                    client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1110 }); //Cyclone
                    client.AddSpell(new Spell(true) { ID = 1190 }); //SpiritHealing
                    client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
                    client.AddSpell(new Spell(true) { ID = 1005 }); //Cure
                    client.AddSpell(new Spell(true) { ID = 1085 }); //StarOfAccuracy
                    client.AddSpell(new Spell(true) { ID = 1095 }); //Stigma
                    client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                    client.AddSpell(new Spell(true) { ID = 1090 }); //MagicShield
                }
                else if (client.Entity.Class == 132)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1110 }); //Cyclone
                    client.AddSpell(new Spell(true) { ID = 1190 }); //SpiritHealing
                    client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
                    client.AddSpell(new Spell(true) { ID = 3090 }); //Pervade
                }
                else if (client.Entity.Class == 61)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1110 }); //Cyclone
                    client.AddSpell(new Spell(true) { ID = 1190 }); //SpiritHealing
                    client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
                    client.AddSpell(new Spell(true) { ID = 1005 }); //Cure
                    client.AddSpell(new Spell(true) { ID = 1085 }); //StarOfAccuracy
                    client.AddSpell(new Spell(true) { ID = 1095 }); //Stigma
                    client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                    client.AddSpell(new Spell(true) { ID = 1090 }); //MagicShield
                    client.AddSpell(new Spell(true) { ID = 1350 }); //DivineHare
                    client.AddSpell(new Spell(true) { ID = 1280 }); //Water Elf
                }
            }

            #endregion
            #region Tro-Nin

            if (client.Entity.FirstRebornClass == 15 && client.Entity.SecondRebornClass == 55)
            {
                if (client.Entity.Class == 51)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1110 }); //Cyclone
                    client.AddSpell(new Spell(true) { ID = 1190 }); //SpiritHealing
                    client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
                    client.AddSpell(new Spell(true) { ID = 6000 }); //TwofoldBlades
                    client.AddSpell(new Spell(true) { ID = 6001 }); //ToxicFog
                    client.AddSpell(new Spell(true) { ID = 6002 }); //PoisonStar
                    client.AddSpell(new Spell(true) { ID = 6004 }); //ArcherBane
                    client.AddSpell(new Spell(true) { ID = 6011 }); //FatalStrike
                    client.AddSpell(new Spell(true) { ID = 6010 }); //ShurikenVortex
                }
                else
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1110 }); //Cyclone
                    client.AddSpell(new Spell(true) { ID = 1190 }); //SpiritHealing
                    client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
                    client.AddSpell(new Spell(true) { ID = 6001 }); //ToxicFog
                }
            }

            #endregion
            #region Tro-Monk

            if (client.Entity.FirstRebornClass == 15 && client.Entity.SecondRebornClass == 65)
            {
                client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                client.AddSpell(new Spell(true) { ID = 1110 }); //Cyclone
                client.AddSpell(new Spell(true) { ID = 1190 }); //SpiritHealing
                client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
                client.AddSpell(new Spell(true) { ID = 10400 }); //Serenity
            }

            #endregion
            #region Tro-Pirate

            if (client.Entity.FirstRebornClass == 15 && client.Entity.SecondRebornClass == 75)
            {
                client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                client.AddSpell(new Spell(true) { ID = 1110 }); //Cyclone
                client.AddSpell(new Spell(true) { ID = 1190 }); //SpiritHealing
                client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
                client.AddSpell(new Spell(true) { ID = 11070 }); //Gale Bomb
            }

            #endregion
            #region Tro-KungFu
            if (client.Entity.FirstRebornClass == 15 && client.Entity.SecondRebornClass == 85)
            {
                client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                client.AddSpell(new Spell(true) { ID = 1110 }); //Cyclone
                client.AddSpell(new Spell(true) { ID = 1190 }); //SpiritHealing
                client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
            }
            #endregion
            #endregion
            #region Ninja2
            #region Nin-Arch

            if (client.Entity.FirstRebornClass == 55 && client.Entity.SecondRebornClass == 45)
            {
                if (client.Entity.Class == 41)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 6001 }); //Toxic Fog
                    client.AddSpell(new Spell(true) { ID = 5000 }); //Freezing Arrow
                }
                else if (client.Entity.Class == 51)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 5002 }); //Poisonous Arrows
                }
                else if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 142 ||
                         client.Entity.Class == 132 || client.Entity.Class == 61 || client.Entity.Class == 71 ||
                    client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 6001 }); //Toxic Fog
                    client.AddSpell(new Spell(true) { ID = 5002 }); //Poisonous Arrows
                }
            }

            #endregion
            #region Nin-Fire

            {
                if (client.Entity.FirstRebornClass == 55 && client.Entity.SecondRebornClass == 145)
                {
                    if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 41 ||
                        client.Entity.Class == 51 || client.Entity.Class == 61 || client.Entity.Class == 71 ||
                        client.Entity.Class == 81)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                        client.AddSpell(new Spell(true) { ID = 6001 }); //Toxic Fog
                        client.AddSpell(new Spell(true) { ID = 1000 }); //Thunder
                        client.AddSpell(new Spell(true) { ID = 1001 }); //Fire
                        client.AddSpell(new Spell(true) { ID = 1005 }); //Cure
                        client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                    }
                    else if (client.Entity.Class == 142)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                        client.AddSpell(new Spell(true) { ID = 6001 }); //Toxic Fog
                        client.AddSpell(new Spell(true) { ID = 3080 }); //Dodge
                        client.AddSpell(new Spell(true) { ID = 1000 }); //Thunder
                    }
                    else if (client.Entity.Class == 132)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                        client.AddSpell(new Spell(true) { ID = 1120 }); //FireCircle
                        client.AddSpell(new Spell(true) { ID = 6001 }); //Toxic Fog
                    }
                }
            }

            #endregion
            #region Nin-Tro

            if (client.Entity.FirstRebornClass == 55 && client.Entity.SecondRebornClass == 15)
            {
                if (client.Entity.Class == 41 || client.Entity.Class == 51 || client.Entity.Class == 132 ||
                    client.Entity.Class == 142 || client.Entity.Class == 61 || client.Entity.Class == 71 ||
                    client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1110 }); //Cyclone
                    client.AddSpell(new Spell(true) { ID = 1190 }); //SpiritHealing
                    client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
                    client.AddSpell(new Spell(true) { ID = 6001 }); //Toxic Fog
                }
                else if (client.Entity.Class == 11)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 6001 }); //Toxic Fog
                }
                else if (client.Entity.Class == 21)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1110 }); //Cyclone
                    client.AddSpell(new Spell(true) { ID = 1190 }); //SpiritHealing
                    client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
                    client.AddSpell(new Spell(true) { ID = 6001 }); //Toxic Fog
                    client.AddSpell(new Spell(true) { ID = 5100 }); //IronShirt
                }
            }

            #endregion
            #region Nin-War

            if (client.Entity.FirstRebornClass == 55 && client.Entity.SecondRebornClass == 25)
            {
                if (client.Entity.Class == 41 || client.Entity.Class == 142)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 6001 }); //Toxic Fog
                    client.AddSpell(new Spell(true) { ID = 1020 }); //Shield
                    client.AddSpell(new Spell(true) { ID = 3060 }); //Reflect
                    client.AddSpell(new Spell(true) { ID = 1040 }); //Roar
                }
                else if (client.Entity.Class == 11 || client.Entity.Class == 51 || client.Entity.Class == 61 ||
                         client.Entity.Class == 71 || client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 6001 }); //Toxic Fog
                    client.AddSpell(new Spell(true) { ID = 1015 }); //Accuracy
                    client.AddSpell(new Spell(true) { ID = 3060 }); //Reflect
                    client.AddSpell(new Spell(true) { ID = 1040 }); //Roar
                    client.AddSpell(new Spell(true) { ID = 1320 }); //FlyingMoon
                }
                else if (client.Entity.Class == 21)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 6001 }); //Toxic Fog
                    client.AddSpell(new Spell(true) { ID = 3060 }); //Reflect
                }
                else if (client.Entity.Class == 132)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 6001 }); //Toxic Fog
                    client.AddSpell(new Spell(true) { ID = 1020 }); //ShieldShield
                    client.AddSpell(new Spell(true) { ID = 1025 }); //SuperMan
                    client.AddSpell(new Spell(true) { ID = 3060 }); //Reflect
                    client.AddSpell(new Spell(true) { ID = 1040 }); //Roar
                }
            }

            #endregion
            #region Nin-Water

            if (client.Entity.FirstRebornClass == 55 && client.Entity.SecondRebornClass == 135)
            {
                if (client.Entity.Class == 41)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 6001 }); //Toxic Fog
                    client.AddSpell(new Spell(true) { ID = 1005 }); //Cure
                    client.AddSpell(new Spell(true) { ID = 1095 }); //Stigma
                    client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                    client.AddSpell(new Spell(true) { ID = 1090 }); //MagicShield
                    client.AddSpell(new Spell(true) { ID = 1075 }); //Invisibility
                }
                else if (client.Entity.Class == 142)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 6001 }); //Toxic Fog
                    client.AddSpell(new Spell(true) { ID = 1050 }); //XPRevive
                    client.AddSpell(new Spell(true) { ID = 1175 }); //AdvancedCure
                    client.AddSpell(new Spell(true) { ID = 1075 }); //Invisibility
                    client.AddSpell(new Spell(true) { ID = 1055 }); //HealingRain
                }
                else if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 51 ||
                         client.Entity.Class == 61 || client.Entity.Class == 71 || client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 6001 }); //Toxic Fog
                    client.AddSpell(new Spell(true) { ID = 1005 }); //Cure
                    client.AddSpell(new Spell(true) { ID = 1085 }); //StarOfAccuracy
                    client.AddSpell(new Spell(true) { ID = 1090 }); //MagicShield
                    client.AddSpell(new Spell(true) { ID = 1095 }); //Stigma
                    client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                }
                else if (client.Entity.Class == 132)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 6001 }); //Toxic Fog
                    client.AddSpell(new Spell(true) { ID = 3090 }); //Pervade
                }
            }

            #endregion
            #region Nin-Nin

            if (client.Entity.FirstRebornClass == 55 && client.Entity.SecondRebornClass == 55)
            {
                if (client.Entity.Class == 51)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 6000 }); //TwofoldBlades
                    client.AddSpell(new Spell(true) { ID = 6001 }); //ToxicFog
                    client.AddSpell(new Spell(true) { ID = 6002 }); //PoisonStar
                    client.AddSpell(new Spell(true) { ID = 6003 }); //Counter-Kill
                    client.AddSpell(new Spell(true) { ID = 6004 }); //ArcherBane
                    client.AddSpell(new Spell(true) { ID = 6010 }); //ShurikenVortex
                    client.AddSpell(new Spell(true) { ID = 6011 }); //FatalStrike
                    client.AddSpell(new Spell(true) { ID = 12070 }); //TwilightDance
                    client.AddSpell(new Spell(true) { ID = 12080 }); //SuperTwofoldBlade
                    client.AddSpell(new Spell(true) { ID = 12110 }); //FatalSpin
                }
                else
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 6001 }); //Toxic Fog
                }
            }

            #endregion
            #region Nin-Monk

            if (client.Entity.FirstRebornClass == 55 && client.Entity.SecondRebornClass == 65)
            {
                client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                client.AddSpell(new Spell(true) { ID = 10400 }); //Serenity
                client.AddSpell(new Spell(true) { ID = 6001 }); //ToxicFog
            }

            #endregion
            #region Nin-Pirate

            if (client.Entity.FirstRebornClass == 55 && client.Entity.SecondRebornClass == 75)
            {
                client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                client.AddSpell(new Spell(true) { ID = 11070 }); //Gale Bomb
                client.AddSpell(new Spell(true) { ID = 6001 }); //ToxicFog
            }

            #endregion
            #region Nin-KungFu
            if (client.Entity.FirstRebornClass == 55 && client.Entity.SecondRebornClass == 85)
            {
                client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                client.AddSpell(new Spell(true) { ID = 6001 }); //ToxicFog
            }
            #endregion
            #endregion
            #region Fire2
            #region Fire-Arch

            if (client.Entity.FirstRebornClass == 145 && client.Entity.SecondRebornClass == 45)
            {
                client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                client.AddSpell(new Spell(true) { ID = 1000 }); //Thunder
                client.AddSpell(new Spell(true) { ID = 1001 }); //Fire
                client.AddSpell(new Spell(true) { ID = 1005 }); //Cure
                client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                client.AddSpell(new Spell(true) { ID = 5002 }); //PoisonousArrows
            }

            #endregion
            #region Fire-Fire

            if (client.Entity.FirstRebornClass == 145 && client.Entity.SecondRebornClass == 145)
            {
                if (client.Entity.Class == 41 || client.Entity.Class == 11 || client.Entity.Class == 51 ||
                    client.Entity.Class == 21 || client.Entity.Class == 71 || client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 3080 }); //Dodge
                    client.AddSpell(new Spell(true) { ID = 1000 }); //Thunder
                    client.AddSpell(new Spell(true) { ID = 1001 }); //fire
                    client.AddSpell(new Spell(true) { ID = 1005 }); //cura
                    client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                }
                else if (client.Entity.Class == 142)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 10310 }); //Heaven Blade 
                    client.AddSpell(new Spell(true) { ID = 3080 }); //Dodge
                }
                else if (client.Entity.Class == 132)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 3080 }); //
                    client.AddSpell(new Spell(true) { ID = 1120 }); //FireCircle
                }
                else if (client.Entity.Class == 61)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1350 }); //DivineHare
                    client.AddSpell(new Spell(true) { ID = 1280 }); //Water Elf
                }
            }

            #endregion
            #region Fire-Tro

            if (client.Entity.FirstRebornClass == 145 && client.Entity.SecondRebornClass == 15)
            {
                if (client.Entity.Class == 41 || client.Entity.Class == 142 || client.Entity.Class == 132 ||
                    client.Entity.Class == 51 || client.Entity.Class == 61)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1000 }); //thunder
                    client.AddSpell(new Spell(true) { ID = 1001 }); //fire
                    client.AddSpell(new Spell(true) { ID = 1005 }); //cura
                    client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                    client.AddSpell(new Spell(true) { ID = 1270 }); //Golem
                    client.AddSpell(new Spell(true) { ID = 1110 }); //cyclona
                    client.AddSpell(new Spell(true) { ID = 1190 }); //SpiritHealing
                }
                else if (client.Entity.Class == 71)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1000 }); //thunder
                    client.AddSpell(new Spell(true) { ID = 1001 }); //fire
                    client.AddSpell(new Spell(true) { ID = 1005 }); //cura
                    client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                    client.AddSpell(new Spell(true) { ID = 1110 }); //cyclona
                }
                else if (client.Entity.Class == 21)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1000 }); //thunder
                    client.AddSpell(new Spell(true) { ID = 1001 }); //fire
                    client.AddSpell(new Spell(true) { ID = 1005 }); //cura
                    client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                    client.AddSpell(new Spell(true) { ID = 1270 }); //Golem
                    client.AddSpell(new Spell(true) { ID = 5100 }); //IronShirt
                    client.AddSpell(new Spell(true) { ID = 1110 }); //cyclona
                    client.AddSpell(new Spell(true) { ID = 1190 }); //SpiritHealing
                }
                else if (client.Entity.Class == 11)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1000 }); //thunder
                    client.AddSpell(new Spell(true) { ID = 1001 }); //fire
                    client.AddSpell(new Spell(true) { ID = 1005 }); //cura
                    client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                    client.AddSpell(new Spell(true) { ID = 3050 }); //CruelShade
                }
            }

            #endregion
            #region Fire-War

            if (client.Entity.FirstRebornClass == 145 && client.Entity.SecondRebornClass == 25)
            {
                if (client.Entity.Class == 41)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1000 }); //
                    client.AddSpell(new Spell(true) { ID = 1001 }); //
                    client.AddSpell(new Spell(true) { ID = 1005 }); //
                    client.AddSpell(new Spell(true) { ID = 1195 }); //
                    client.AddSpell(new Spell(true) { ID = 1020 }); //
                    client.AddSpell(new Spell(true) { ID = 1040 }); //
                    client.AddSpell(new Spell(true) { ID = 3060 }); //
                }
                else if (client.Entity.Class == 142)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1020 }); //
                    client.AddSpell(new Spell(true) { ID = 1040 }); //
                    client.AddSpell(new Spell(true) { ID = 3060 }); //
                }
                else if (client.Entity.Class == 11 || client.Entity.Class == 51 || client.Entity.Class == 61 ||
                         client.Entity.Class == 71 || client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1000 }); //
                    client.AddSpell(new Spell(true) { ID = 1001 }); //
                    client.AddSpell(new Spell(true) { ID = 1005 }); //
                    client.AddSpell(new Spell(true) { ID = 1195 }); //
                    client.AddSpell(new Spell(true) { ID = 1015 }); //
                    client.AddSpell(new Spell(true) { ID = 1040 }); //
                    client.AddSpell(new Spell(true) { ID = 1320 }); //
                    client.AddSpell(new Spell(true) { ID = 3060 }); //
                }
                else if (client.Entity.Class == 21)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1000 }); //
                    client.AddSpell(new Spell(true) { ID = 1001 }); //
                    client.AddSpell(new Spell(true) { ID = 1005 }); //
                    client.AddSpell(new Spell(true) { ID = 1195 }); //
                    client.AddSpell(new Spell(true) { ID = 3060 }); //
                }
                else if (client.Entity.Class == 132)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1000 }); //
                    client.AddSpell(new Spell(true) { ID = 1001 }); //
                    client.AddSpell(new Spell(true) { ID = 1005 }); //
                    client.AddSpell(new Spell(true) { ID = 1195 }); //
                    client.AddSpell(new Spell(true) { ID = 3060 }); //
                    client.AddSpell(new Spell(true) { ID = 1025 }); //
                    client.AddSpell(new Spell(true) { ID = 1020 }); //
                    client.AddSpell(new Spell(true) { ID = 1040 }); //
                }
            }

            #endregion
            #region Fire-Water

            if (client.Entity.FirstRebornClass == 145 && client.Entity.SecondRebornClass == 135)
            {
                if (client.Entity.Class == 41)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1005 }); //
                    client.AddSpell(new Spell(true) { ID = 1195 }); //
                    client.AddSpell(new Spell(true) { ID = 1095 }); //
                    client.AddSpell(new Spell(true) { ID = 1090 }); //
                    client.AddSpell(new Spell(true) { ID = 1075 }); //Invisibility
                }
                else if (client.Entity.Class == 142)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1050 }); //
                    client.AddSpell(new Spell(true) { ID = 1055 }); //
                    client.AddSpell(new Spell(true) { ID = 1175 }); //
                    client.AddSpell(new Spell(true) { ID = 1075 }); //Invisibility
                }
                else if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 51)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1005 }); //
                    client.AddSpell(new Spell(true) { ID = 1085 }); //
                    client.AddSpell(new Spell(true) { ID = 1090 }); //
                    client.AddSpell(new Spell(true) { ID = 1095 }); //
                    client.AddSpell(new Spell(true) { ID = 1195 }); //
                }
                else if (client.Entity.Class == 132)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 3090 }); //
                    client.AddSpell(new Spell(true) { ID = 1120 }); //
                }
                else if (client.Entity.Class == 61 || client.Entity.Class == 71 || client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1005 }); //
                    client.AddSpell(new Spell(true) { ID = 1085 }); //
                    client.AddSpell(new Spell(true) { ID = 1090 }); //
                    client.AddSpell(new Spell(true) { ID = 1095 }); //
                    client.AddSpell(new Spell(true) { ID = 1195 }); //
                    client.AddSpell(new Spell(true) { ID = 1350 }); //DivineHare
                    client.AddSpell(new Spell(true) { ID = 1280 }); //Water Elf
                }
            }

            #endregion
            #region Fire-Nin

            if (client.Entity.FirstRebornClass == 145 && client.Entity.SecondRebornClass == 55)
            {
                if (client.Entity.Class == 51 || client.Entity.Class == 61 || client.Entity.Class == 71 ||
                    client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 3080 }); //
                    client.AddSpell(new Spell(true) { ID = 6001 }); //
                    client.AddSpell(new Spell(true) { ID = 1000 }); //
                    client.AddSpell(new Spell(true) { ID = 1001 }); //
                    client.AddSpell(new Spell(true) { ID = 1005 }); //
                    client.AddSpell(new Spell(true) { ID = 1195 }); //
                }
                else
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 6001 }); //
                    client.AddSpell(new Spell(true) { ID = 1000 }); //
                    client.AddSpell(new Spell(true) { ID = 1001 }); //
                    client.AddSpell(new Spell(true) { ID = 1005 }); //
                    client.AddSpell(new Spell(true) { ID = 1195 }); //
                }
            }

            #endregion
            #region Fire-Monk

            if (client.Entity.FirstRebornClass == 145 && client.Entity.SecondRebornClass == 65)
            {
                if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 41 ||
                    client.Entity.Class == 132 || client.Entity.Class == 142)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1000 }); //Thunder
                    client.AddSpell(new Spell(true) { ID = 1000 }); //Fire
                    client.AddSpell(new Spell(true) { ID = 1005 }); //Cure
                    client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                    client.AddSpell(new Spell(true) { ID = 10400 }); //Serenity
                }
                else if (client.Entity.Class == 51 || client.Entity.Class == 61 || client.Entity.Class == 71 ||
                    client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1000 }); //Thunder
                    client.AddSpell(new Spell(true) { ID = 1000 }); //Fire
                    client.AddSpell(new Spell(true) { ID = 1005 }); //Cure
                    client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                    client.AddSpell(new Spell(true) { ID = 10400 }); //Serenity
                    client.AddSpell(new Spell(true) { ID = 3080 }); //Dodge
                }
            }

            #endregion
            #region Fire-Pirate

            if (client.Entity.FirstRebornClass == 145 && client.Entity.SecondRebornClass == 75)
            {
                client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                client.AddSpell(new Spell(true) { ID = 1000 }); //Thunder
                client.AddSpell(new Spell(true) { ID = 1000 }); //Fire
                client.AddSpell(new Spell(true) { ID = 1005 }); //Cure
                client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                client.AddSpell(new Spell(true) { ID = 11070 }); //Gale Bomb
            }

            #endregion
            #region Fire-KungFu
            if (client.Entity.FirstRebornClass == 145 && client.Entity.SecondRebornClass == 85)
            {
                client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                client.AddSpell(new Spell(true) { ID = 1000 }); //Thunder
                client.AddSpell(new Spell(true) { ID = 1000 }); //Fire
                client.AddSpell(new Spell(true) { ID = 1005 }); //Cure
                client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
            }
            #endregion
            #endregion
            #region War2
            #region War-Arch

            if (client.Entity.FirstRebornClass == 25 && client.Entity.SecondRebornClass == 45)
            {
                if (client.Entity.Class == 41)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 5000 }); //Freezing Arrows
                }
                else if (client.Entity.Class == 132 || client.Entity.Class == 142)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1020 });
                    client.AddSpell(new Spell(true) { ID = 1040 });
                    client.AddSpell(new Spell(true) { ID = 5002 }); //Poisonous Arrows
                }
                else if (client.Entity.Class == 11 || client.Entity.Class == 51 || client.Entity.Class == 61 ||
                         client.Entity.Class == 71 || client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1040 });
                    client.AddSpell(new Spell(true) { ID = 5002 });
                }
                else if (client.Entity.Class == 21)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 5002 });
                }
            }

            #endregion
            #region War-Fire

            if (client.Entity.FirstRebornClass == 25 && client.Entity.SecondRebornClass == 145)
            {
                if (client.Entity.Class == 41)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1020 });
                    client.AddSpell(new Spell(true) { ID = 1040 });
                    client.AddSpell(new Spell(true) { ID = 1000 });
                    client.AddSpell(new Spell(true) { ID = 1001 });
                    client.AddSpell(new Spell(true) { ID = 1005 });
                    client.AddSpell(new Spell(true) { ID = 1195 });
                }
                else if (client.Entity.Class == 142)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1020 });
                    client.AddSpell(new Spell(true) { ID = 1040 });
                    client.AddSpell(new Spell(true) { ID = 3080 });
                }
                else if (client.Entity.Class == 11 || client.Entity.Class == 51 || client.Entity.Class == 61 ||
                         client.Entity.Class == 71 || client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1040 });
                    client.AddSpell(new Spell(true) { ID = 1000 });
                    client.AddSpell(new Spell(true) { ID = 1001 });
                    client.AddSpell(new Spell(true) { ID = 1005 });
                    client.AddSpell(new Spell(true) { ID = 1195 });
                }
                else if (client.Entity.Class == 25)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1000 });
                    client.AddSpell(new Spell(true) { ID = 1001 });
                    client.AddSpell(new Spell(true) { ID = 1005 });
                    client.AddSpell(new Spell(true) { ID = 1195 });
                }
                else if (client.Entity.Class == 132)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1020 });
                    client.AddSpell(new Spell(true) { ID = 1040 });
                    client.AddSpell(new Spell(true) { ID = 1120 });
                }
            }

            #endregion
            #region War-Tro

            if (client.Entity.FirstRebornClass == 25 && client.Entity.SecondRebornClass == 15)
            {
                if (client.Entity.Class == 41 || client.Entity.Class == 142 || client.Entity.Class == 132 ||
                    client.Entity.Class == 51 || client.Entity.Class == 61 || client.Entity.Class == 71 ||
                    client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1320 });
                    client.AddSpell(new Spell(true) { ID = 1040 });
                    client.AddSpell(new Spell(true) { ID = 1110 });
                    client.AddSpell(new Spell(true) { ID = 1190 });
                    client.AddSpell(new Spell(true) { ID = 1270 });
                }
                else if (client.Entity.Class == 11)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1320 });
                    client.AddSpell(new Spell(true) { ID = 1040 });
                    client.AddSpell(new Spell(true) { ID = 3050 });
                }
                else if (client.Entity.Class == 21)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 5100 });
                    client.AddSpell(new Spell(true) { ID = 1110 });
                    client.AddSpell(new Spell(true) { ID = 1190 });
                    client.AddSpell(new Spell(true) { ID = 1270 });
                }
            }

            #endregion
            #region War-War

            if (client.Entity.FirstRebornClass == 25 && client.Entity.SecondRebornClass == 25)
            {
                if (client.Entity.Class == 41 || client.Entity.Class == 142)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1040 });
                    client.AddSpell(new Spell(true) { ID = 1320 });
                    client.AddSpell(new Spell(true) { ID = 3060 });
                }
                else if (client.Entity.Class == 11 || client.Entity.Class == 51 || client.Entity.Class == 61 ||
                         client.Entity.Class == 71 || client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1040 });
                    client.AddSpell(new Spell(true) { ID = 1020 });
                    client.AddSpell(new Spell(true) { ID = 3060 });
                    client.AddSpell(new Spell(true) { ID = 1015 });
                }
                else if (client.Entity.Class == 21)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 10311 }); //Perseverance
                    client.AddSpell(new Spell(true) { ID = 3060 });
                }
                else if (client.Entity.Class == 132)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1025 });
                    client.AddSpell(new Spell(true) { ID = 1040 });
                    client.AddSpell(new Spell(true) { ID = 1320 });
                    client.AddSpell(new Spell(true) { ID = 3060 });
                }
            }

            #endregion
            #region War-Water

            if (client.Entity.FirstRebornClass == 25 && client.Entity.SecondRebornClass == 135)
            {
                if (client.Entity.Class == 41)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1020 });
                    client.AddSpell(new Spell(true) { ID = 1040 });
                    client.AddSpell(new Spell(true) { ID = 1005 });
                    client.AddSpell(new Spell(true) { ID = 1075 }); //Invisibility
                    client.AddSpell(new Spell(true) { ID = 1090 });
                    client.AddSpell(new Spell(true) { ID = 1095 });
                    client.AddSpell(new Spell(true) { ID = 1195 });
                    client.AddSpell(new Spell(true) { ID = 1280 });
                    client.AddSpell(new Spell(true) { ID = 1350 });
                }
                if (client.Entity.Class == 142)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1020 });
                    client.AddSpell(new Spell(true) { ID = 1040 });
                    client.AddSpell(new Spell(true) { ID = 1005 });
                    client.AddSpell(new Spell(true) { ID = 1175 });
                    client.AddSpell(new Spell(true) { ID = 1050 });
                    client.AddSpell(new Spell(true) { ID = 1055 });
                    client.AddSpell(new Spell(true) { ID = 1280 });
                    client.AddSpell(new Spell(true) { ID = 1350 });
                    client.AddSpell(new Spell(true) { ID = 1075 }); //Invisibility
                }
                else if (client.Entity.Class == 11)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1005 });
                    client.AddSpell(new Spell(true) { ID = 1040 });
                    client.AddSpell(new Spell(true) { ID = 1085 });
                    client.AddSpell(new Spell(true) { ID = 1090 });
                    client.AddSpell(new Spell(true) { ID = 1095 });
                    client.AddSpell(new Spell(true) { ID = 1195 });
                    client.AddSpell(new Spell(true) { ID = 1280 });
                    client.AddSpell(new Spell(true) { ID = 1350 });
                }
                else if (client.Entity.Class == 21)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1005 });
                    client.AddSpell(new Spell(true) { ID = 1085 });
                    client.AddSpell(new Spell(true) { ID = 1090 });
                    client.AddSpell(new Spell(true) { ID = 1095 });
                    client.AddSpell(new Spell(true) { ID = 1195 });
                    client.AddSpell(new Spell(true) { ID = 1280 });
                    client.AddSpell(new Spell(true) { ID = 1350 });
                }
                else if (client.Entity.Class == 132)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1020 });
                    client.AddSpell(new Spell(true) { ID = 1025 });
                    client.AddSpell(new Spell(true) { ID = 1040 });
                    client.AddSpell(new Spell(true) { ID = 3090 });
                    client.AddSpell(new Spell(true) { ID = 1280 });
                    client.AddSpell(new Spell(true) { ID = 1350 });
                }
                else if (client.Entity.Class == 51 || client.Entity.Class == 71 || client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1005 });
                    client.AddSpell(new Spell(true) { ID = 1040 });
                    client.AddSpell(new Spell(true) { ID = 1085 });
                    client.AddSpell(new Spell(true) { ID = 1090 });
                    client.AddSpell(new Spell(true) { ID = 1095 });
                    client.AddSpell(new Spell(true) { ID = 1195 });
                }
                else if (client.Entity.Class == 61)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1005 });
                    client.AddSpell(new Spell(true) { ID = 1040 });
                    client.AddSpell(new Spell(true) { ID = 1085 });
                    client.AddSpell(new Spell(true) { ID = 1090 });
                    client.AddSpell(new Spell(true) { ID = 1095 });
                    client.AddSpell(new Spell(true) { ID = 1195 });
                    client.AddSpell(new Spell(true) { ID = 1350 }); //DivineHare
                    client.AddSpell(new Spell(true) { ID = 1280 }); //Water Elf
                }
            }

            #endregion
            #region War-Nin

            if (client.Entity.FirstRebornClass == 25 && client.Entity.SecondRebornClass == 55)
            {
                if (client.Entity.Class == 51)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1320 });
                    client.AddSpell(new Spell(true) { ID = 1040 });
                }
                else
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1320 });
                    client.AddSpell(new Spell(true) { ID = 1040 });
                    client.AddSpell(new Spell(true) { ID = 6001 });
                }
            }

            #endregion
            #region War-Monk

            if (client.Entity.FirstRebornClass == 25 && client.Entity.SecondRebornClass == 65)
            {
                if (client.Entity.Class == 21 || client.Entity.Class == 41 || client.Entity.Class == 51 ||
                    client.Entity.Class == 61 || client.Entity.Class == 142 || client.Entity.Class == 71 ||
                    client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1040 }); //Roar
                    client.AddSpell(new Spell(true) { ID = 1320 }); //FlyingMoon
                    client.AddSpell(new Spell(true) { ID = 10400 }); //Serenity
                }
                else if (client.Entity.Class == 11)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1040 }); //Roar
                    client.AddSpell(new Spell(true) { ID = 1320 }); //FlyingMoon
                    client.AddSpell(new Spell(true) { ID = 10400 }); //Serenity
                    client.AddSpell(new Spell(true) { ID = 1110 }); //Cyclone
                }
                else if (client.Entity.Class == 132)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1040 }); //Roar
                    client.AddSpell(new Spell(true) { ID = 1320 }); //FlyingMoon
                    client.AddSpell(new Spell(true) { ID = 10400 }); //Serenity
                    client.AddSpell(new Spell(true) { ID = 3080 }); // Dodge
                }
            }

            #endregion
            #region War-Pirate

            if (client.Entity.FirstRebornClass == 25 && client.Entity.SecondRebornClass == 75)
            {
                client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                client.AddSpell(new Spell(true) { ID = 1040 }); //Roar
                client.AddSpell(new Spell(true) { ID = 1320 }); //FlyingMoon
                client.AddSpell(new Spell(true) { ID = 11070 }); //Gale Bomb
                client.AddSpell(new Spell(true) { ID = 3060 }); // Reflec
            }

            #endregion
            #region War-KungFu
            if (client.Entity.FirstRebornClass == 25 && client.Entity.SecondRebornClass == 81)
            {
                client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                client.AddSpell(new Spell(true) { ID = 1040 }); //Roar
                client.AddSpell(new Spell(true) { ID = 1320 }); //FlyingMoon
                client.AddSpell(new Spell(true) { ID = 3060 }); // Reflec
            }
            #endregion
            #endregion
            #region Water2
            #region Water-Arch

            if (client.Entity.FirstRebornClass == 135 && client.Entity.SecondRebornClass == 45)
            {
                if (client.Entity.Class == 41)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1005 });
                    client.AddSpell(new Spell(true) { ID = 1075 }); //Invisibility
                    client.AddSpell(new Spell(true) { ID = 1090 });
                    client.AddSpell(new Spell(true) { ID = 1095 });
                    client.AddSpell(new Spell(true) { ID = 1195 });
                    client.AddSpell(new Spell(true) { ID = 5000 });
                    client.AddSpell(new Spell(true) { ID = 5002 });
                }
                else if (client.Entity.Class == 61)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1005 });
                    client.AddSpell(new Spell(true) { ID = 1075 }); //Invisibility
                    client.AddSpell(new Spell(true) { ID = 1090 });
                    client.AddSpell(new Spell(true) { ID = 1095 });
                    client.AddSpell(new Spell(true) { ID = 1195 });
                    client.AddSpell(new Spell(true) { ID = 5000 });
                    client.AddSpell(new Spell(true) { ID = 5002 });
                    client.AddSpell(new Spell(true) { ID = 1350 }); //DivineHare
                    client.AddSpell(new Spell(true) { ID = 1280 }); //Water Elf
                }
                else if (client.Entity.Class == 71 || client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1005 });
                    client.AddSpell(new Spell(true) { ID = 1075 }); //Invisibility
                    client.AddSpell(new Spell(true) { ID = 1090 });
                    client.AddSpell(new Spell(true) { ID = 1095 });
                    client.AddSpell(new Spell(true) { ID = 1085 }); //Star Of Accuracy
                    client.AddSpell(new Spell(true) { ID = 5000 });
                    client.AddSpell(new Spell(true) { ID = 5002 });
                    client.AddSpell(new Spell(true) { ID = 1350 }); //DivineHare
                    client.AddSpell(new Spell(true) { ID = 1280 }); //Water Elf
                }
                else
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1005 });
                    client.AddSpell(new Spell(true) { ID = 1075 }); //Invisibility
                    client.AddSpell(new Spell(true) { ID = 1090 });
                    client.AddSpell(new Spell(true) { ID = 1095 });
                    client.AddSpell(new Spell(true) { ID = 1195 });
                    client.AddSpell(new Spell(true) { ID = 5000 });
                    client.AddSpell(new Spell(true) { ID = 5002 });
                }
            }

            #endregion
            #region Water-Fire

            if (client.Entity.FirstRebornClass == 135 && client.Entity.SecondRebornClass == 145)
            {
                if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 41 ||
                    client.Entity.Class == 51 || client.Entity.Class == 71 || client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1050 });
                    client.AddSpell(new Spell(true) { ID = 1175 });
                    client.AddSpell(new Spell(true) { ID = 1075 }); //Invisibility
                    client.AddSpell(new Spell(true) { ID = 1055 });
                    client.AddSpell(new Spell(true) { ID = 1000 });
                    client.AddSpell(new Spell(true) { ID = 1001 });
                    client.AddSpell(new Spell(true) { ID = 1005 });
                    client.AddSpell(new Spell(true) { ID = 1195 });
                }
                else if (client.Entity.Class == 61)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1050 });
                    client.AddSpell(new Spell(true) { ID = 1175 });
                    client.AddSpell(new Spell(true) { ID = 1075 }); //Invisibility
                    client.AddSpell(new Spell(true) { ID = 1055 });
                    client.AddSpell(new Spell(true) { ID = 1000 });
                    client.AddSpell(new Spell(true) { ID = 1001 });
                    client.AddSpell(new Spell(true) { ID = 1005 });
                    client.AddSpell(new Spell(true) { ID = 1195 });
                    client.AddSpell(new Spell(true) { ID = 1350 }); //DivineHare
                    client.AddSpell(new Spell(true) { ID = 1280 }); //Water Elf
                }
                else if (client.Entity.Class == 132)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1050 });
                    client.AddSpell(new Spell(true) { ID = 1175 });
                    client.AddSpell(new Spell(true) { ID = 1075 }); //Invisibility
                    client.AddSpell(new Spell(true) { ID = 1055 });
                    client.AddSpell(new Spell(true) { ID = 1120 });
                }
                else if (client.Entity.Class == 142)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1050 });
                    client.AddSpell(new Spell(true) { ID = 1175 });
                    client.AddSpell(new Spell(true) { ID = 1075 }); //Invisibility
                    client.AddSpell(new Spell(true) { ID = 1055 });
                    client.AddSpell(new Spell(true) { ID = 3080 });
                }
            }

            #endregion
            #region Water-Tro

            if (client.Entity.FirstRebornClass == 135 && client.Entity.SecondRebornClass == 15)
            {
                if (client.Entity.Class == 41 || client.Entity.Class == 142 || client.Entity.Class == 132 ||
                    client.Entity.Class == 51)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1005 }); //Cure
                    client.AddSpell(new Spell(true) { ID = 1085 }); //StarOfAccuracy
                    client.AddSpell(new Spell(true) { ID = 1090 }); //MagicShield
                    client.AddSpell(new Spell(true) { ID = 1095 }); //Stigma
                    client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                    client.AddSpell(new Spell(true) { ID = 1190 }); //SpiritHealing
                    client.AddSpell(new Spell(true) { ID = 1110 }); //Cyclone
                    client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
                }
                else if (client.Entity.Class == 61)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1005 }); //Cure
                    client.AddSpell(new Spell(true) { ID = 1085 }); //StarOfAccuracy
                    client.AddSpell(new Spell(true) { ID = 1090 }); //MagicShield
                    client.AddSpell(new Spell(true) { ID = 1095 }); //Stigma
                    client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                    client.AddSpell(new Spell(true) { ID = 1190 }); //SpiritHealing
                    client.AddSpell(new Spell(true) { ID = 1110 }); //Cyclone
                    client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
                    client.AddSpell(new Spell(true) { ID = 1350 }); //DivineHare
                    client.AddSpell(new Spell(true) { ID = 1280 }); //Water Elf
                }
                else if (client.Entity.Class == 71 || client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1005 }); //Cure
                    client.AddSpell(new Spell(true) { ID = 1085 }); //StarOfAccuracy
                    client.AddSpell(new Spell(true) { ID = 1090 }); //MagicShield
                    client.AddSpell(new Spell(true) { ID = 1095 }); //Stigma
                    client.AddSpell(new Spell(true) { ID = 1190 }); //SpiritHealing
                    client.AddSpell(new Spell(true) { ID = 1110 }); //Cyclone
                    client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
                }
                else if (client.Entity.Class == 21)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1005 }); //
                    client.AddSpell(new Spell(true) { ID = 1085 }); //
                    client.AddSpell(new Spell(true) { ID = 1090 }); //
                    client.AddSpell(new Spell(true) { ID = 1095 }); //
                    client.AddSpell(new Spell(true) { ID = 1195 }); //
                    client.AddSpell(new Spell(true) { ID = 1190 }); //
                    client.AddSpell(new Spell(true) { ID = 1110 }); //
                    client.AddSpell(new Spell(true) { ID = 1270 }); //
                    client.AddSpell(new Spell(true) { ID = 5100 }); //
                }
                else if (client.Entity.Class == 11)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1005 }); //
                    client.AddSpell(new Spell(true) { ID = 1085 }); //
                    client.AddSpell(new Spell(true) { ID = 1090 }); //
                    client.AddSpell(new Spell(true) { ID = 1095 }); //
                    client.AddSpell(new Spell(true) { ID = 1195 }); //
                    client.AddSpell(new Spell(true) { ID = 3050 }); //
                }
            }

            #endregion
            #region Water-War

            if (client.Entity.FirstRebornClass == 135 && client.Entity.SecondRebornClass == 25)
            {
                if (client.Entity.Class == 41)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1005 }); //
                    client.AddSpell(new Spell(true) { ID = 1085 }); //
                    client.AddSpell(new Spell(true) { ID = 1090 }); //
                    client.AddSpell(new Spell(true) { ID = 1095 }); //
                    client.AddSpell(new Spell(true) { ID = 1195 }); //
                    client.AddSpell(new Spell(true) { ID = 1020 }); //
                    client.AddSpell(new Spell(true) { ID = 1040 }); //
                    client.AddSpell(new Spell(true) { ID = 3060 }); //
                    client.AddSpell(new Spell(true) { ID = 1350 }); //
                    client.AddSpell(new Spell(true) { ID = 1280 }); //
                }
                else if (client.Entity.Class == 142)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1005 }); //
                    client.AddSpell(new Spell(true) { ID = 1085 }); //
                    client.AddSpell(new Spell(true) { ID = 1090 }); //
                    client.AddSpell(new Spell(true) { ID = 1095 }); //
                    client.AddSpell(new Spell(true) { ID = 1195 }); //
                    client.AddSpell(new Spell(true) { ID = 1020 }); //
                    client.AddSpell(new Spell(true) { ID = 1040 }); //
                    client.AddSpell(new Spell(true) { ID = 3060 }); //
                }
                else if (client.Entity.Class == 11 || client.Entity.Class == 51 || client.Entity.Class == 71 ||
                    client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1005 }); //
                    client.AddSpell(new Spell(true) { ID = 1085 }); //
                    client.AddSpell(new Spell(true) { ID = 1090 }); //
                    client.AddSpell(new Spell(true) { ID = 1095 }); //
                    client.AddSpell(new Spell(true) { ID = 1195 }); //
                    client.AddSpell(new Spell(true) { ID = 1015 }); //
                    client.AddSpell(new Spell(true) { ID = 1040 }); //
                    client.AddSpell(new Spell(true) { ID = 3060 }); //
                    client.AddSpell(new Spell(true) { ID = 1320 }); //
                }
                else if (client.Entity.Class == 61)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1005 }); //
                    client.AddSpell(new Spell(true) { ID = 1085 }); //
                    client.AddSpell(new Spell(true) { ID = 1090 }); //
                    client.AddSpell(new Spell(true) { ID = 1095 }); //
                    client.AddSpell(new Spell(true) { ID = 1195 }); //
                    client.AddSpell(new Spell(true) { ID = 1015 }); //
                    client.AddSpell(new Spell(true) { ID = 1040 }); //
                    client.AddSpell(new Spell(true) { ID = 3060 }); //
                    client.AddSpell(new Spell(true) { ID = 1320 }); //
                    client.AddSpell(new Spell(true) { ID = 1350 }); //DivineHare
                    client.AddSpell(new Spell(true) { ID = 1280 }); //Water Elf
                }
                else if (client.Entity.Class == 21)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1005 }); //
                    client.AddSpell(new Spell(true) { ID = 1085 }); //
                    client.AddSpell(new Spell(true) { ID = 1090 }); //
                    client.AddSpell(new Spell(true) { ID = 1095 }); //
                    client.AddSpell(new Spell(true) { ID = 1195 }); //
                    client.AddSpell(new Spell(true) { ID = 3060 }); //
                }
                else if (client.Entity.Class == 132)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1005 }); //
                    client.AddSpell(new Spell(true) { ID = 1085 }); //
                    client.AddSpell(new Spell(true) { ID = 1090 }); //
                    client.AddSpell(new Spell(true) { ID = 1095 }); //
                    client.AddSpell(new Spell(true) { ID = 1195 }); //
                    client.AddSpell(new Spell(true) { ID = 1020 }); //
                    client.AddSpell(new Spell(true) { ID = 1040 }); //
                    client.AddSpell(new Spell(true) { ID = 3060 }); //
                    client.AddSpell(new Spell(true) { ID = 1025 }); //
                }
            }

            #endregion
            #region Water-Water

            if (client.Entity.FirstRebornClass == 135 && client.Entity.SecondRebornClass == 135)
            {
                if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 41 ||
                    client.Entity.Class == 51 || client.Entity.Class == 71 || client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1005 }); //
                    client.AddSpell(new Spell(true) { ID = 1085 }); //
                    client.AddSpell(new Spell(true) { ID = 1090 }); //
                    client.AddSpell(new Spell(true) { ID = 1095 }); //
                    client.AddSpell(new Spell(true) { ID = 1195 }); //
                    client.AddSpell(new Spell(true) { ID = 3090 }); //
                }
                else if (client.Entity.Class == 61)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1005 }); //
                    client.AddSpell(new Spell(true) { ID = 1085 }); //
                    client.AddSpell(new Spell(true) { ID = 1090 }); //
                    client.AddSpell(new Spell(true) { ID = 1095 }); //
                    client.AddSpell(new Spell(true) { ID = 1195 }); //
                    client.AddSpell(new Spell(true) { ID = 3090 }); //
                    client.AddSpell(new Spell(true) { ID = 1350 }); //DivineHare
                    client.AddSpell(new Spell(true) { ID = 1280 }); //Water Elf
                }
                else if (client.Entity.Class == 132)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 3090 }); //
                    client.AddSpell(new Spell(true) { ID = 30000 }); //Azure Shield
                }
                else if (client.Entity.Class == 142)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1050 }); //
                    client.AddSpell(new Spell(true) { ID = 1075 }); //Invisibility
                    client.AddSpell(new Spell(true) { ID = 1055 }); //
                    client.AddSpell(new Spell(true) { ID = 1175 }); //
                    client.AddSpell(new Spell(true) { ID = 3090 }); //
                }
            }

            #endregion
            #region Water-Nin

            if (client.Entity.FirstRebornClass == 135 && client.Entity.SecondRebornClass == 55)
            {
                client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                client.AddSpell(new Spell(true) { ID = 1005 }); //
                client.AddSpell(new Spell(true) { ID = 1085 }); //
                client.AddSpell(new Spell(true) { ID = 1090 }); //
                client.AddSpell(new Spell(true) { ID = 1095 }); //
                client.AddSpell(new Spell(true) { ID = 1195 }); //
                client.AddSpell(new Spell(true) { ID = 6001 }); //
            }

            #endregion
            #region Water-Monk

            if (client.Entity.FirstRebornClass == 135 && client.Entity.SecondRebornClass == 65)
            {
                client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                client.AddSpell(new Spell(true) { ID = 1005 }); //Cure
                client.AddSpell(new Spell(true) { ID = 1085 }); //Star of Accuracy
                client.AddSpell(new Spell(true) { ID = 1090 }); //Magic Shield
                client.AddSpell(new Spell(true) { ID = 1095 }); //Stigma
                client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                client.AddSpell(new Spell(true) { ID = 10400 }); //Serenity
            }

            #endregion
            #region Water-Pirate

            if (client.Entity.FirstRebornClass == 135 && client.Entity.SecondRebornClass == 75)
            {
                client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                client.AddSpell(new Spell(true) { ID = 1005 }); //Cure
                client.AddSpell(new Spell(true) { ID = 1085 }); //Star of Accuracy
                client.AddSpell(new Spell(true) { ID = 1090 }); //Magic Shield
                client.AddSpell(new Spell(true) { ID = 1095 }); //Stigma
                client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                client.AddSpell(new Spell(true) { ID = 11070 }); //Gale Bomb
            }

            #endregion
            #region Water-KungFu
            if (client.Entity.FirstRebornClass == 135 && client.Entity.SecondRebornClass == 85)
            {
                client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                client.AddSpell(new Spell(true) { ID = 1005 }); //Cure
                client.AddSpell(new Spell(true) { ID = 1085 }); //Star of Accuracy
                client.AddSpell(new Spell(true) { ID = 1090 }); //Magic Shield
                client.AddSpell(new Spell(true) { ID = 1095 }); //Stigma
                client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
            }
            #endregion
            #endregion
            #region Monk2
            #region Monk-Arch

            if (client.Entity.FirstRebornClass == 65 && client.Entity.SecondRebornClass == 45)
            {
                client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                client.AddSpell(new Spell(true) { ID = 5002 }); //Poisonous Arrows
                client.AddSpell(new Spell(true) { ID = 10400 }); //Serenity
            }

            #endregion
            #region Monk-Fire

            if (client.Entity.FirstRebornClass == 65 && client.Entity.SecondRebornClass == 145)
            {
                if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 41 ||
                    client.Entity.Class == 61 || client.Entity.Class == 71 || client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1000 }); //Thunder
                    client.AddSpell(new Spell(true) { ID = 1001 }); //Fire
                    client.AddSpell(new Spell(true) { ID = 1005 }); //Cure
                    client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                    client.AddSpell(new Spell(true) { ID = 10400 }); //Serenity
                }
                else if (client.Entity.Class == 142)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 10400 }); //Serenity
                }
                else if (client.Entity.Class == 132)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1120 }); //Fire Circle
                    client.AddSpell(new Spell(true) { ID = 10400 }); //Serenity
                }
                else if (client.Entity.Class == 51)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1085 }); //Star of Accuracy
                    client.AddSpell(new Spell(true) { ID = 1090 }); //Magic Shield
                    client.AddSpell(new Spell(true) { ID = 1095 }); //Stigma
                    client.AddSpell(new Spell(true) { ID = 1005 }); //Cure
                    client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                    client.AddSpell(new Spell(true) { ID = 10400 }); //Serenity
                }
            }

            #endregion
            #region Monk-Tro

            if (client.Entity.FirstRebornClass == 65 && client.Entity.SecondRebornClass == 15)
            {
                client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                client.AddSpell(new Spell(true) { ID = 10400 }); //Serenity
                client.AddSpell(new Spell(true) { ID = 1190 }); //SpiritHealing
                client.AddSpell(new Spell(true) { ID = 1110 }); //Cyclone
                client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
            }

            #endregion
            #region Monk-War

            if (client.Entity.FirstRebornClass == 65 && client.Entity.SecondRebornClass == 25)
            {
                if (client.Entity.Class == 41 || client.Entity.Class == 142)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 10400 }); //Serenity
                    client.AddSpell(new Spell(true) { ID = 1020 }); //Shield
                    client.AddSpell(new Spell(true) { ID = 1040 }); //Roar
                    client.AddSpell(new Spell(true) { ID = 3060 }); //Reflect
                }
                else if (client.Entity.Class == 11 || client.Entity.Class == 51 || client.Entity.Class == 61 ||
                         client.Entity.Class == 71 || client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 10400 }); //Serenity
                    client.AddSpell(new Spell(true) { ID = 1020 }); //Shield
                    client.AddSpell(new Spell(true) { ID = 1040 }); //Roar
                    client.AddSpell(new Spell(true) { ID = 3060 }); //Reflect
                    client.AddSpell(new Spell(true) { ID = 1320 }); //Flying Moon (XP)
                    client.AddSpell(new Spell(true) { ID = 1015 }); //Accuracy
                }
                else if (client.Entity.Class == 21)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 10400 }); //Serenity
                    client.AddSpell(new Spell(true) { ID = 3060 }); //Reflect
                }
                else if (client.Entity.Class == 132)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 10400 }); //Serenity
                    client.AddSpell(new Spell(true) { ID = 1020 }); //Shield
                    client.AddSpell(new Spell(true) { ID = 1040 }); //Roar
                    client.AddSpell(new Spell(true) { ID = 3060 }); //Reflect
                    client.AddSpell(new Spell(true) { ID = 1025 }); //Superman
                }
            }

            #endregion
            #region Monk-Water

            if (client.Entity.FirstRebornClass == 65 && client.Entity.SecondRebornClass == 135)
            {
                if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 41 ||
                    client.Entity.Class == 51 || client.Entity.Class == 61)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 10400 }); //Serenity
                    client.AddSpell(new Spell(true) { ID = 1020 }); //Shield
                    client.AddSpell(new Spell(true) { ID = 1040 }); //Roar
                    client.AddSpell(new Spell(true) { ID = 1280 }); //Water Elf
                    client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                    client.AddSpell(new Spell(true) { ID = 1015 }); //Accuracy
                    client.AddSpell(new Spell(true) { ID = 1350 }); //DivineHare
                    client.AddSpell(new Spell(true) { ID = 1095 }); //Stigma
                }
                else if (client.Entity.Class == 132)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 3090 }); //Pervade
                    client.AddSpell(new Spell(true) { ID = 10400 }); //Serenity
                }
                else if (client.Entity.Class == 142)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 10400 }); //Serenity
                    client.AddSpell(new Spell(true) { ID = 1280 }); //Water Elf
                    client.AddSpell(new Spell(true) { ID = 1175 }); //dvanced Cure
                    client.AddSpell(new Spell(true) { ID = 1075 }); //Invisibility 
                    client.AddSpell(new Spell(true) { ID = 1055 }); //Healing Rain
                    client.AddSpell(new Spell(true) { ID = 1050 }); //XP Revive
                    client.AddSpell(new Spell(true) { ID = 1350 }); //Divine Hare
                }
                else if (client.Entity.Class == 71 || client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 10400 }); //Serenity
                    client.AddSpell(new Spell(true) { ID = 1020 }); //Shield
                    client.AddSpell(new Spell(true) { ID = 1040 }); //Roar
                    client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                    client.AddSpell(new Spell(true) { ID = 1015 }); //Accuracy
                    client.AddSpell(new Spell(true) { ID = 1095 }); //Stigma
                }
            }

            #endregion
            #region Monk-Nin

            if (client.Entity.FirstRebornClass == 65 && client.Entity.SecondRebornClass == 55)
            {
                if (client.Entity.Class == 51)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 10400 }); //Serenity
                    client.AddSpell(new Spell(true) { ID = 6002 }); //PoisonStar
                    client.AddSpell(new Spell(true) { ID = 6001 }); //Toxic Fog
                }
                else if (client.Entity.Class == 11 || client.Entity.Class == 132 || client.Entity.Class == 21 ||
                         client.Entity.Class == 41 || client.Entity.Class == 61 || client.Entity.Class == 142 ||
                         client.Entity.Class == 71 || client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 10400 }); //Serenity
                    client.AddSpell(new Spell(true) { ID = 6001 }); //Toxic Fog
                }
            }

            #endregion
            #region Monk-Monk

            if (client.Entity.FirstRebornClass == 65 && client.Entity.SecondRebornClass == 65)
            {
                if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 41 ||
                    client.Entity.Class == 51 || client.Entity.Class == 132 || client.Entity.Class == 142 ||
                    client.Entity.Class == 71 || client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 10400 }); //Serenity
                }
                else if (client.Entity.Class == 61)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 10405 }); //soulshackle
                    client.AddSpell(new Spell(true) { ID = 10400 }); //Serenity
                }
            }

            #endregion
            #region Monk-Pirate

            if (client.Entity.FirstRebornClass == 65 && client.Entity.SecondRebornClass == 75)
            {
                client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                client.AddSpell(new Spell(true) { ID = 10400 }); //Serenity
                client.AddSpell(new Spell(true) { ID = 11070 }); //Gale Bomb
            }

            #endregion
            #region Monk-KungFu
            if (client.Entity.FirstRebornClass == 65 && client.Entity.SecondRebornClass == 85)
            {
                client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                client.AddSpell(new Spell(true) { ID = 10400 }); //Serenity
            }
            #endregion
            #endregion
            #region Pirate2
            #region Pirate-Arch

            if (client.Entity.FirstRebornClass == 75 && client.Entity.SecondRebornClass == 45)
            {
                client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                client.AddSpell(new Spell(true) { ID = 11070 }); //Gale Bomb
                client.AddSpell(new Spell(true) { ID = 5002 }); //Poisonous Arrows
            }

            #endregion
            #region Pirate-Fire

            if (client.Entity.FirstRebornClass == 75 && client.Entity.SecondRebornClass == 145)
            {
                if (client.Entity.Class == 11 || client.Entity.Class == 21 | client.Entity.Class == 41 ||
                    client.Entity.Class == 61 || client.Entity.Class == 71 || client.Entity.Class == 51 ||
                    client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1000 }); //Thunder
                    client.AddSpell(new Spell(true) { ID = 1001 }); //Fire
                    client.AddSpell(new Spell(true) { ID = 1005 }); //Cure
                    client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                    client.AddSpell(new Spell(true) { ID = 11070 }); //Gale Bomb
                }
                else if (client.Entity.Class == 142)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 11070 }); //Gale Bomb
                }
                else if (client.Entity.Class == 132)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1120 }); //Fire Circle
                    client.AddSpell(new Spell(true) { ID = 11070 }); //Gale Bomb
                }
            }

            #endregion
            #region Pirate-Tro

            if (client.Entity.FirstRebornClass == 75 && client.Entity.SecondRebornClass == 15)
            {
                client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                client.AddSpell(new Spell(true) { ID = 11070 }); //Gale Bomb
                client.AddSpell(new Spell(true) { ID = 1190 }); //SpiritHealing
                client.AddSpell(new Spell(true) { ID = 1110 }); //Cyclone
                client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
            }

            #endregion
            #region Pirate-War

            if (client.Entity.FirstRebornClass == 75 && client.Entity.SecondRebornClass == 25)
            {
                if (client.Entity.Class == 41 || client.Entity.Class == 142)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 11070 }); //Gale Bomb
                    client.AddSpell(new Spell(true) { ID = 1020 }); //Shield
                    client.AddSpell(new Spell(true) { ID = 1040 }); //Roar
                    client.AddSpell(new Spell(true) { ID = 3060 }); //Reflect
                }
                else if (client.Entity.Class == 11 || client.Entity.Class == 51 || client.Entity.Class == 61 ||
                         client.Entity.Class == 71 || client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 11070 }); //Gale Bomb
                    client.AddSpell(new Spell(true) { ID = 1020 }); //Shield
                    client.AddSpell(new Spell(true) { ID = 1040 }); //Roar
                    client.AddSpell(new Spell(true) { ID = 3060 }); //Reflect
                    client.AddSpell(new Spell(true) { ID = 1320 }); //Flying Moon (XP)
                    client.AddSpell(new Spell(true) { ID = 1015 }); //Accuracy
                }
                else if (client.Entity.Class == 21)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 11070 }); //Gale Bomb
                    client.AddSpell(new Spell(true) { ID = 3060 }); //Reflect
                }
                else if (client.Entity.Class == 132)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 11070 }); //Gale Bomb
                    client.AddSpell(new Spell(true) { ID = 1020 }); //Shield
                    client.AddSpell(new Spell(true) { ID = 1040 }); //Roar
                    client.AddSpell(new Spell(true) { ID = 3060 }); //Reflect
                    client.AddSpell(new Spell(true) { ID = 1025 }); //Superman
                }
            }

            #endregion
            #region Pirate-Water

            if (client.Entity.FirstRebornClass == 75 && client.Entity.SecondRebornClass == 135)
            {
                if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 41 ||
                    client.Entity.Class == 51 || client.Entity.Class == 61 || client.Entity.Class == 71 ||
                    client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 11070 }); //Gale Bomb
                    client.AddSpell(new Spell(true) { ID = 1020 }); //Shield
                    client.AddSpell(new Spell(true) { ID = 1040 }); //Roar
                    client.AddSpell(new Spell(true) { ID = 1280 }); //Water Elf
                    client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                    client.AddSpell(new Spell(true) { ID = 1015 }); //Accuracy
                    client.AddSpell(new Spell(true) { ID = 1350 }); //DivineHare
                    client.AddSpell(new Spell(true) { ID = 1095 }); //Stigma
                }
                else if (client.Entity.Class == 132)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 3090 }); //Pervade
                    client.AddSpell(new Spell(true) { ID = 11070 }); //Gale Bomb
                }
                else if (client.Entity.Class == 142)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 11070 }); //Gale Bomb
                    client.AddSpell(new Spell(true) { ID = 1280 }); //Water Elf
                    client.AddSpell(new Spell(true) { ID = 1175 }); //dvanced Cure
                    client.AddSpell(new Spell(true) { ID = 1075 }); //Invisibility 
                    client.AddSpell(new Spell(true) { ID = 1055 }); //Healing Rain
                    client.AddSpell(new Spell(true) { ID = 1050 }); //XP Revive
                    client.AddSpell(new Spell(true) { ID = 1350 }); //Divine Hare
                }
            }

            #endregion
            #region Pirate-Nin

            if (client.Entity.FirstRebornClass == 75 && client.Entity.SecondRebornClass == 55)
            {
                if (client.Entity.Class == 51)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 11070 }); //Gale Bomb
                    client.AddSpell(new Spell(true) { ID = 6002 }); //PoisonStar
                }
                else if (client.Entity.Class == 11 || client.Entity.Class == 132 || client.Entity.Class == 21 ||
                         client.Entity.Class == 41 || client.Entity.Class == 51 || client.Entity.Class == 61 ||
                         client.Entity.Class == 71 || client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 11070 }); //Gale Bomb
                    client.AddSpell(new Spell(true) { ID = 6001 }); //Toxic Fog
                }
            }

            #endregion
            #region Pirate-Monk

            if (client.Entity.FirstRebornClass == 75 && client.Entity.SecondRebornClass == 65)
            {
                if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 41 ||
                    client.Entity.Class == 51 || client.Entity.Class == 132 || client.Entity.Class == 142 ||
                    client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 11070 }); //Gale Bomb
                }
                else if (client.Entity.Class == 61)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 10405 }); //soulshackle
                    client.AddSpell(new Spell(true) { ID = 10400 }); //Serenity
                }
                else if (client.Entity.Class == 71)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 11070 }); //Gale Bomb
                    client.AddSpell(new Spell(true) { ID = 10400 }); //Serenity
                }
            }

            #endregion
            #region Pirate-Pirate

            if (client.Entity.FirstRebornClass == 75 && client.Entity.SecondRebornClass == 75)
            {
                if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 41 ||
                    client.Entity.Class == 51 || client.Entity.Class == 132 || client.Entity.Class == 142 ||
                    client.Entity.Class == 61 || client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 11070 }); //Gale Bomb
                }
                else if (client.Entity.Class == 71)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 11070 }); //Gale Bomb
                    client.AddSpell(new Spell(true) { ID = 11040 }); //Scurvy Bomb
                }
            }

            #endregion
            #region Pirate-KungFu
            if (client.Entity.FirstRebornClass == 75 && client.Entity.SecondRebornClass == 85)
            {
                client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                client.AddSpell(new Spell(true) { ID = 11070 }); //Gale Bomb
            }
            #endregion
            #endregion
            #region KungFuKing
            #region KungFu-Arch

            if (client.Entity.FirstRebornClass == 85 && client.Entity.SecondRebornClass == 45)
            {
                client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                client.AddSpell(new Spell(true) { ID = 5002 }); //Poisonous Arrows
                client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                client.AddSpell(new Spell(true) { ID = 11620 }); //PathOfShadow
                client.AddSpell(new Spell(true) { ID = 11610 }); //Blade Furry
                client.AddSpell(new Spell(true) { ID = 11660 }); //Mortal Wound
                client.AddSpell(new Spell(true) { ID = 11650 }); //Blistering Wave
                client.AddSpell(new Spell(true) { ID = 11670 }); //SpiritFocus
                client.AddSpell(new Spell(true) { ID = 11590 }); //Kinetic Spark
                client.AddSpell(new Spell(true) { ID = 11600 }); //Dagger Storm
            }

            #endregion
            #region KungFu-Fire

            if (client.Entity.FirstRebornClass == 85 && client.Entity.SecondRebornClass == 145)
            {
                if (client.Entity.Class == 11 || client.Entity.Class == 21 | client.Entity.Class == 41 ||
                    client.Entity.Class == 61 || client.Entity.Class == 71 || client.Entity.Class == 51 ||
                    client.Entity.Class == 71)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1000 }); //Thunder
                    client.AddSpell(new Spell(true) { ID = 1001 }); //Fire
                    client.AddSpell(new Spell(true) { ID = 1005 }); //Cure
                    client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                }
                else if (client.Entity.Class == 142)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                }
                else if (client.Entity.Class == 132)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1120 }); //Fire Circle
                }
            }

            #endregion
            #region KungFu-Tro

            if (client.Entity.FirstRebornClass == 85 && client.Entity.SecondRebornClass == 15)
            {
                client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                client.AddSpell(new Spell(true) { ID = 1190 }); //SpiritHealing
                client.AddSpell(new Spell(true) { ID = 1110 }); //Cyclone
                client.AddSpell(new Spell(true) { ID = 1270 }); //Robot
            }

            #endregion
            #region KungFu-War

            if (client.Entity.FirstRebornClass == 85 && client.Entity.SecondRebornClass == 25)
            {
                if (client.Entity.Class == 41 || client.Entity.Class == 142)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1020 }); //Shield
                    client.AddSpell(new Spell(true) { ID = 1040 }); //Roar
                    client.AddSpell(new Spell(true) { ID = 3060 }); //Reflect
                }
                else if (client.Entity.Class == 11 || client.Entity.Class == 51 || client.Entity.Class == 61 ||
                         client.Entity.Class == 71 || client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1020 }); //Shield
                    client.AddSpell(new Spell(true) { ID = 1040 }); //Roar
                    client.AddSpell(new Spell(true) { ID = 3060 }); //Reflect
                    client.AddSpell(new Spell(true) { ID = 1320 }); //Flying Moon (XP)
                    client.AddSpell(new Spell(true) { ID = 1015 }); //Accuracy
                }
                else if (client.Entity.Class == 21)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 3060 }); //Reflect
                }
                else if (client.Entity.Class == 132)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1020 }); //Shield
                    client.AddSpell(new Spell(true) { ID = 1040 }); //Roar
                    client.AddSpell(new Spell(true) { ID = 3060 }); //Reflect
                    client.AddSpell(new Spell(true) { ID = 1025 }); //Superman
                }
            }

            #endregion
            #region KungFu-Water

            if (client.Entity.FirstRebornClass == 85 && client.Entity.SecondRebornClass == 135)
            {
                if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 41 ||
                    client.Entity.Class == 51 || client.Entity.Class == 61 || client.Entity.Class == 71 ||
                    client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1020 }); //Shield
                    client.AddSpell(new Spell(true) { ID = 1040 }); //Roar
                    client.AddSpell(new Spell(true) { ID = 1280 }); //Water Elf
                    client.AddSpell(new Spell(true) { ID = 1195 }); //Meditation
                    client.AddSpell(new Spell(true) { ID = 1015 }); //Accuracy
                    client.AddSpell(new Spell(true) { ID = 1350 }); //DivineHare
                    client.AddSpell(new Spell(true) { ID = 1095 }); //Stigma
                }
                else if (client.Entity.Class == 132)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 3090 }); //Pervade
                }
                else if (client.Entity.Class == 142)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 1280 }); //Water Elf
                    client.AddSpell(new Spell(true) { ID = 1175 }); //dvanced Cure
                    client.AddSpell(new Spell(true) { ID = 1075 }); //Invisibility 
                    client.AddSpell(new Spell(true) { ID = 1055 }); //Healing Rain
                    client.AddSpell(new Spell(true) { ID = 1050 }); //XP Revive
                    client.AddSpell(new Spell(true) { ID = 1350 }); //Divine Hare
                }
            }

            #endregion
            #region KungFu-Nin

            if (client.Entity.FirstRebornClass == 85 && client.Entity.SecondRebornClass == 55)
            {
                if (client.Entity.Class == 51)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 6002 }); //PoisonStar
                }
                else if (client.Entity.Class == 11 || client.Entity.Class == 132 || client.Entity.Class == 21 ||
                         client.Entity.Class == 41 || client.Entity.Class == 51 || client.Entity.Class == 61 ||
                         client.Entity.Class == 71 || client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 6001 }); //Toxic Fog
                }
            }

            #endregion
            #region KungFu-Monk

            if (client.Entity.FirstRebornClass == 85 && client.Entity.SecondRebornClass == 65)
            {
                if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 41 ||
                    client.Entity.Class == 51 || client.Entity.Class == 132 || client.Entity.Class == 142 ||
                    client.Entity.Class == 71)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                }
                else if (client.Entity.Class == 61)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 10405 }); //soulshackle
                    client.AddSpell(new Spell(true) { ID = 10400 }); //Serenity
                }
                else if (client.Entity.Class == 71)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 10400 }); //Serenity
                }
            }

            #endregion
            #region KungFu-Pirate

            if (client.Entity.FirstRebornClass == 85 && client.Entity.SecondRebornClass == 75)
            {
                if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 41 ||
                    client.Entity.Class == 51 || client.Entity.Class == 132 || client.Entity.Class == 142 ||
                    client.Entity.Class == 61 || client.Entity.Class == 71)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 11070 }); //Gale Bomb
                }
                else if (client.Entity.Class == 81)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                    client.AddSpell(new Spell(true) { ID = 12280 }); //DragonRoar
                    client.AddSpell(new Spell(true) { ID = 12300 }); //DragonFury
                    client.AddSpell(new Spell(true) { ID = 12120 }); //SpeedKick
                    client.AddSpell(new Spell(true) { ID = 12130 }); //ViolentKick
                    client.AddSpell(new Spell(true) { ID = 12140 }); //StormKick
                    client.AddSpell(new Spell(true) { ID = 12160 }); //CrackingSwip
                    client.AddSpell(new Spell(true) { ID = 12170 }); //SplittingSwipe
                    client.AddSpell(new Spell(true) { ID = 12200 }); //DragonSwing
                    client.AddSpell(new Spell(true) { ID = 12240 }); //DragonPunch
                    client.AddSpell(new Spell(true) { ID = 12350 }); //DragonSlash
                    client.AddSpell(new Spell(true) { ID = 12270 }); //DragonFlow
                    client.AddSpell(new Spell(true) { ID = 12290 }); //DragonCyclone
                    client.AddSpell(new Spell(true) { ID = 12320 }); //AirKick
                    client.AddSpell(new Spell(true) { ID = 12330 }); //AirSweep
                    client.AddSpell(new Spell(true) { ID = 12340 }); //AirRaid
                }
            }

            #endregion
            #region KungFu-KungFu
            if (client.Entity.FirstRebornClass == 85 && client.Entity.SecondRebornClass == 85)
            {

                client.AddSpell(new Spell(true) { ID = 9876 }); //Bless
                client.AddSpell(new Spell(true) { ID = 12280 }); //DragonRoar
                client.AddSpell(new Spell(true) { ID = 12300 }); //DragonFury
                client.AddSpell(new Spell(true) { ID = 12120 }); //SpeedKick
                client.AddSpell(new Spell(true) { ID = 12130 }); //ViolentKick
                client.AddSpell(new Spell(true) { ID = 12140 }); //StormKick
                client.AddSpell(new Spell(true) { ID = 12160 }); //CrackingSwip
                client.AddSpell(new Spell(true) { ID = 12170 }); //SplittingSwipe
                client.AddSpell(new Spell(true) { ID = 12200 }); //DragonSwing
                client.AddSpell(new Spell(true) { ID = 12240 }); //DragonPunch
                client.AddSpell(new Spell(true) { ID = 12350 }); //DragonSlash
                client.AddSpell(new Spell(true) { ID = 12270 }); //DragonFlow
                client.AddSpell(new Spell(true) { ID = 12290 }); //DragonCyclone
                client.AddSpell(new Spell(true) { ID = 12320 }); //AirKick
                client.AddSpell(new Spell(true) { ID = 12330 }); //AirSweep
                client.AddSpell(new Spell(true) { ID = 12340 }); //AirRaid
            }

            #endregion
            #endregion
            #endregion

            #region Low level items

            for (byte i = 1; i < 9; i++)
            {
                if (i != 7)
                {
                    ConquerItem item = client.Equipment.TryGetItem(i);
                    if (item != null && item.ID != 0)
                    {
                        try
                        {
                            //client.UnloadItemStats(item, false);
                            Database.ConquerItemInformation cii =
                                new Nyx.Server.Database.ConquerItemInformation(item.ID, item.Plus);
                            item.ID =
                                cii.LowestID(
                                    Network.PacketHandler.ItemMinLevel(Network.PacketHandler.ItemPosition(item.ID)));
                            item.Mode = Nyx.Server.Game.Enums.ItemMode.Update;
                            item.Send(client);
                            client.LoadItemStats();
                            client.ReshareClan();
                            if (client.Team != null)
                                foreach (var teammate in client.Team.Teammates)
                                    teammate.ReshareClan();
                            Database.ConquerItemTable.UpdateItemID(item);
                        }
                        catch
                        {
                        }
                    }
                }
            }
            ConquerItem hand = client.Equipment.TryGetItem(5);
            if (hand != null)
            {
                client.Equipment.Remove(5);
                client.CalculateStatBonus();
                client.CalculateHPBonus();
            }
            hand = client.Equipment.TryGetItem(25);
            if (hand != null)
            {
                client.Equipment.Remove(25);
                client.CalculateStatBonus();
                client.CalculateHPBonus();
            }
            client.LoadItemStats();
            client.ReshareClan();
            if (client.Team != null)
                foreach (var teammate in client.Team.Teammates)
                    teammate.ReshareClan();
            client.SendScreen(client.Entity.SpawnPacket, false);

            #endregion

            Database.DataHolder.GetStats(client.Entity.Class, client.Entity.Level, client);
            client.CalculateStatBonus();
            client.CalculateHPBonus();
            client.GemAlgorithm();
            client.SendStatMessage();
            foreach (var player in Kernel.GamePool.Values)
                player.Send(new Message(client.Entity.Name + " has been Reincarnation!", Color.White, Message.Talk));
        }
        #endregion
        #region Guilds
        static void AllyGuilds(string name, Client.GameClient client)
        {
            foreach (var guild in Kernel.Guilds.Values)
            {
                if (guild.Name == name && client.Guild.Name != name)
                {
                    if (guild.Leader != null)
                    {
                        if (guild.Leader.IsOnline)
                        {
                            guild.Leader.Client.OnMessageBoxEventParams = new object[]
                                                            {
                                                                guild,
                                                                client.Guild
                                                            };
                            client.OnMessageBoxEventParams = new object[]
                                                            {
                                                                guild,
                                                                client.Guild
                                                            };
                            Client.GameClient Leader = guild.Leader.Client;
                            Leader.MessageOK = delegate
                            {
                                Game.ConquerStructures.Society.Guild Guild1 =
                                    Leader.OnMessageBoxEventParams[0] as Game.ConquerStructures.Society.Guild;
                                Game.ConquerStructures.Society.Guild Guild2 =
                                    Leader.OnMessageBoxEventParams[1] as Game.ConquerStructures.Society.Guild;
                                if (Guild1.Ally.Count == 6 || Guild2.Ally.Count == 6)
                                    return;
                                Guild1.AddAlly(Guild2.Name);
                                Guild2.AddAlly(Guild1.Name);

                                if (Guild1.Leader.Client != null)
                                {
                                    if (Guild1.Leader.Client.Socket.Alive)
                                    {
                                        if (Guild2.Leader.Client != null && Guild2.Leader.Client.Socket.Alive)
                                        {
                                            Guild2.Leader.Client.Send(new Message(Guild1.Leader.Name + " has accepted your ally request.", System.Drawing.Color.Blue, Message.TopLeft));
                                        }
                                    }
                                }
                            };
                            guild.Leader.Client.MessageCancel = delegate
                            {
                                if (guild.Leader.Client != null)
                                {
                                    if (guild.Leader.Client.Socket.Alive)
                                    {
                                        if (guild.Leader.Client.OnMessageBoxEventParams != null)
                                        {
                                            Game.ConquerStructures.Society.Guild Guild2 =
                                                guild.Leader.Client.OnMessageBoxEventParams[1] as Game.ConquerStructures.Society.Guild;
                                            Game.ConquerStructures.Society.Guild Guild1 =
                                                guild.Leader.Client.OnMessageBoxEventParams[0] as Game.ConquerStructures.Society.Guild;

                                            if (Guild2.Leader.IsOnline)
                                            {
                                                Guild2.Leader.Client.Send(new Message(Guild1.Leader.Name + " has declined your ally request.", System.Drawing.Color.Blue, Message.TopLeft));
                                            }
                                        }
                                    }
                                }


                            };
                            guild.Leader.Client.Send(new NpcReply(NpcReply.MessageBox, client.Entity.Name + " , GuildLeader of " + client.Guild.Name + " wants to make with you an alliance."));
                        }
                    }
                }
            }
        }
        #endregion
        #region Broadcast
        public static void BroadcastInfoAwaiting(Broadcast broadcast, Client.GameClient client)
        {
             byte[] buffer = new byte[500];
            Writer.Write((ushort)2051, 2, buffer);
            int test = 0;
            ushort total = 0;
            for (int i = 0; i < Game.ConquerStructures.Broadcast.Broadcasts.Count; i++)
                if (Game.ConquerStructures.Broadcast.Broadcasts[i].EntityID == client.Entity.UID)
                    test++;
            if ((10 * broadcast.dwParam + 10) >= Game.ConquerStructures.Broadcast.Broadcasts.Count)
            {
                return;
            }
            for (uint i = broadcast.dwParam * 10; i < test; i++)
            {
                if (Game.ConquerStructures.Broadcast.Broadcasts.Count > i)
                {
                    var Broadcast = Game.ConquerStructures.Broadcast.Broadcasts[(int)i];
                    if (Broadcast.EntityID != client.Entity.UID) continue;
                    Writer.Write((ushort)broadcast.dwParam, 4, buffer);
                    Writer.Write(total, 8, buffer);
                    int offset = 12 + buffer[10] * 112;
                    buffer[10]++;
                    Writer.Write(Broadcast.ID, offset, buffer); offset += 4;
                    Writer.Write(i, offset, buffer); offset += 4;
                    Writer.Write(Broadcast.EntityID, offset, buffer); offset += 4;
                    Writer.Write(Broadcast.EntityName, offset, buffer); offset += 16;
                    Writer.Write(Broadcast.SpentCPs, offset, buffer); offset += 4;
                    Writer.Write(Broadcast.Message, offset, buffer);
                    if (buffer[10] % 4 == 0)
                    {
                        total++;
                        Writer.Write((ushort)(12 + buffer[10] * 112 + 6 + 2), 0, buffer);
                        byte[] Buffer = new byte[12 + buffer[10] * 112 + 6 + 2 + 8];
                        System.Buffer.BlockCopy(buffer, 0, Buffer, 0, Buffer.Length);
                        client.Send(Buffer);
                        buffer = new byte[500];
                        Writer.Write((ushort)2051, 2, buffer);
                    }
                }
                else
                {
                    Writer.Write((ushort)(12 + buffer[10] * 112 + 6 + 2), 0, buffer);
                    byte[] Buffer = new byte[12 + buffer[10] * 112 + 6 + 2 + 8];
                    System.Buffer.BlockCopy(buffer, 0, Buffer, 0, Buffer.Length);
                    if (buffer[10] != 0 || buffer[10] == 0 && total == 0)
                        client.Send(Buffer);
                    break;
                }
            }
        }
        public static void BroadcastClientMessages(Broadcast broadcast, Client.GameClient client)
        {
            byte[] buffer = new byte[500];
            Writer.Write((ushort)2050, 2, buffer);
            int test = 0;
            ushort total = 0;
            if (broadcast.dwParam * 10 + 10 >= Constants.MaxBroadcasts)
                test = Constants.MaxBroadcasts;
            else test = (int)broadcast.dwParam * 10 + 10;
            for (uint i = broadcast.dwParam * 10; i < test; i++)
            {
                if (Game.ConquerStructures.Broadcast.Broadcasts.Count > i)
                {
                    var Broadcast = Game.ConquerStructures.Broadcast.Broadcasts[(int)i];
                    Writer.Write((ushort)broadcast.dwParam, 4, buffer);
                    Writer.Write(total, 8, buffer);
                    int offset = 12 + buffer[10] * 112;
                    buffer[10]++;
                    Writer.Write(Broadcast.ID, offset, buffer); offset += 4;
                    Writer.Write(i, offset, buffer); offset += 4;
                    Writer.Write(Broadcast.EntityID, offset, buffer); offset += 4;
                    Writer.Write(Broadcast.EntityName, offset, buffer); offset += 16;
                    Writer.Write(Broadcast.SpentCPs, offset, buffer); offset += 4;
                    Writer.Write(Broadcast.Message, offset, buffer);
                    if (buffer[10] % 4 == 0)
                    {
                        total++;
                        Writer.Write((ushort)(12 + buffer[10] * 112 + 6 + 2), 0, buffer);
                        byte[] Buffer = new byte[12 + buffer[10] * 112 + 6 + 2 + 8];
                        System.Buffer.BlockCopy(buffer, 0, Buffer, 0, Buffer.Length);
                        client.Send(Buffer);
                        buffer = new byte[500];
                        Writer.Write((ushort)2051, 2, buffer);
                    }
                }
                else
                {
                    Writer.Write((ushort)(12 + buffer[10] * 112 + 6 + 2), 0, buffer);
                    byte[] Buffer = new byte[12 + buffer[10] * 112 + 6 + 2 + 8];
                    System.Buffer.BlockCopy(buffer, 0, Buffer, 0, Buffer.Length);
                    if (buffer[10] != 0 || buffer[10] == 0 && total == 0)
                        client.Send(Buffer);
                    break;
                }
            }
        }
        #endregion
        #region Booth
        public static void ShowBoothItems(ItemUsage usage, Client.GameClient client)
        {
            Client.GameClient Owner = null;
            Game.Entity entity = null;
            Game.ConquerStructures.Booth booth = null;
            if (Game.ConquerStructures.Booth.TryGetValue(usage.UID, out booth))
            {
                Owner = booth.Base.Owner;
                entity = Owner.Entity;
                if (client.Trade.InTrade || Owner.Trade.InTrade)
                    return;
                if (Owner != null)
                {
                    if (Owner.Entity.UID != client.Entity.UID)
                    {
                        BoothItem Item = new BoothItem(true);
                        if (Owner.Booth != null)
                        {
                            foreach (Game.ConquerStructures.BoothItem item in Owner.Booth.ItemList.Values)
                            {
                                Item.Fill(item, Owner.Booth.Base.UID);
                                client.Send(Item);
                                item.Item.SendExtras(client);
                            }
                        }
                    }
                }
            }
            if (Game.ConquerStructures.Booth.TryGetValue2(usage.UID, out booth))
            {
                BoothItem Item = new BoothItem(true);
                if (booth != null)
                {
                    foreach (Game.ConquerStructures.BoothItem item in booth.ItemList.Values)
                    {
                        Item.Fill(item, usage.UID);
                        client.Send(Item);
                        item.Item.SendExtras(client);
                    }
                }
            }
        }
        public static void AddItemOnBooth(ItemUsage usage, Client.GameClient client)
        {
            if (client.Booth != null && !client.Trade.InTrade)
            {
                if (!client.Booth.ItemList.ContainsKey(usage.UID))
                {
                    if (client.Inventory.ContainsUID(usage.UID))
                    {
                        Game.ConquerStructures.BoothItem item = new Nyx.Server.Game.ConquerStructures.BoothItem();
                        item.Cost = usage.dwParam;
                        client.Inventory.TryGetItem(usage.UID, out item.Item);
                        Database.ConquerItemInformation infos = new Database.ConquerItemInformation(item.Item.ID, 0);
                        if (item.Item.Lock != 0 || item.Item.Suspicious || item.Item.Bound || infos.BaseInformation.Type != Database.ConquerItemBaseInformation.ItemType.Dropable)
                        {
                            return;
                        }
                        item.Cost_Type = usage.ID == ItemUsage.AddItemOnBoothForSilvers ? Nyx.Server.Game.ConquerStructures.BoothItem.CostType.Silvers : Nyx.Server.Game.ConquerStructures.BoothItem.CostType.ConquerPoints;
                        client.Booth.ItemList.Add(item.Item.UID, item);
                        client.Send(usage);
                        BoothItem Item = new BoothItem(true);
                        Item.Fill(item, client.Booth.Base.UID);
                        client.SendScreen(Item, false);
                    }
                }
            }
        }
        public static void BuyFromBooth(ItemUsage usage, Client.GameClient client)
        {
            Client.GameClient Owner = null;
            Game.Entity entity = null;
            Game.ConquerStructures.Booth booth = null;
            if (Game.ConquerStructures.Booth.TryGetValue(usage.dwParam, out booth))
            {//k that should be it, test and see ok
                Owner = booth.Base.Owner;
                entity = Owner.Entity;
                if (client.Trade.InTrade || Owner.Trade.InTrade)
                    return;
                if (Owner != null)
                {
                    if (Owner.Trade != null)
                    {
                        if (Owner.Trade.InTrade) return;
                    }
                    if (Owner.Entity.UID != client.Entity.UID)
                    {
                        if (Owner.Booth.ItemList.ContainsKey(usage.UID))
                        {
                            Game.ConquerStructures.BoothItem item;
                            if (Owner.Booth.ItemList.TryGetValue(usage.UID, out item))
                            {
                                if (client.Inventory.Count <= 39)
                                {
                                    if (item.Cost_Type == Nyx.Server.Game.ConquerStructures.BoothItem.CostType.Silvers)
                                    {
                                        if (client.Entity.Money >= item.Cost)
                                        {
                                            client.Entity.Money -= item.Cost;
                                            //Database.EntityTable.UpdateMoney(client);
                                            Owner.Entity.Money += item.Cost;
                                            //Database.EntityTable.UpdateMoney(Owner);
                                            client.Send(usage);
                                            client.Inventory.Add(item.Item, Game.Enums.ItemUse.Move);
                                            Database.ConquerItemTable.AddItem(ref item.Item, client);
                                            usage.ID = ItemUsage.RemoveItemFromBooth;
                                            Owner.Send(usage);
                                            Owner.Inventory.Remove(item.Item.UID, Game.Enums.ItemUse.None, false);
                                            usage.ID = ItemUsage.RemoveInventory;
                                            Owner.Send(usage);
                                            Owner.Booth.ItemList.Remove(item.Item.UID);
                                            Database.ConquerItemInformation infos = new Database.ConquerItemInformation(item.Item.ID, 0);
                                            Owner.Send(Constants.BoothItemSell(client.Entity.Name, infos.BaseInformation.Name, false, item.Cost));
                                           // Program.AddVendorLog(Owner.Entity.Name, client.Entity.Name, item.Cost.ToString() + " Silvers", item.Item);
                                        }
                                    }
                                    else
                                    {
                                        if (client.Entity.ConquerPoints >= item.Cost)
                                        {
                                            client.Entity.ConquerPoints -= item.Cost;
                                            Database.EntityTable.UpdateCps(client);
                                            Owner.Entity.ConquerPoints += item.Cost;
                                            Database.EntityTable.UpdateCps(Owner);
                                            client.Send(usage);
                                            client.Inventory.Add(item.Item, Game.Enums.ItemUse.Move);
                                            Database.ConquerItemTable.AddItem(ref item.Item, client);
                                            usage.ID = ItemUsage.RemoveItemFromBooth;
                                            Owner.Send(usage);
                                            Owner.Inventory.Remove(item.Item.UID, Game.Enums.ItemUse.None, false);
                                            usage.ID = ItemUsage.RemoveInventory;
                                            Owner.Send(usage);
                                            Owner.Booth.ItemList.Remove(item.Item.UID);
                                            Database.ConquerItemInformation infos = new Database.ConquerItemInformation(item.Item.ID, 0);
                                            Owner.Send(Constants.BoothItemSell(client.Entity.Name, infos.BaseInformation.Name, true, item.Cost));
                                          //  Program.AddVendorLog(Owner.Entity.Name, client.Entity.Name, item.Cost.ToString() + " CPs", item.Item);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (Game.ConquerStructures.Booth.TryGetValue2(usage.dwParam, out booth))
            {
                if (booth.ItemList.ContainsKey(usage.UID))
                {
                    Game.ConquerStructures.BoothItem item;
                    if (booth.ItemList.TryGetValue(usage.UID, out item))
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            if (item.Cost_Type == Nyx.Server.Game.ConquerStructures.BoothItem.CostType.Silvers)
                            {
                                if (client.Entity.Money >= item.Cost)
                                {
                                    client.Entity.Money -= item.Cost;
                                    client.Send(usage);
                                    client.Inventory.Add(item.Item, Game.Enums.ItemUse.Move);
                                    Database.ConquerItemTable.AddItem(ref item.Item, client);
                                    Database.ConquerItemInformation infos = new Database.ConquerItemInformation(item.Item.ID, 0);
                                   // Program.AddVendorLog("Joseph™[" + usage.dwParam.ToString() + "]", client.Entity.Name, item.Cost.ToString() + " Silvers", item.Item);
                                    var newitem = new Game.ConquerStructures.BoothItem();
                                    newitem.Regenerate(item, booth);
                                    Network.GamePackets.BoothItem Item = new Network.GamePackets.BoothItem(true);
                                    foreach (Game.ConquerStructures.BoothItem i in booth.ItemList.Values)
                                    {
                                        Item.Fill(i, usage.dwParam);
                                        client.Send(Item);
                                        item.Item.SendExtras(client);
                                    }
                                }
                            }
                            else
                            {
                                if (client.Entity.ConquerPoints >= item.Cost)
                                {
                                    client.Entity.ConquerPoints -= item.Cost;
                                    Database.EntityTable.UpdateCps(client);
                                    client.Send(usage);
                                    client.Inventory.Add(item.Item, Game.Enums.ItemUse.Move);
                                    Database.ConquerItemTable.AddItem(ref item.Item, client);
                                    Database.ConquerItemInformation infos = new Database.ConquerItemInformation(item.Item.ID, 0);
                                    //  Program.AddVendorLog("Joseph™[" + usage.dwParam.ToString() + "]", client.Entity.Name, item.Cost.ToString() + " CPs", item.Item);
                                    var newitem = new Game.ConquerStructures.BoothItem();
                                    newitem.Regenerate(item, booth);
                                    Network.GamePackets.BoothItem Item = new Network.GamePackets.BoothItem(true);
                                    foreach (Game.ConquerStructures.BoothItem i in booth.ItemList.Values)
                                    {
                                        Item.Fill(i, usage.dwParam);
                                        client.Send(Item);
                                        item.Item.SendExtras(client);
                                    }
                                }
                            }
                        }

                    }
                }
            }
        }
        #endregion
        #region Mentor Apprentice
        public static void ChangeAppearance(Data generalData, GameClient client)
        {
            if (client.Entity.Tournament_Signed)
                return;
            generalData.UID = client.Entity.UID;
            client.Entity.Appearance = (Game.Enums.AppearanceType)generalData.dwParam;
            client.Appearance = (uint)client.Entity.Appearance;
            client.SendScreen(generalData, true);
        }
        public static void ChangeAppearance(GameClient client, Nyx.Server.Game.Enums.AppearanceType Type)
        {
            if (client.Entity.Tournament_Signed)
                return;
            Data generalData = new GamePackets.Data(true);
            generalData.UID = client.Entity.UID;
            generalData.ID = Data.AppearanceType;
            generalData.dwParam = (uint)Type;
            client.Entity.Appearance = Type;
            client.SendScreen(generalData, true);
        }
        static void ExpelApprentice(MentorApprentice ma, Client.GameClient client)
        {
            if (client.Apprentices.ContainsKey(ma.dwParam))
            {
                var appr = client.Apprentices[ma.dwParam];
                if (appr.IsOnline)
                {
                    ma.Type = MentorApprentice.DumpMentor;
                    ma.Online = false;
                    appr.Client.Send(ma);
                    appr.Client.Mentor = null;
                    appr.Client.ReviewMentor();
                }
                Database.KnownPersons.RemoveMentor(appr.ID);
                client.Apprentices.Remove(appr.ID);
            }
        }
        static void LeaveMentor(MentorApprentice ma, Client.GameClient client)
        {
            if (client.Mentor != null)
            {
                ma.Type = MentorApprentice.DumpMentor;
                client.Send(ma);
                if (client.Mentor.IsOnline)
                {
                    ma.Type = MentorApprentice.DumpApprentice;
                    client.Mentor.Client.Send(ma);
                    ApprenticeInformation AppInfo = new ApprenticeInformation();
                    AppInfo.Apprentice_ID = client.Entity.UID;
                    AppInfo.Apprentice_Level = 0;
                    AppInfo.Apprentice_Class = 0;
                    AppInfo.Apprentice_PkPoints = 0;
                    AppInfo.Apprentice_Name = client.Entity.Name;
                    AppInfo.Apprentice_Online = false;
                    AppInfo.Apprentice_Spouse_Name = "";
                    AppInfo.Enrole_date = 0;
                    AppInfo.Mentor_ID = client.Mentor.Client.Entity.UID;
                    AppInfo.Mentor_Mesh = client.Mentor.Client.Entity.Mesh;
                    AppInfo.Mentor_Name = client.Mentor.Client.Entity.Name;
                    AppInfo.Type = 2;
                    client.Mentor.Client.Send(AppInfo);
                    client.Mentor.Client.Apprentices.Remove(client.Entity.UID);
                }
                Database.KnownPersons.RemoveMentor(client.Entity.UID);

                client.Mentor = null;
                client.ReviewMentor();
            }
        }
        static void AddMentor(MentorApprentice ma, Client.GameClient client)
        {
            Client.GameClient Target = null;
            if (Kernel.GamePool.TryGetValue(ma.dwParam, out Target))
            {
                if (!client.Screen.Contains(Target.Entity.UID)) return;

                MentorApprentice Mentor = new MentorApprentice(true);
                Mentor.Type = MentorApprentice.AcceptRequestMentor;
                Mentor.dwParam = Target.Entity.UID;
                Mentor.UID = client.Entity.UID;
                Mentor.Dynamic = (byte)client.Entity.BattlePower;
                Mentor.Online = true;
                Mentor.Name = client.Entity.Name;

                Target.Send(Mentor);
            }
        }
        static void AddApprentice(MentorApprentice ma, Client.GameClient client)
        {
            Client.GameClient Target = null;
            if (Kernel.GamePool.TryGetValue(ma.dwParam, out Target))
            {
                if (!client.Screen.Contains(Target.Entity.UID)) return;
                if (client.apprtnum == 5) return;
                MentorApprentice Mentor = new MentorApprentice(true);
                Mentor.Type = MentorApprentice.AcceptRequestApprentice;
                Mentor.dwParam = Target.Entity.UID;
                Mentor.UID = client.Entity.UID;
                Mentor.Dynamic = (byte)client.Entity.BattlePower;
                Mentor.Online = true;
                Mentor.Name = client.Entity.Name;

                Target.Send(Mentor);
            }
        }
        static void AcceptRequestMentor(MentorApprentice ma, Client.GameClient client)
        {
            Client.GameClient Target = null;
            if (Kernel.GamePool.TryGetValue(ma.UID, out Target))
            {
                if (ma.Dynamic == 1)
                {
                    uint EnroleDate = (uint)(DateTime.Now.Year * 10000 + DateTime.Now.Month * 100 + DateTime.Now.Day);

                    Target.Mentor = new Nyx.Server.Game.ConquerStructures.Society.Mentor();
                    Target.Mentor.ID = client.Entity.UID;
                    Target.Mentor.Name = client.Entity.Name;
                    Target.Mentor.EnroleDate = EnroleDate;

                    MentorInformation Information = new MentorInformation(true);
                    Information.Mentor_Type = 1;
                    Information.Mentor_ID = Target.Mentor.Client.Entity.UID;
                    Information.Apprentice_ID = Target.Entity.UID;
                    Information.Enrole_Date = EnroleDate;
                    Information.Mentor_Level = Target.Mentor.Client.Entity.Level;
                    Information.Mentor_Class = Target.Mentor.Client.Entity.Class;
                    Information.Mentor_PkPoints = Target.Mentor.Client.Entity.PKPoints;
                    Information.Mentor_Mesh = Target.Mentor.Client.Entity.Mesh;
                    Information.Mentor_Online = true;
                    Information.Shared_Battle_Power = Target.Entity.BattlePowerFrom(Target.Mentor.Client.Entity);
                    Information.String_Count = 3;
                    Information.Mentor_Name = Target.Mentor.Client.Entity.Name;
                    Information.Apprentice_Name = Target.Entity.Name;
                    Information.Mentor_Spouse_Name = Target.Mentor.Client.Entity.Spouse;

                    Target.Send(Information);
                    Target.ReviewMentor();
                    ApprenticeInformation AppInfo = new ApprenticeInformation();
                    AppInfo.Apprentice_ID = Target.Entity.UID;
                    AppInfo.Apprentice_Level = Target.Entity.Level;
                    AppInfo.Apprentice_Name = Target.Entity.Name;
                    AppInfo.Apprentice_Class = Target.Entity.Class;
                    AppInfo.Apprentice_PkPoints = Target.Entity.PKPoints;
                    AppInfo.Apprentice_Online = true;
                    AppInfo.Apprentice_Spouse_Name = Target.Entity.Spouse;
                    AppInfo.Enrole_date = EnroleDate;
                    AppInfo.Mentor_ID = client.Entity.UID;
                    AppInfo.Mentor_Mesh = client.Entity.Mesh;
                    AppInfo.Mentor_Name = client.Entity.Name;
                    AppInfo.Type = 2;
                    client.Send(AppInfo);
                    client.Apprentices.Add(Target.Entity.UID, new Nyx.Server.Game.ConquerStructures.Society.Apprentice()
                    {
                        ID = Target.Entity.UID,
                        Name = Target.Entity.Name,
                        EnroleDate = EnroleDate
                    });
                    Database.KnownPersons.AddMentor(Target.Mentor, client.Apprentices[Target.Entity.UID]);
                }
                else
                {
                    Target.Send(new Message(client.Entity.Name + " declined your request.", System.Drawing.Color.Beige, Message.Talk));
                }
            }
        }
        static void AcceptRequestApprentice(MentorApprentice ma, Client.GameClient client)
        {
            Client.GameClient Target = null;
            if (Kernel.GamePool.TryGetValue(ma.UID, out Target))
            {
                if (ma.Dynamic == 1)
                {
                    uint EnroleDate = (uint)(DateTime.Now.Year * 10000 + DateTime.Now.Month * 100 + DateTime.Now.Day);
                    MentorInformation Information = new MentorInformation(true);
                    Information.Mentor_Type = 1;
                    Information.Mentor_ID = Target.Entity.UID;
                    Information.Apprentice_ID = client.Entity.UID;
                    Information.Enrole_Date = EnroleDate;
                    Information.Mentor_Level = Target.Entity.Level;
                    Information.Mentor_Class = Target.Entity.Class;
                    Information.Mentor_PkPoints = Target.Entity.PKPoints;
                    Information.Mentor_Mesh = Target.Entity.Mesh;
                    Information.Mentor_Online = true;
                    Information.Shared_Battle_Power = client.Entity.BattlePowerFrom(Target.Entity);
                    Information.String_Count = 3;
                    Information.Mentor_Name = Target.Entity.Name;
                    Information.Apprentice_Name = client.Entity.Name;
                    Information.Mentor_Spouse_Name = Target.Entity.Spouse;

                    client.Send(Information);
                    client.Mentor = new Nyx.Server.Game.ConquerStructures.Society.Mentor();
                    client.Mentor.ID = Target.Entity.UID;
                    client.Mentor.Name = Target.Entity.Name;
                    client.Mentor.EnroleDate = EnroleDate;
                    client.ReviewMentor();

                    ApprenticeInformation AppInfo = new ApprenticeInformation();
                    AppInfo.Apprentice_ID = client.Entity.UID;
                    AppInfo.Apprentice_Level = client.Entity.Level;
                    AppInfo.Apprentice_Name = client.Entity.Name;
                    AppInfo.Apprentice_Online = true;
                    AppInfo.Apprentice_Class = client.Entity.Class;
                    AppInfo.Apprentice_PkPoints = client.Entity.PKPoints;
                    AppInfo.Apprentice_Spouse_Name = client.Entity.Spouse;
                    AppInfo.Enrole_date = EnroleDate;
                    AppInfo.Mentor_ID = Target.Entity.UID;
                    AppInfo.Mentor_Mesh = Target.Entity.Mesh;
                    AppInfo.Mentor_Name = Target.Entity.Name;
                    AppInfo.Type = 2;
                    Target.Send(AppInfo);
                    Target.Apprentices.Add(client.Entity.UID, new Nyx.Server.Game.ConquerStructures.Society.Apprentice()
                    {
                        ID = client.Entity.UID,
                        Name = client.Entity.Name,
                        EnroleDate = EnroleDate
                    });
                    Database.KnownPersons.AddMentor(client.Mentor, Target.Apprentices[client.Entity.UID]);
                }
                else
                {
                    Target.Send(new Message(client.Entity.Name + " declined your request.", System.Drawing.Color.Beige, Message.Talk));
                }
            }
        }
        #endregion
        #region TradePartners
        static void RequestTradePartnership(TradePartner partner, Client.GameClient client)
        {
            if (client.Screen.Contains(partner.UID))
            {
                var Client = Kernel.GamePool[partner.UID];
                if (Client != null)
                {
                    if (Client.TradePartnerRequest != client.Entity.UID)
                    {
                        client.TradePartnerRequest = Client.Entity.UID;
                        partner.UID = client.Entity.UID;
                        partner.Name = client.Entity.Name;
                        Client.Send(partner);
                    }
                    else
                    {
                        DateTime Now = DateTime.Now;
                        client.Partners.Add(Client.Entity.UID, new Nyx.Server.Game.ConquerStructures.Society.TradePartner()
                        {
                            ID = Client.Entity.UID,
                            Name = Client.Entity.Name,
                            ProbationStartedOn = Now
                        });
                        Client.Partners.Add(client.Entity.UID, new Nyx.Server.Game.ConquerStructures.Society.TradePartner()
                        {
                            ID = Client.Entity.UID,
                            Name = Client.Entity.Name,
                            ProbationStartedOn = Now
                        });
                        client.Send(new TradePartner(true)
                        {
                            UID = Client.Entity.UID,
                            Type = TradePartner.AddPartner,
                            Name = Client.Entity.Name,
                            HoursLeft = (int)(new TimeSpan(Now.AddDays(3).Ticks).TotalHours - new TimeSpan(Now.Ticks).TotalHours),
                            Online = true
                        });
                        Client.Send(new TradePartner(true)
                        {
                            UID = client.Entity.UID,
                            Type = TradePartner.AddPartner,
                            Name = client.Entity.Name,
                            HoursLeft = (int)(new TimeSpan(Now.AddDays(3).Ticks).TotalHours - new TimeSpan(Now.Ticks).TotalHours),
                            Online = true
                        });
                        Database.KnownPersons.AddPartner(client, client.Partners[Client.Entity.UID]);
                        client.SendScreen(new Message(Client.Entity.Name + " has begun " + client.Entity.Name + " a partnership probation for three days!", System.Drawing.Color.Red, Message.TopLeft), true);
                    }
                }
            }
        }
        static void RejectPartnership(TradePartner partner, Client.GameClient client)
        {
            client.TradePartnerRequest = 0;
            var Client = Kernel.GamePool[partner.UID];
            if (Client != null)
            {
                Client.Send(new TradePartner(true)
                {
                    UID = client.Entity.UID,
                    Type = TradePartner.RejectRequest,
                    Name = client.Entity.Name,
                    Online = true
                });
            }
        }
        static void BreakPartnership(TradePartner partner, Client.GameClient client)
        {
            if (client.Partners.ContainsKey(partner.UID))
            {
                GameClient Client;
                if (Kernel.GamePool.TryGetValue(partner.UID, out Client))
                {
                    Client.Partners.Remove(client.Entity.UID);
                    Client.Send(new TradePartner(true)
                    {
                        UID = client.Entity.UID,
                        Type = TradePartner.BreakPartnership,
                        Name = "",
                        Online = false
                    });
                    Client.Send(new Message(client.Entity.Name + " has broken the partnership with you.", System.Drawing.Color.Red, Message.TopLeft));

                    client.Send(new TradePartner(true)
                    {
                        UID = partner.UID,
                        Type = TradePartner.BreakPartnership,
                        Name = "",
                        Online = false
                    });
                    client.Partners.Remove(partner.UID);
                    Database.KnownPersons.RemovePartner(client, partner.UID);
                    Client.Send(new Message("You have broken the partnership with " + partner.Name + ".", System.Drawing.Color.Red, Message.TopLeft));
                }
            }
        }
        #endregion
        #region KnownPersons
        private static void RemoveFriend(KnownPersons knownperson, Client.GameClient client)
        {
            if (client.Friends.ContainsKey(knownperson.UID))
            {
                Game.ConquerStructures.Society.Friend friend = client.Friends[knownperson.UID];
                if (friend.IsOnline)
                {
                    friend.Client.Friends.Remove(client.Entity.UID);
                    friend.Client.Send(new KnownPersons(true)
                    {
                        UID = client.Entity.UID,
                        Type = KnownPersons.RemovePerson,
                        Name = "",
                        Online = false
                    });
                }
                client.Friends.Remove(friend.ID);
                client.Send(new KnownPersons(true)
                {
                    UID = friend.ID,
                    Type = KnownPersons.RemovePerson,
                    Name = "",
                    Online = false
                });
                Database.KnownPersons.RemoveFriend(client, friend.ID);
            }
        }
        private static void RemoveEnemy(KnownPersons knownperson, Client.GameClient client)
        {
            if (client.Enemy.ContainsKey(knownperson.UID))
            {
                Game.ConquerStructures.Society.Enemy enemy = client.Enemy[knownperson.UID];

                client.Enemy.Remove(enemy.ID);
                client.Send(new KnownPersons(true)
                {
                    UID = enemy.ID,
                    Type = KnownPersons.RemovePerson,
                    Name = "",
                    Online = false
                });
                Database.KnownPersons.RemoveEnemy(client, enemy.ID);
            }
        }
        private static void AcceptFriend(KnownPersons knownperson, Client.GameClient client)
        {
            if (!client.Friends.ContainsKey(knownperson.UID))
            {
                if (Kernel.GamePool.ContainsKey(knownperson.UID))
                {
                    Client.GameClient Client = Kernel.GamePool[knownperson.UID];
                    if (Client != null)
                    {
                        if (client != null)
                        {
                            if (client.Socket.Alive)
                            {
                                if (!Client.Friends.ContainsKey(client.Entity.UID))
                                {
                                    client.Friends.Add(Client.Entity.UID,
                                        new Nyx.Server.Game.ConquerStructures.Society.Friend()
                                        {
                                            ID = Client.Entity.UID,
                                            Name = Client.Entity.Name
                                        });
                                    Client.Friends.Add(client.Entity.UID,
                                        new Nyx.Server.Game.ConquerStructures.Society.Friend()
                                        {
                                            ID = client.Entity.UID,
                                            Name = client.Entity.Name
                                        });
                                    client.Send(new KnownPersons(true)
                                    {
                                        UID = Client.Entity.UID,
                                        Type = KnownPersons.AddFriend,
                                        Name = Client.Entity.Name,
                                        Online = true
                                    });
                                    Client.Send(new KnownPersons(true)
                                    {
                                        UID = client.Entity.UID,
                                        Type = KnownPersons.AddFriend,
                                        Name = client.Entity.Name,
                                        Online = true
                                    });
                                    Database.KnownPersons.AddFriend(client, client.Friends[Client.Entity.UID]);
                                }
                            }
                        }
                    }
                }
            }
        }
        private static void AddFriend(KnownPersons knownperson, Client.GameClient client)
        {
            if (!client.Friends.ContainsKey(knownperson.UID))
            {
                if (Kernel.GamePool.ContainsKey(knownperson.UID))
                {
                    Client.GameClient Client = Kernel.GamePool[knownperson.UID];
                    if (Client != null)
                    {
                        Client.Send(new PopupLevelBP(Client, client)
                        {
                            Requester = client.Entity.UID,
                            Receiver = Client.Entity.UID,
                            Level = client.Entity.Level,
                            BattlePower = (uint)client.Entity.BattlePower
                        });
                        Client.Send(new KnownPersons(true)
                        {
                            UID = client.Entity.UID,
                            Type = KnownPersons.RequestFriendship,
                            Name = client.Entity.Name,
                            Unknowen = 1,
                            Online = true
                        });
                    }
                }
            }
        }
        public static void AddEnemy(Client.GameClient client, Client.GameClient enemy)
        {
            if (!client.Enemy.ContainsKey(enemy.Entity.UID))
            {
                client.Enemy.Add(enemy.Entity.UID, new Nyx.Server.Game.ConquerStructures.Society.Enemy()
                {
                    ID = enemy.Entity.UID,
                    Name = enemy.Entity.Name
                });
                client.Send(new KnownPersons(true)
                {
                    UID = enemy.Entity.UID,
                    Type = KnownPersons.AddEnemy,
                    Name = enemy.Entity.Name,
                    Online = true
                });
                Database.KnownPersons.AddEnemy(client, client.Enemy[enemy.Entity.UID]);
            }
        }
        #endregion
        #region Trade
        private static void RequestTrade(Trade trade, Client.GameClient client)
        {
            Client.GameClient _client = null;
            if (Kernel.GamePool.TryGetValue(trade.dwParam, out _client))
            {
                if (_client.Trade.InTrade || client.Trade.InTrade || client.Entity.UID == trade.dwParam ||
                    Kernel.GetDistance(client.Entity.X, client.Entity.Y, _client.Entity.X, _client.Entity.Y) >
                    Constants.pScreenDistance)
                {
                    client.Send(Constants.TradeInProgress);
                    return;
                }
                client.Trade.TraderUID = _client.Entity.UID;
                if (_client.Trade.TraderUID == client.Entity.UID)
                {
                    _client.Trade.InTrade = client.Trade.InTrade = true;
                    trade.Type = Trade.ShowTable;
                    client.Send(trade);
                    trade.dwParam = client.Entity.UID;
                    _client.Send(trade);
                }
                else
                {
                    client.Send(Constants.TradeRequest);
                    trade.dwParam = client.Entity.UID;
                    PopupLevelBP request = new PopupLevelBP(_client, client);
                    if (_client.Entity.Spouse != client.Entity.Name)
                    {
                        request.Requester = client.Entity.UID;
                        request.Receiver = _client.Entity.UID;
                        request.Level = client.Entity.Level;
                        request.BattlePower = (uint)client.Entity.BattlePower;
                    }
                    else
                    {
                        request.Requester = client.Entity.UID;
                        request.Receiver = _client.Entity.UID;
                        request.Level = client.Entity.Level;
                        request.BattlePower = (uint)client.Entity.BattlePower;
                        request.Marry = 1;
                    }
                    _client.Send(request);
                    _client.Send(trade);
                    _client.Send(request);
                }
            }
        }
        static void CloseTrade(Trade trade, Client.GameClient client)
        {
            Client.GameClient _client = null;
            if (Kernel.GamePool.TryGetValue(client.Trade.TraderUID, out _client))
            {
                _client.Trade = new Game.ConquerStructures.Trade();
                client.Trade = new Game.ConquerStructures.Trade();
                trade.Type = Trade.HideTable;
                trade.dwParam = _client.Entity.UID;
                client.Send(trade);
                trade.dwParam = client.Entity.UID;
                _client.Send(trade);
            }
        }
        static void AddTradeItem(Trade trade, Client.GameClient client)
        {
            ConquerItem item = null;
            if (client.Inventory.TryGetItem(trade.dwParam, out item))
            {
                Client.GameClient _client = null;
                if (Kernel.GamePool.TryGetValue(client.Trade.TraderUID, out _client))
                {
                    Database.ConquerItemInformation infos = new Database.ConquerItemInformation(item.ID, 0);
                    if (infos.BaseInformation.Type != Database.ConquerItemBaseInformation.ItemType.Dropable || (item.Lock != 0 && !client.Partners.ContainsKey(_client.Entity.UID) && !client.Partners[_client.Entity.UID].StillOnProbation) || item.Bound || item.Suspicious)
                    {
                        trade.Type = Trade.RemoveItem;
                        client.Send(trade);
                        return;
                    }
                    if (_client.Inventory.Count + client.Trade.Items.Count >= 40 || client.Trade.Items.Count == 20)
                    {
                        trade.Type = Trade.RemoveItem;
                        client.Send(trade);
                        client.Send(Constants.TradeInventoryFull);
                        return;
                    }
                    client.Trade.Items.Add(item);
                    item.Mode = Game.Enums.ItemMode.Trade;
                    item.Send(_client);
                }
                else
                {
                    Network.GamePackets.NpcReply npc = new Network.GamePackets.NpcReply(6, "you can't trade any Special Soul only can sell in market in Shop more than 100k cps ok?");
                    npc.OptionID = 255;
                    client.Send(npc.Encode());
                }

            }
        }
        static void SetTradeMoney(Trade trade, Client.GameClient client)
        {
            Client.GameClient _client = null;
            if (Kernel.GamePool.TryGetValue(client.Trade.TraderUID, out _client))
            {
                if (client.Trade.Money == 0)
                {
                    if (client.Entity.Money >= trade.dwParam)
                    {
                        client.Trade.Money = trade.dwParam;
                        trade.Type = Trade.ShowMoney;
                        _client.Send(trade);
                    }
                    else
                        CloseTrade(trade, client);
                }
            }
        }
        static void SetTradeConquerPoints(Trade trade, Client.GameClient client)
        {
            Client.GameClient _client = null;
            if (Kernel.GamePool.TryGetValue(client.Trade.TraderUID, out _client))
            {
                if (client.Trade.ConquerPoints == 0)
                {
                    if (client.Entity.ConquerPoints >= trade.dwParam)
                    {
                        client.Trade.ConquerPoints = trade.dwParam;
                        trade.Type = Trade.ShowConquerPoints;
                        _client.Send(trade);
                    }
                    else
                        CloseTrade(trade, client);
                }
            }
        }
        static void AcceptTrade(Trade trade, Client.GameClient client)
        {
            Client.GameClient _client = null;
            if (Kernel.GamePool.TryGetValue(client.Trade.TraderUID, out _client))
            {
                client.Trade.Accepted = true;
                _client.Send(trade);
                if (_client.Trade.Accepted)
                {
                    lock (client.ItemSyncRoot)
                    {
                        lock (_client.ItemSyncRoot)
                        {
                            if (client.Inventory.Count + _client.Trade.Items.Count <= 40)
                            {
                                foreach (ConquerItem item in _client.Trade.Items)
                                {
                                    if (_client.Inventory.ContainsUID(item.UID))
                                    {
                                        client.Inventory.Add(item, Game.Enums.ItemUse.Move);
                                        _client.Inventory.Remove(item.UID, Game.Enums.ItemUse.None, true);
                                    }
                                }
                            }
                            if (_client.Inventory.Count + client.Trade.Items.Count <= 40)
                            {
                                foreach (ConquerItem item in client.Trade.Items)
                                {
                                    if (client.Inventory.ContainsUID(item.UID))
                                    {
                                        _client.Inventory.Add(item, Game.Enums.ItemUse.Move);
                                        client.Inventory.Remove(item.UID, Game.Enums.ItemUse.None, true);
                                    }
                                }
                            }

                            if (_client.Trade.Money <= _client.Entity.Money)
                            {
                                _client.Entity.Money -= _client.Trade.Money;
                                client.Entity.Money += _client.Trade.Money;
                            }
                            if (client.Trade.Money <= client.Entity.Money)
                            {
                                client.Entity.Money -= client.Trade.Money;
                                _client.Entity.Money += client.Trade.Money;
                            }
                            if (_client.Trade.ConquerPoints <= _client.Entity.ConquerPoints)
                            {
                                _client.Entity.ConquerPoints -= _client.Trade.ConquerPoints;
                                client.Entity.ConquerPoints += _client.Trade.ConquerPoints;
                            }
                            if (client.Trade.ConquerPoints <= client.Entity.ConquerPoints)
                            {
                                client.Entity.ConquerPoints -= client.Trade.ConquerPoints;
                                _client.Entity.ConquerPoints += client.Trade.ConquerPoints;
                            }
                            
                            trade.Type = Trade.HideTable;
                            trade.dwParam = client.Entity.UID;
                            client.Send(trade);
                            trade.dwParam = _client.Entity.UID;
                            _client.Send(trade);

                            _client.Trade = new Game.ConquerStructures.Trade();
                            client.Trade = new Game.ConquerStructures.Trade();
                            client.Entity.Money = (uint)client.Entity.Money;
                            _client.Entity.Money = (uint)_client.Entity.Money;
                            client.Entity.ConquerPoints = (uint)client.Entity.ConquerPoints;
                            _client.Entity.ConquerPoints = (uint)_client.Entity.ConquerPoints;
                            Database.EntityTable.UpdateCps(client);
                            Database.EntityTable.UpdateCps(_client);
                        }
                         
                    }
                }
            }
        }
        #endregion
        #region ItemHandler
        public static void StabilazeArtifact(ItemAddingStabilization stabilizate, Client.GameClient client)
        {
            ConquerItem Item = null;
            if (client.Inventory.TryGetItem(stabilizate.ItemUID, out Item) || (client.Equipment.TryGetItem(stabilizate.ItemUID) != null))
            {
                if (Item == null && client.Inventory.TryGetItem(stabilizate.ItemUID, out Item) == false && (client.Equipment.TryGetItem(stabilizate.ItemUID) != null))
                    Item = client.Equipment.TryGetItem(stabilizate.ItemUID);

                if (Item.Purification.PurificationDuration != 0)
                {
                    if (Item.Purification.PurificationItemID != 0)
                    {
                        List<uint> purificationStones = stabilizate.PurificationItems;
                        int sum = 0;
                        List<ConquerItem> PurificationStones = new List<ConquerItem>(purificationStones.Count);

                        for (int i = 0; i < purificationStones.Count; i++)
                        {
                            ConquerItem pItem = null;
                            if (client.Inventory.TryGetItem(purificationStones[i], out pItem))
                            {
                                if (pItem.ID == 723694)
                                {
                                    sum += 10;
                                    PurificationStones.Add(pItem);
                                }
                                if (pItem.ID == 723695)
                                {
                                    sum += 100;
                                    PurificationStones.Add(pItem);
                                }
                            }
                        }
                        if (sum >= Database.DataHolder.PurifyStabilizationPoints((byte)Item.Purification.PurificationLevel))
                        {
                            var Backup = Item.Purification;
                            Backup.PurificationDuration = 0;
                            Item.Purification = Backup;
                            Item.Send(client);

                            ItemAdding effect = new ItemAdding(true);
                            effect.Type = ItemAdding.StabilizationEffect;
                            effect.Append2(Backup);
                            client.Send(effect);

                            Database.ItemAddingTable.Stabilize(Item.UID, Backup.PurificationItemID);
                            foreach (var item in PurificationStones)
                                client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);
                        }
                    }
                }
                if (Item.ExtraEffect.EffectID != 0)
                {
                    if (Item.ExtraEffect.EffectID != 0)
                    {
                        List<uint> purificationStones = stabilizate.PurificationItems;
                        int sum = 0;
                        List<ConquerItem> PurificationStones = new List<ConquerItem>(purificationStones.Count);

                        for (int i = 0; i < purificationStones.Count; i++)
                        {
                            ConquerItem pItem = null;
                            if (client.Inventory.TryGetItem(purificationStones[i], out pItem))
                            {
                                if (pItem.ID == 723694)
                                {
                                    sum += 10;
                                    PurificationStones.Add(pItem);
                                }
                                if (pItem.ID == 723695)
                                {
                                    sum += 100;
                                    PurificationStones.Add(pItem);
                                }
                            }
                        }
                        if (sum >= Database.DataHolder.PurifyStabilizationPoints((byte)Item.ExtraEffect.EffectLevel))
                        {
                            var Backup = Item.ExtraEffect;
                            Backup.EffectDuration = 0;
                            Item.ExtraEffect = Backup;
                            Item.Send(client);

                            ItemAdding effect = new ItemAdding(true);
                            effect.Type = ItemAdding.StabilizationEffectRefined;
                            effect.Append2(Backup);
                            client.Send(effect);

                            Database.ItemAddingTable.Stabilize(Item.UID, Backup.EffectID);
                            foreach (var item in PurificationStones)
                                client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);
                        }
                    }
                }
            }
        }
        public static void PurifyRefinery(Purification ps, Client.GameClient client)
        {
            ConquerItem item = null, refine = null;
            client.Inventory.TryGetItem(ps.ItemUID, out item);
            client.Inventory.TryGetItem(ps.AddUID, out refine);
            if (refine != null)
            {
                if (item == null)
                    item = client.Equipment.TryGetItem(ps.ItemUID);
                if (item != null)
                {
                    Refinery.RefineryItem refineStats;
                    if (Kernel.DatabaseRefinery.TryGetValue(refine.ID, out refineStats))
                    {
                        Boolean valid = true;
                        if (item.Position < 100)
                        {
                            UInt32 iType = item.ID / 1000;
                            Positions pos = GetPositionFromID(item.ID);
                            if (pos != (Positions)refineStats.Position)
                                valid = false;
                            if (pos == Positions.Garment)
                                return;
                            if (pos == Positions.Steed)
                                return;
                            if (pos == Positions.Bottle)
                                return;
                            if (pos == Positions.SteedArmor)
                                return;
                            if (pos == Positions.SteedTalisman)
                                return;
                            if (pos == Positions.LeftAccessory)
                                return;
                            if (pos == Positions.RightAccessory)
                                return;
                            if (pos == Positions.DefenceTalisman)
                                return;
                            if (pos == Positions.AttackTalisman)
                                return;
                            else if (refineStats.Position == 5)
                                valid = item.IsTwoHander();
                            if (iType == refineStats.Position)
                                valid = true;
                        }
                        else
                        {
                            if (item.GetItemType() != (ConquerItem.ItemTypes)refineStats.Position)
                                valid = false;
                        }

                        if (valid)
                        {
                            if (item.Position == 7)
                                return;
                            if (item.Position == 9)
                                return;
                            if (item.Position == 11)
                                return;
                            if (item.Position == 12)
                                return;
                            if (item.Position == 10)
                                return;
                            if (item.Position == 18)
                                return;
                            if (item.Position == 17)
                                return;
                            if (item.Position == 15)
                                return;
                            if (item.Position == 16)
                                return;
                            if (item.Position == 19)
                                return;
                            if (item.ExtraEffect.EffectID > 0)
                                Database.ItemAddingTable.RemoveAdding(item.UID, item.ExtraEffect.EffectID);
                            ItemAdding.Refinery_ purify = new ItemAdding.Refinery_();
                            purify.AddedOn = DateTime.Now;
                            purify.Available = true;
                            purify.ItemUID = ps.ItemUID;
                            purify.EffectLevel = refineStats.Level;
                            if (client.Entity.VIPLevel == 0)
                                purify.EffectDuration = 7 * 24 * 60 * 60;
                            if (client.Entity.VIPLevel == 1)
                                purify.EffectDuration = 8 * 24 * 60 * 60;
                            if (client.Entity.VIPLevel == 2)
                                purify.EffectDuration = 9 * 24 * 60 * 60;
                            if (client.Entity.VIPLevel == 3)
                                purify.EffectDuration = 11 * 24 * 60 * 60;
                            if (client.Entity.VIPLevel == 4)
                                purify.EffectDuration = 14 * 24 * 60 * 60;
                            if (client.Entity.VIPLevel == 5)
                                purify.EffectDuration = 14 * 24 * 60 * 60;
                            if (client.Entity.VIPLevel == 6)
                                purify.EffectDuration = 14 * 24 * 60 * 60;
                            purify.EffectID = refineStats.Identifier;
                            purify.EffectPercent = refineStats.Percent;
                            Database.ItemAddingTable.AddExtraEffect(purify);
                            item.ExtraEffect = purify;
                            item.Mode = Nyx.Server.Game.Enums.ItemMode.Update;
                            item.Send(client);
                            client.Inventory.Remove(refine, Nyx.Server.Game.Enums.ItemUse.Remove);
                            client.CalculateStatBonus();
                            client.LoadItemStats();
                            client.ReshareClan();
                            if (client.Team != null)
                                foreach (var teammate in client.Team.Teammates)
                                    teammate.ReshareClan();
                            client.CalculateHPBonus();
                            client.Send(ps);
                            WindowsStats WS = new WindowsStats(client);
                            WS.Send(client);
                        }
                        else
                            client.Send(new Message(String.Format("You cannot refine your {0} with that {1}.",
                                Database.ConquerItemInformation.BaseInformations[item.ID].Name, Database.ConquerItemInformation.BaseInformations[refine.ID].Name), System.Drawing.Color.Red, Message.TopLeft));
                    }
                }
            }
        }
        public static bool CanPurify(GameClient Client, byte MeteorsNeeded)
        {
            int Stillneeded = MeteorsNeeded;
            Stillneeded -= Client.Inventory.Objects.Where(x => x.ID == 720027).Count() * 10;
            Stillneeded -= Client.Inventory.Objects.Where(x => x.ID == 1088001).Count();
            if (Stillneeded > 0)
                return false;
            return true;
        }
        public static void PurifyItem(Purification ps, Client.GameClient client)
        {
            int meteors = client.Inventory.Objects.Where(i => i.ID == 1088001).Count();
            int meteorsc = client.Inventory.Objects.Where(i => i.ID == 720027).Count();
            int count = meteors + (meteorsc * 10);
            ConquerItem Item = null, AddingItem = null;
            if (client.Inventory.TryGetItem(ps.ItemUID, out Item) && client.Inventory.TryGetItem(ps.AddUID, out AddingItem))
            {
                if (ps.ItemUID == ps.AddUID)
                    return;

                var PurifyInformation = Database.ConquerItemInformation.BaseInformations[AddingItem.ID];
                var ItemInformation = Database.ConquerItemInformation.BaseInformations[Item.ID];
                if (PurifyInformation.PurificationLevel > 0)
                {
                    if (ItemInformation.Level >= PurifyInformation.Level)
                    {
                        if (Nyx.Server.Soul.SoulProtection.Soul_Protections.ContainsKey(PurifyInformation.ID))
                        {
                            var info = Nyx.Server.Soul.SoulProtection.Soul_Protections[PurifyInformation.ID];
                            if (info.ItemType >= ConquerItem.AlternateGarment)
                            {
                                if (ItemInformation.ID / 1000 != info.ItemType)
                                    return;
                            }
                            else
                            {
                                if (GetPositionFromID(ItemInformation.ID) != info.Pos)
                                    return;
                            }

                        }
                        var doPurify = false;
                        if (client.Inventory.Contains(720027, (ushort)(PurifyInformation.PurificationMeteorNeed / 10)))
                        {
                            client.Inventory.Remove(720027, (ushort)(PurifyInformation.PurificationMeteorNeed / 10));
                            doPurify = true;
                        }
                        if (!doPurify && client.Inventory.Contains(1088001, PurifyInformation.PurificationMeteorNeed))
                        {
                            client.Inventory.Remove(1088001, (byte)PurifyInformation.PurificationMeteorNeed);
                            doPurify = true;
                        }
                        if (!doPurify && count >= (byte)PurifyInformation.PurificationMeteorNeed)
                        {
                            uint x = 0;
                            foreach (var item in client.Inventory.Objects)
                            {
                                if (doPurify) break;
                                if (item.ID != 720027)
                                    continue;
                                x += 10;
                                client.Inventory.Remove(720027, 1);
                                if (x >= (byte)PurifyInformation.PurificationMeteorNeed)
                                {
                                    doPurify = true;
                                    break;
                                }
                            }
                            foreach (var item in client.Inventory.Objects)
                            {
                                if (doPurify) break;
                                if (item.ID != 1088001)
                                    continue;
                                x++;
                                client.Inventory.Remove(1088001, 1);
                                if (x >= (byte)PurifyInformation.PurificationMeteorNeed)
                                {
                                    doPurify = true;
                                    break;
                                }
                            }
                        }
                        if (doPurify)
                        {
                            if (Item.Purification.PurificationItemID > 0)
                                Database.ItemAddingTable.RemoveAdding(Item.UID, Item.Purification.PurificationItemID);
                            client.Send(ps);
                            ItemAdding.Purification_ purify = new ItemAdding.Purification_();
                            purify.AddedOn = DateTime.Now;
                            purify.Available = true;
                            purify.ItemUID = ps.ItemUID;
                            purify.PurificationLevel = PurifyInformation.PurificationLevel;
                            if (client.Entity.VIPLevel == 1)
                                purify.PurificationDuration = 8 * 24 * 60 * 60;
                            else if (client.Entity.VIPLevel == 2)
                                purify.PurificationDuration = 9 * 24 * 60 * 60;
                            else if (client.Entity.VIPLevel == 3)
                                purify.PurificationDuration = 11 * 24 * 60 * 60;
                            else if (client.Entity.VIPLevel == 4)
                                purify.PurificationDuration = 14 * 24 * 60 * 60;
                            else if (client.Entity.VIPLevel == 5)
                                purify.PurificationDuration = 14 * 24 * 60 * 60;
                            else if (client.Entity.VIPLevel == 6)
                                purify.PurificationDuration = 14 * 24 * 60 * 60;
                            else
                                purify.PurificationDuration = 7 * 24 * 60 * 60;
                            purify.PurificationItemID = AddingItem.ID;
                            Database.ItemAddingTable.AddPurification(purify);
                            Item.Purification = purify;
                            Item.Mode = Nyx.Server.Game.Enums.ItemMode.Update;
                            Item.Send(client);
                            ItemAdding effect = new ItemAdding(true);
                            effect.Type = ItemAdding.PurificationEffect;
                            effect.Append2(purify);
                            client.Send(effect);
                            client.Inventory.Remove(AddingItem, Nyx.Server.Game.Enums.ItemUse.Remove);
                            client.CalculateStatBonus();
                            client.LoadItemStats();
                            client.ReshareClan();
                            if (client.Team != null)
                                foreach (var teammate in client.Team.Teammates)
                                    teammate.ReshareClan();
                            client.CalculateHPBonus();
                            client.Send(ps);
                        }
                    }
                }
            }
        }
        public static bool IsEquipment(long ID)
        {
            return ItemPosition((uint)ID) != 0;
        }
        public static void ReloadArrows(ConquerItem arrow, Client.GameClient client)
        {
            if (client.Entity.Class < 40 || client.Entity.Class > 45)
                return;
            if (client.Equipment.Free(4))
                return;
            if (client.Equipment.TryGetItem(4).ID / 1000 != 500)
                return;
            client.Equipment.DestroyArrow(5);
            uint id = 1050002;
            if (arrow != null)
                id = arrow.ID;
            if (client.Inventory.Contains(id, 1))
            {
                var newArrow = client.Inventory.GetItemByID(id);
                newArrow.Position = 5;
                client.Inventory.Remove(newArrow, Nyx.Server.Game.Enums.ItemUse.Move);
                Database.ConquerItemInformation infos = new Database.ConquerItemInformation(id, 0);
                client.Equipment.Add(newArrow);
                client.Equipment.Objects[4].UID += 0;
                client.Equipment.Objects[4].Send(client);
                ClientEquip equips = new ClientEquip();
                equips.DoEquips(client);
                client.Send(equips);
                client.Send(Constants.ArrowsReloaded);
            }
            else if (!client.Inventory.Contains(id, 1))
            {
                client.Send(Constants.NoArrows(Database.ConquerItemInformation.BaseInformations[id].Name));
            }
        }
        public static byte GetLevel(uint ID)
        {
            if (ItemPosition(ID) == (ushort)ConquerItem.Armor || ItemPosition(ID) == (ushort)ConquerItem.Head || IsShield(ID))
                return (byte)((ID % 100) / 10);
            else
                return (byte)((ID % 1000) / 10);
        }
        internal static bool IsShield(uint p)
        {
            return p / 1000 == 900;
        }
        internal static bool IsBow(uint p)
        {
            return p / 1000 == 500;
        }
        public static Boolean Success(Double Chance)
        {
            return ((Double)Generate(1, 1000000)) / 10000 >= 100 - Chance;
        }
        public static Int32 Generate(Int32 Min, Int32 Max)
        {
            if (Max != Int32.MaxValue)
                Max++;

            Int32 Value = 0;
            Value = Kernel.Random.Next(Min, Max);
            return Value;
        }
        public static Int32 Generate(UInt32 Min, UInt32 Max)
        {
            if (Max != Int32.MaxValue)
                Max++;

            Int32 Value = 0;

            Value = Kernel.Random.Next((int)Min, (int)Max);
            return Value;
        }
        static void ComposePlus(Compose compose, Client.GameClient client)
        {
            ConquerItem Item = null;
            ConquerItem[] Minors = null;
            if (client.Inventory.TryGetItem(compose[0], out Item) || (client.Equipment.TryGetItem(compose[0]) != null) || (compose.Mode == Compose.QuickCompose))
            {
                if (Item == null && client.Inventory.TryGetItem(compose[0], out Item) == false && (client.Equipment.TryGetItem(compose[0]) != null))
                    Item = client.Equipment.TryGetItem(compose[0]);

                if (compose.Mode == Compose.DragonBallUpgrade || compose.Mode == Compose.MeteorUpgrade)
                {
                    Minors = new ConquerItem[compose.Countx];
                    for (int i = 0; i < compose.Countx; i++)
                    {
                        if (!client.Inventory.TryGetItem(compose[i + 2], out Minors[i]))
                            return;
                        else
                            if (Minors[i].UID == Item.UID)
                                return;
                    }
                }
                else
                {
                    Minors = new ConquerItem[compose.Count - 1];
                    for (int i = 0; i < compose.Count - 1; i++)
                    {
                        if (!client.Inventory.TryGetItem(compose[i + 1], out Minors[i]))
                            return;
                        else
                            if (Minors[i].UID == Item.UID)
                                return;
                    }
                }
                ushort pos = ItemPosition(Item.ID);
                if (pos == ConquerItem.Bottle || pos == ConquerItem.Garment || pos == ConquerItem.LeftWeaponAccessory || pos == ConquerItem.RightWeaponAccessory || pos == ConquerItem.SteedArmor)
                    return;

                if (compose.Mode == Compose.ChanceUpgrade || compose.Mode == Compose.QuickCompose)
                {
                    if (Item.Plus < 12 && Item.PlusProgress != 0)
                    {
                        bool Changed = false;
                        byte Plus = Item.Plus;
                        double percent = (double)Item.PlusProgress / (double)Database.DataHolder.ComposePlusPoints(Item.Plus) * 100;
                        if (Kernel.Rate(percent))
                        {
                            Item.PlusProgress = 0;
                            Item.Plus++;
                        }
                        else
                            Item.PlusProgress = 0;
                        Item.Mode = Nyx.Server.Game.Enums.ItemMode.Update;
                        Item.Send(client);
                        Database.ConquerItemTable.UpdatePlus(Item);
                        Database.ConquerItemTable.UpdatePlusProgress(Item);
                        if (Item.Plus != Plus)
                            Changed = true;
                        if (Item.Plus >= 6 && Changed)
                        {
                            foreach (var client2 in Kernel.GamePool.Values)
                                client2.Send(new Message(client.Entity.Name + " has upgraded the bonus level of "+ Database.ConquerItemInformation.BaseInformations[Item.ID].Name+" to +"+Item.Plus+"!", System.Drawing.Color.Bisque, 2005));
                        }
                    }
                    return;
                }
                if (compose.Mode == Compose.MeteorUpgrade || compose.Mode == Compose.DragonBallUpgrade)
                {
                    Database.ConquerItemInformation info = new Nyx.Server.Database.ConquerItemInformation(Item.ID, Item.Plus);

                    Minors = new ConquerItem[compose.Count - 2];
                    for (int i = 0; i < compose.Count - 2; i++)
                    {
                        if (!client.Inventory.TryGetItem(compose[i + 2], out Minors[i]))
                            return;
                        else
                            if (Minors[i].UID == Item.UID)
                                return;
                    }
                    switch (compose.Mode)
                    {
                        case Compose.DragonBallUpgrade:
                            {
                                if (Item.ID % 10 == (byte)Game.Enums.ItemQuality.Super)
                                    break;
                                if (Item.Durability < Item.MaximDurability)
                                    break;
                                // byte chance = (byte)(70 - ((infos.BaseInformation.Level - (infos.BaseInformation.Level > 100 ? 30 : 0)) / (10 - Item.ID % 10)));
                                byte cost = DragonBallUpgradeCost(Item, info);
                                double chance = (((double)compose.Countx / (double)cost) * 100);
                                if (Success(chance))
                                {
                                    switch ((Game.Enums.ItemQuality)(Item.ID % 10))
                                    {
                                        case Game.Enums.ItemQuality.Normal:
                                        case Game.Enums.ItemQuality.NormalV1:
                                        case Game.Enums.ItemQuality.NormalV2:
                                        case Game.Enums.ItemQuality.NormalV3: Item.ID = (Item.ID - (Item.ID % 10)) + (byte)Game.Enums.ItemQuality.Refined; break;
                                        default: Item.ID++; break;
                                    }
                                    Database.ConquerItemTable.UpdateItemID(Item);
                                    Item.Mode = Nyx.Server.Game.Enums.ItemMode.Update;
                                    Item.Send(client);
                                    client.Send(new ItemUsage(true)
                                    {
                                        UID = client.Entity.UID,
                                        dwParam = 1,
                                        ID = ItemUsage.DragonBallUpgrade
                                    });
                                }
                                else
                                {
                                    Item.Durability = (ushort)(Item.Durability / 2);
                                    Database.ConquerItemTable.UpdateDurabilityItem(Item);
                                    Item.Mode = Nyx.Server.Game.Enums.ItemMode.Update;
                                    Item.Send(client);
                                }
                                foreach (var item in Minors)
                                    client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);
                                if (compose.Countx > cost)
                                {
                                    var diff = compose.Countx - cost;
                                    client.Inventory.Add((uint)(Minors[0].ID == 720028 ? 1088000 : 1088001), 0, (byte)diff);
                                }
                                break;

                            }
                        case Compose.MeteorUpgrade:
                            {
                                if (info.BaseInformation.Level == ItemMaxLevel(ItemPosition(info.BaseInformation.ID)))
                                    break;
                                if (Item.Durability < Item.MaximDurability)
                                {
                                    client.MessageBox("Please! Repair It.", null, null);
                                    break;
                                }
                                byte cost = MeteorUpgradeCost(Item.ID);
                                if (ItemPosition(Item.ID) == (ushort)ConquerItem.Armor || ItemPosition(Item.ID) == (ushort)ConquerItem.Head || IsShield(Item.ID))
                                {
                                    if (info.BaseInformation.Level >= 110)
                                        cost = 1;
                                }
                                else
                                {
                                    if (info.BaseInformation.Level >= 115)
                                        cost = 1;
                                }
                                double chance = (((double)compose.Countx / (double)cost) * 100);

                                uint newid = info.CalculateUplevel();
                                if (newid != 0 && newid != Item.ID)
                                {
                                    if (Success(chance))
                                    {
                                        Item.ID = newid;
                                        info = new Nyx.Server.Database.ConquerItemInformation(Item.ID, Item.Plus);
                                        Item.Durability = Item.MaximDurability = info.BaseInformation.Durability;
                                        Database.ConquerItemTable.UpdateItemID(Item);
                                        Database.ConquerItemTable.UpdateDurabilityItem(Item);
                                        Item.Mode = Nyx.Server.Game.Enums.ItemMode.Update;
                                        Item.Send(client);

                                        client.Send(new ItemUsage(true)
                                        {
                                            UID = client.Entity.UID,
                                            dwParam = 1,
                                            ID = ItemUsage.MeteorUpgrade
                                        });

                                    }
                                    else
                                    {
                                        Item.Durability = (ushort)(Item.Durability / 2);
                                        Database.ConquerItemTable.UpdateDurabilityItem(Item);
                                        Item.Mode = Nyx.Server.Game.Enums.ItemMode.Update;
                                        Item.Send(client);
                                    }
                                }
                                foreach (var item in Minors)
                                    client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);
                                if (compose.Countx > cost)
                                {
                                    var diff = compose.Countx - cost;
                                    client.Inventory.Add((uint)(Minors[0].ID == 720028 ? 1088000 : 1088001), 0, (byte)diff);
                                }
                                break;
                            }
                    }
                }

                foreach (var item in Minors)
                {
                    var ItemPlus = item;
                    Database.ConquerItemInformation infos = new Nyx.Server.Database.ConquerItemInformation(Item.ID, Item.Plus);
                    switch (compose.Mode)
                    {
                        case Compose.CurrentSteed:
                        case Compose.Plus:
                            {
                                if (Item.Plus == 12 && Item.PlusProgress < 2000000 && Item.GetItemType() == ConquerItem.ItemTypes.WingID || Item.Plus == 12 && Item.PlusProgress < 2000000 && pos == ConquerItem.Wing || Item.Plus == 12 && Item.PlusProgress < 2000000 && pos == ConquerItem.Steed)
                                {
                                    Item.PlusProgress += Database.DataHolder.StonePlusPoints(ItemPlus.Plus);
                                    while (Item.PlusProgress > 2000000)
                                    {
                                        Item.PlusProgress = 2000000;
                                    }
                                    Item.Mode = Nyx.Server.Game.Enums.ItemMode.Update;
                                    Item.Send(client);

                                    Database.ConquerItemTable.UpdatePlusProgress(Item);
                                    client.Inventory.Remove(ItemPlus, Nyx.Server.Game.Enums.ItemUse.Remove);
                                }

                                if (Item.Plus < 12 && Item.GetItemType() != ConquerItem.ItemTypes.GarmentID_1 && Item.GetItemType() != ConquerItem.ItemTypes.GarmentID_2 && Item.GetItemType() != ConquerItem.ItemTypes.BottleID && Item.GetItemType() != ConquerItem.ItemTypes.RightAccessory1 && Item.GetItemType() != ConquerItem.ItemTypes.RightAccessory2 && Item.GetItemType() != ConquerItem.ItemTypes.RightAccessory3 && Item.GetItemType() != ConquerItem.ItemTypes.LeftAccessory)
                                {
                                    Item.PlusProgress += Database.DataHolder.StonePlusPoints(ItemPlus.Plus);
                                    while (Item.PlusProgress >= Database.DataHolder.ComposePlusPoints(Item.Plus) && Item.Plus != 12)
                                    {
                                        Item.PlusProgress -= Database.DataHolder.ComposePlusPoints(Item.Plus);
                                        Item.Plus++;
                                        if (Item.Plus >= 6)
                                        {
                                            foreach (var client2 in Kernel.GamePool.Values)
                                                client2.Send(new Message(client.Entity.Name + " has upgraded the bonus level of " + Database.ConquerItemInformation.BaseInformations[Item.ID].Name + " to +" + Item.Plus + "!", System.Drawing.Color.Bisque, 2005));
                  
                                        }
                                        if (Item.Plus == 12)
                                            Item.PlusProgress = 0;
                                    }
                                    Item.Mode = Nyx.Server.Game.Enums.ItemMode.Update;
                                    Item.Send(client);
                                    Database.ConquerItemTable.UpdatePlus(Item);
                                    Database.ConquerItemTable.UpdatePlusProgress(Item);
                                    client.Inventory.Remove(ItemPlus, Nyx.Server.Game.Enums.ItemUse.Remove);
                                }
                                break;
                            }
                        case Compose.NewSteed:
                            {
                                if (Item.Plus < 12)
                                {
                                    Item.PlusProgress += Database.DataHolder.StonePlusPoints(ItemPlus.Plus);
                                    while (Item.PlusProgress >= Database.DataHolder.ComposePlusPoints(Item.Plus) && Item.Plus != 12)
                                    {
                                        Item.PlusProgress -= Database.DataHolder.ComposePlusPoints(Item.Plus);
                                        Item.Plus++;
                                        if (Item.Plus == 12)
                                            Item.PlusProgress = 0;
                                    }
                                    Item.Mode = Nyx.Server.Game.Enums.ItemMode.Update;
                                    Item.Send(client);
                                    Database.ConquerItemTable.UpdatePlus(Item);
                                    client.Inventory.Remove(ItemPlus, Nyx.Server.Game.Enums.ItemUse.Remove);
                                }

                                int color1 = (int)Item.SocketProgress;
                                int color2 = (int)ItemPlus.SocketProgress;

                                int G1 = color1 & 0xFF;
                                int G2 = color2 & 0xFF;
                                int B1 = (color1 >> 8) & 0xFF;
                                int B2 = (color2 >> 8) & 0xFF;
                                int R1 = (color1 >> 16) & 0xFF;
                                int R2 = (color2 >> 16) & 0xFF;
                                Item.NextGreen = (byte)((int)Math.Floor(0.9 * G1) + (int)Math.Floor(0.1 * G2) + 1);
                                Item.NextBlue = (byte)((int)Math.Floor(0.9 * B1) + (int)Math.Floor(0.1 * B2) + 1);
                                Item.NextRed = (byte)((int)Math.Floor(0.9 * R1) + (int)Math.Floor(0.1 * R2) + 1);
                                Item.SocketProgress = (uint)(Item.NextGreen | (Item.NextBlue << 8) | (Item.NextRed << 16));

                                Item.Mode = Nyx.Server.Game.Enums.ItemMode.Update;
                                Item.Send(client);
                                Database.ConquerItemTable.UpdatePlusProgress(Item);
                                Database.ConquerItemTable.UpdateSocketProgress(Item);
                                //  Database.ConquerItemTable.UpdateNextSteedColor(Item);
                                client.Inventory.Remove(ItemPlus, Nyx.Server.Game.Enums.ItemUse.Remove);
                                break;
                            }

                    }
                }
            }
        }
        static byte DragonBallUpgradeCost(ConquerItem Item, Database.ConquerItemInformation info)
        {
            int change = 100;
            switch (Item.ID % 10)
            {
                case 6: change = 50; break;
                case 7: change = 33; break;
                case 8: change = 20; break;
                default: change = 100; break;
            }
            int level = info.BaseInformation.Level;
            if (level > 70)
                change = (int)(change * (100 - (level - 70) * 1.0) / 100);
            return (byte)(100 / change + 1);
        }
        public static byte MeteorUpgradeCost(uint ID)
        {
            int wQuality = (int)(ID % 10);
            byte nLevel = GetLevel(ID);
            switch (wQuality)
            {
                case 9:
                    {
                        if (ItemPosition(ID) == (ushort)ConquerItem.Armor || ItemPosition(ID) == (ushort)ConquerItem.Head || IsShield(ID))
                        {
                            if (nLevel <= 4) return 3;
                            if (nLevel == 5) return 25;
                            if (nLevel == 6) return 31;
                            if (nLevel == 7) return 40;
                            if (nLevel > 7) return 61;
                        }
                        else
                        {
                            if (nLevel <= 10)
                                return 3;
                            else if (nLevel <= 12)
                                return 14;
                            else if (nLevel <= 14)
                                return 15;
                            else if (nLevel <= 16)
                                return 18;
                            else if (nLevel <= 18)
                                return 20;
                            else if (nLevel <= 20)
                                return 25;
                            else
                                return 31;
                        }
                        break;
                    }
                case 8:
                    {
                        if (ItemPosition(ID) == (ushort)ConquerItem.Armor || ItemPosition(ID) == (ushort)ConquerItem.Head || IsShield(ID))
                        {
                            if (nLevel <= 4) return 2;
                            if (nLevel == 5) return 8;
                            if (nLevel == 6) return 10;
                            if (nLevel == 7) return 14;
                            if (nLevel > 7) return 20;
                        }
                        else
                        {
                            if (nLevel <= 10)
                                return 2;
                            else if (nLevel <= 12)
                                return 4;
                            else if (nLevel <= 16)
                                return 6;
                            else if (nLevel <= 18)
                                return 7;
                            else if (nLevel <= 20)
                                return 8;
                            else
                                return 9;
                        }
                        break;
                    }
                case 7:
                    {
                        if (ItemPosition(ID) == (ushort)ConquerItem.Armor || ItemPosition(ID) == (ushort)ConquerItem.Head || IsShield(ID))
                        {
                            if (nLevel <= 4) return 2;
                            if (nLevel > 4 && nLevel < 6) return 3;
                            if (nLevel == 6) return 4;
                            if (nLevel == 7) return 6;
                            if (nLevel > 7) return 9;
                        }
                        else
                        {
                            if (nLevel <= 15)
                                return 2;
                            else if (nLevel <= 20)
                                return 3;
                            else
                                return 4;
                        }
                        break;
                    }
                case 6:
                    {
                        if (ItemPosition(ID) == (ushort)ConquerItem.Armor || ItemPosition(ID) == (ushort)ConquerItem.Head || IsShield(ID))
                        {
                            if (nLevel <= 4) return 2;
                            if (nLevel > 4 && nLevel < 7) return 3;
                            if (nLevel == 7) return 4;
                            if (nLevel > 7) return 7;
                        }
                        else
                        {
                            if (nLevel <= 18)
                                return 2;
                            else
                                return 3;
                        }
                        break;
                    }
                default:
                    {
                        if (ItemPosition(ID) == (ushort)ConquerItem.Armor || ItemPosition(ID) == (ushort)ConquerItem.Head || IsShield(ID))
                        {
                            if (nLevel <= 4) return 2;
                            if (nLevel > 4 && nLevel < 7) return 3;
                            if (nLevel == 7) return 4;
                            if (nLevel > 7) return 7;
                        }
                        else
                        {
                            if (nLevel <= 19)
                                return 2;
                            else
                                return 3;
                        }
                        break;
                    }
            }
            return 0;
        }
        public static void SocketItem(ItemUsage usage, Client.GameClient client)
        {
            ConquerItem item = null;
            ConquerItem[] Minors = null;
            if (client.Inventory.TryGetItem(usage.UID, out item))
            {
                ushort pos = ItemPosition(item.ID);
                if (pos == ConquerItem.Bottle || pos == ConquerItem.Fan || pos == ConquerItem.Garment || pos == ConquerItem.LeftWeaponAccessory || pos == ConquerItem.RightWeaponAccessory || pos == ConquerItem.Steed || pos == ConquerItem.SteedArmor || pos == ConquerItem.SteedCrop || pos == ConquerItem.Tower || pos == ConquerItem.Wings)
                {
                    client.Send(new Message("Sorry can't make socket in this item !", System.Drawing.Color.Red, Message.Talk));
                    return;
                }

                Minors = new ConquerItem[usage.Batch.Length];
                for (int i = 0; i < usage.Batch.Length; i++)
                {
                    if (!client.Inventory.TryGetItem(usage.Batch[i], out Minors[i]))
                        return;
                    else
                        if (Minors[i].UID == item.UID)
                            return;
                }
                if (Minors.Length == 0)
                    return;
                if (item.SocketOne == Nyx.Server.Game.Enums.Gem.NoSocket)
                {
                    ushort cost = 1;
                    if (pos != ConquerItem.RightWeapon && pos != ConquerItem.LeftWeapon)
                        cost = 12;

                    if (client.Inventory.Contains(1088000, cost))
                    {
                        item.SocketOne = Nyx.Server.Game.Enums.Gem.EmptySocket;
                        item.Mode = Nyx.Server.Game.Enums.ItemMode.Update;
                        item.Send(client);
                        usage.dwParam = 1;
                        client.LoadItemStats();
                        Database.ConquerItemTable.UpdateSockets(item);
                        foreach (var xitem in Minors)
                        {
                            client.Inventory.Remove(xitem.UID, Nyx.Server.Game.Enums.ItemUse.Remove, true);
                        }
                    }
                }
                else if (item.SocketTwo == Nyx.Server.Game.Enums.Gem.NoSocket)
                {
                    ushort cost = 5;
                    if (pos != ConquerItem.RightWeapon && pos != ConquerItem.LeftWeapon)
                    {
                        cost = 1;
                        var minor = Minors.FirstOrDefault();
                        if (minor.ID == 1200005)
                        {
                            if (client.Inventory.Contains(1200005, cost))
                            {
                                if (Kernel.Rate((double)30))
                                {
                                    item.SocketTwo = Nyx.Server.Game.Enums.Gem.EmptySocket;
                                    item.Mode = Nyx.Server.Game.Enums.ItemMode.Update;
                                    item.Send(client);
                                    usage.dwParam = 1;
                                    client.LoadItemStats();
                                    Database.ConquerItemTable.UpdateSockets(item);
                                }
                                else
                                {
                                    usage.dwParam = 0;
                                    client.Inventory.Add(1200006, 0, 1);
                                }
                                foreach (var xitem in Minors)
                                {
                                    client.Inventory.Remove(xitem.UID, Nyx.Server.Game.Enums.ItemUse.Remove, true);
                                }
                            }
                        }
                        else if (minor.ID == 1200006)
                        {
                            cost = 7;
                            if (client.Inventory.Contains(1200006, cost))
                            {
                                item.SocketTwo = Nyx.Server.Game.Enums.Gem.EmptySocket;
                                item.Mode = Nyx.Server.Game.Enums.ItemMode.Update;
                                item.Send(client);
                                usage.dwParam = 1;
                                client.LoadItemStats();
                                Database.ConquerItemTable.UpdateSockets(item);
                                foreach (var xitem in Minors)
                                {
                                    client.Inventory.Remove(xitem.UID, Nyx.Server.Game.Enums.ItemUse.Remove, true);
                                }
                            }
                        }
                    }
                    else
                    {
                        if (client.Inventory.Contains(1088000, cost))
                        {
                            item.SocketTwo = Nyx.Server.Game.Enums.Gem.EmptySocket;
                            item.Mode = Nyx.Server.Game.Enums.ItemMode.Update;
                            item.Send(client);
                            usage.dwParam = 1;
                            client.LoadItemStats();
                            Database.ConquerItemTable.UpdateSockets(item);
                            foreach (var xitem in Minors)
                            {
                                client.Inventory.Remove(xitem.UID, Nyx.Server.Game.Enums.ItemUse.Remove, true);
                            }
                        }
                    }
                }
            }
        }
        static void SocketItem(EmbedSocket socket, Client.GameClient client)
        {
            ConquerItem Item = null;
            ConquerItem Gem = null;
            if (client.Inventory.TryGetItem(socket.ItemUID, out Item) || (client.Equipment.TryGetItem(socket.ItemUID) != null))
            {
                if (Item == null && client.Inventory.TryGetItem(socket.ItemUID, out Item) == false && (client.Equipment.TryGetItem(socket.ItemUID) != null))
                    Item = client.Equipment.TryGetItem(socket.ItemUID);
                ushort sock = ItemPosition(Item.ID);
                if (sock == 7 || sock == 9 || sock > 19)
                {
                    client.Send(new Message("Sorry can't make socket in this item !", System.Drawing.Color.Red, Message.Talk));
                    return;
                }
                if (client.Inventory.TryGetItem(socket.GemUID, out Gem) || socket.Mode == EmbedSocket.Remove)
                {
                    switch (socket.Mode)
                    {
                        case EmbedSocket.Add:
                            {
                                byte gemBase = (byte)(Gem.ID % 1000);
                                #region No ONecan make un allowedgem in Talisman
                                if (sock == (ushort)Positions.AttackTalisman)
                                {
                                    if (!(gemBase >= (byte)Game.Enums.Gem.NormalThunderGem && gemBase <= (byte)Game.Enums.Gem.SuperThunderGem))
                                    {
                                        client.Send(new Message("Sorry can't make socket in this item !", System.Drawing.Color.Red, Message.Talk));
                                        return;
                                    }
                                }
                                if (sock == (ushort)Positions.SteedTalisman)
                                {
                                    return;
                                }
                                if (sock == (ushort)Positions.DefenceTalisman)
                                {
                                    if (!(gemBase >= (byte)Game.Enums.Gem.NormalGloryGem && gemBase <= (byte)Game.Enums.Gem.SuperGloryGem))
                                    {
                                        client.Send(new Message("Sorry can't make socket in this item !", System.Drawing.Color.Red, Message.Talk));
                                        return;
                                    }
                                }
                                #endregion No ONecan make un allowedgem in Talisman
                                if (Enum.IsDefined(typeof(Game.Enums.Gem), gemBase))
                                {
                                    switch (socket.Slot)
                                    {
                                        case EmbedSocket.SlotOne:
                                            {
                                                if ((byte)Item.SocketOne == 255)
                                                {
                                                    Item.SocketOne = (Nyx.Server.Game.Enums.Gem)(Gem.ID % 1000);
                                                    Item.Mode = Nyx.Server.Game.Enums.ItemMode.Update;
                                                    Item.Send(client);
                                                    Database.ConquerItemTable.UpdateSockets(Item);
                                                    client.Inventory.Remove(Gem, Nyx.Server.Game.Enums.ItemUse.Remove);
                                                    break;
                                                }
                                                break;
                                            }
                                        case EmbedSocket.SlotTwo:
                                            {
                                                if ((byte)Item.SocketOne > 0 && (byte)Item.SocketOne < 255 || sock == (ushort)Positions.Wing)
                                                {
                                                    if ((byte)Item.SocketTwo == 255)
                                                    {
                                                        Item.SocketTwo = (Nyx.Server.Game.Enums.Gem)(Gem.ID % 1000);
                                                        Item.Mode = Nyx.Server.Game.Enums.ItemMode.Update;
                                                        Item.Send(client);
                                                        Database.ConquerItemTable.UpdateSockets(Item);
                                                        client.Inventory.Remove(Gem, Nyx.Server.Game.Enums.ItemUse.Remove);
                                                    }
                                                }
                                                else if ((byte)Item.SocketOne == 255 && sock != (ushort)Positions.Wing)
                                                {
                                                    Item.SocketOne = (Nyx.Server.Game.Enums.Gem)(Gem.ID % 1000);
                                                    Item.Mode = Nyx.Server.Game.Enums.ItemMode.Update;
                                                    Item.Send(client);
                                                    Database.ConquerItemTable.UpdateSockets(Item);
                                                    client.Inventory.Remove(Gem, Nyx.Server.Game.Enums.ItemUse.Remove);
                                                }
                                                break;
                                            }
                                    }
                                }
                                break;
                            }
                        case EmbedSocket.Remove:
                            {
                                switch (socket.Slot)
                                {
                                    case EmbedSocket.SlotOne:
                                        {
                                            if ((byte)Item.SocketOne != 0)
                                            {
                                                Item.SocketOne = Nyx.Server.Game.Enums.Gem.EmptySocket;
                                                if ((byte)Item.SocketTwo != 0 && (byte)Item.SocketTwo != 255 && ItemPositionFromID(Item.ID) != Positions.Wing)
                                                {
                                                    Item.SocketOne = Item.SocketTwo;
                                                    Item.SocketTwo = Nyx.Server.Game.Enums.Gem.EmptySocket;
                                                }
                                                Item.Mode = Nyx.Server.Game.Enums.ItemMode.Update;
                                                Item.Send(client);
                                                Database.ConquerItemTable.UpdateSockets(Item);
                                                break;
                                            }
                                            break;
                                        }
                                    case EmbedSocket.SlotTwo:
                                        {
                                            if ((byte)Item.SocketTwo != 0 && (byte)Item.SocketTwo != 255)
                                            {
                                                Item.SocketTwo = Nyx.Server.Game.Enums.Gem.EmptySocket;
                                                Item.Mode = Nyx.Server.Game.Enums.ItemMode.Update;
                                                Item.Send(client);
                                                Database.ConquerItemTable.UpdateSockets(Item);
                                            }
                                            else
                                            {
                                                if ((byte)Item.SocketOne != 0)
                                                {
                                                    Item.SocketOne = Nyx.Server.Game.Enums.Gem.EmptySocket;
                                                    Item.Mode = Nyx.Server.Game.Enums.ItemMode.Update;
                                                    Item.Send(client);
                                                    Database.ConquerItemTable.UpdateSockets(Item);
                                                }
                                            }
                                            break;
                                        }
                                }
                                break;
                            }
                    }
                }
                client.Send(socket);
                Thread.Sleep(500);
            }
        }
        static void LockItem(ItemLock itemLock, Client.GameClient client)
        {
            ConquerItem item = null;
            if (client.Inventory.TryGetItem(itemLock.UID, out item))
            {
                itemLock.ID = 1;
                item.Lock = 1;
                item.Mode = Game.Enums.ItemMode.Update;
                client.Send(itemLock);
                item.Send(client);
                Database.ConquerItemTable.UpdateLock(item);
            }
            else if (client.Equipment.TryGetItem(itemLock.UID) != null)
            {
                item = client.Equipment.TryGetItem(itemLock.UID);
                itemLock.ID = 1;
                item.Lock = 1;
                item.Mode = Game.Enums.ItemMode.Update;
                client.Send(itemLock);
                item.Send(client);
                Database.ConquerItemTable.UpdateLock(item);
            }
        }
        static void UnlockItemInstant(ItemLock itemLock, Client.GameClient client)
        {
            ConquerItem item = null;
            if (client.Inventory.TryGetItem(itemLock.UID, out item))
            {
                if (item.Lock == 1)
                {
                    item.Lock = 0;
                    item.Mode = Game.Enums.ItemMode.Update;
                    item.Send(client);
                    Database.ConquerItemTable.UpdateLock(item);
                }
                else
                    client.Send(new Message("Can't unlock an item that is in progress of unlocking.", System.Drawing.Color.FloralWhite, Message.TopLeft));
            }
        }
        static void UnlockItem5Days(ItemLock itemLock, Client.GameClient client)
        {
            ConquerItem item = null;
            if (client.Inventory.TryGetItem(itemLock.UID, out item))
            {
                if (item.Lock == 1)
                {
                    item.Lock = 2;
                    item.UnlockEnd = DateTime.Now.AddDays(5);
                    item.Mode = Game.Enums.ItemMode.Update;
                    item.Send(client);
                    Database.ConquerItemTable.UpdateLock(item);
                }
                else
                    client.Send(new Message("Can't unlock an item that is in progress of unlocking.", System.Drawing.Color.FloralWhite, Message.TopLeft));
            }
        }
        public static void SocketTalismanWithItem(ItemUsage itemUsage, Client.GameClient client)
        {
            ConquerItem talisman = client.Equipment.TryGetItem(itemUsage.UID);
            if (talisman == null)
                client.Inventory.TryGetItem(itemUsage.UID, out talisman);
            ConquerItem item = null;
            if (client.Inventory.TryGetItem(itemUsage.dwParam2, out item))
            {
                if (talisman == null) return;
                if (item.ID / 1000 == talisman.ID / 1000) return;
                if (item.Bound == true) return;
                if (talisman.SocketTwo != Game.Enums.Gem.NoSocket) return;
                ushort Points = 0;
                switch (item.ID % 10)
                {
                    case 6:
                        Points += 5; break;
                    case 7:
                        Points += 10; break;
                    case 8:
                        Points += 40; break;
                    case 9:
                        Points += 1000; break;
                }
                Points += Database.DataHolder.TalismanPlusPoints(item.Plus);
                int position = ItemPosition(item.ID);
                switch (position)
                {
                    case 0:
                        return;
                    case 4:
                    case 5:
                        if (item.ID % 10 >= 8)
                        {
                            if (item.SocketOne != Game.Enums.Gem.NoSocket)
                                Points += 160;
                            if (item.SocketTwo != Game.Enums.Gem.NoSocket)
                                Points += 800;
                        }
                        break;
                    default:
                        if (item.ID % 10 >= 8)
                        {
                            if (item.SocketOne != Game.Enums.Gem.NoSocket)
                                Points += 2000;
                            if (item.SocketTwo != Game.Enums.Gem.NoSocket)
                                Points += 6000;
                        }
                        break;
                }
                talisman.SocketProgress += Points;
                if (talisman.SocketOne == Game.Enums.Gem.NoSocket)
                {
                    if (talisman.SocketProgress >= 8000)
                    {
                        talisman.SocketProgress -= 8000;
                        talisman.SocketOne = Game.Enums.Gem.EmptySocket;
                        talisman.Mode = Game.Enums.ItemMode.Update;
                        talisman.Send(client);
                    }
                }
                if (talisman.SocketOne != Game.Enums.Gem.NoSocket)
                {
                    if (talisman.SocketProgress >= 20000)
                    {
                        talisman.SocketProgress = 0;
                        talisman.SocketTwo = Game.Enums.Gem.EmptySocket;
                    }
                }
                Database.ConquerItemTable.UpdateSocketProgress(talisman);
                Database.ConquerItemTable.UpdateSockets(talisman);
                talisman.Mode = Game.Enums.ItemMode.Update;
                talisman.Send(client);
                client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
            }
            client.LoadItemStats();
        }
        public static void SocketTalismanWithCPs(ItemUsage itemUsage, Client.GameClient client)
        {
            ConquerItem talisman = client.Equipment.TryGetItem(itemUsage.UID);
            if (talisman == null)
                client.Inventory.TryGetItem(itemUsage.UID, out talisman);
            if (talisman == null) return;
            ushort pos = ItemPosition(talisman.ID);
            if (pos != ConquerItem.Fan && pos != ConquerItem.Tower && pos != ConquerItem.Wings) return;
            uint price = 0;
            if (talisman.SocketOne == Nyx.Server.Game.Enums.Gem.NoSocket)
            {
                double procent = 100 - (talisman.SocketProgress * 25600 / 2048000);
                if (100 - procent < 25) return;
                price = (uint)(procent * 55);
            }
            else if (talisman.SocketTwo == Nyx.Server.Game.Enums.Gem.NoSocket)
            {
                double procent = 100 - (talisman.SocketProgress * 25600 / 5120000);
                if (100 - procent < 25) return;
                price = (uint)(procent * 110);
            }
            else return;
            if (client.Entity.ConquerPoints >= price)
            {
                client.Entity.ConquerPoints -= price;
                if (talisman.SocketOne == Game.Enums.Gem.NoSocket)
                    talisman.SocketOne = Game.Enums.Gem.EmptySocket;
                else if (talisman.SocketTwo == Game.Enums.Gem.NoSocket)
                    talisman.SocketTwo = Game.Enums.Gem.EmptySocket;
                talisman.SocketProgress = 0;
                Database.ConquerItemTable.UpdateSockets(talisman);
                talisman.Mode = Game.Enums.ItemMode.Update;
                talisman.Send(client);
            }
            client.LoadItemStats();
        }
        public static void EnchantItem(ItemUsage itemUsage, Client.GameClient client)
        {
            ConquerItem Item = null, EnchantGem = null;
            if (client.Inventory.TryGetItem(itemUsage.UID, out Item) && client.Inventory.TryGetItem(itemUsage.dwParam, out EnchantGem))
            {
                ushort pos = ItemPosition(Item.ID);
                if (pos == ConquerItem.Bottle || pos == ConquerItem.Fan || pos == ConquerItem.Garment || pos == ConquerItem.LeftWeaponAccessory || pos == ConquerItem.RightWeaponAccessory || pos == ConquerItem.Steed || pos == ConquerItem.SteedArmor || pos == ConquerItem.SteedCrop || pos == ConquerItem.Tower || pos == ConquerItem.Wings)
                    return;
                byte gemBase = (byte)(EnchantGem.ID % 1000);
                if (Enum.IsDefined(typeof(Game.Enums.Gem), gemBase))
                {
                    byte Enchant = 0;
                    switch (EnchantGem.ID % 10)
                    {
                        case 1:
                            {
                                Enchant = (byte)Kernel.Random.Next(1, 59);
                                break;
                            }
                        case 2:
                            {
                                if (EnchantGem.ID == 700012)
                                    Enchant = (byte)Kernel.Random.Next(100, 159);
                                else if (EnchantGem.ID == 700002 || EnchantGem.ID == 700052 || EnchantGem.ID == 700062)
                                    Enchant = (byte)Kernel.Random.Next(60, 109);
                                else if (EnchantGem.ID == 700032)
                                    Enchant = (byte)Kernel.Random.Next(80, 129);
                                else
                                    Enchant = (byte)Kernel.Random.Next(40, 89);
                                break;
                            }
                        default:
                            {
                                if (EnchantGem.ID == 700013)
                                    Enchant = (byte)Kernel.Random.Next(200, 255);
                                else if (EnchantGem.ID == 700003 || EnchantGem.ID == 700073 || EnchantGem.ID == 700033)
                                    Enchant = (byte)Kernel.Random.Next(170, 229);
                                else if (EnchantGem.ID == 700063 || EnchantGem.ID == 700053)
                                    Enchant = (byte)Kernel.Random.Next(140, 199);
                                else if (EnchantGem.ID == 700023)
                                    Enchant = (byte)Kernel.Random.Next(90, 149);
                                else
                                    Enchant = (byte)Kernel.Random.Next(70, 119);
                                break;
                            }
                    }
                    client.Send(Constants.Enchant(Item.Enchant, Enchant));
                    if (Enchant > Item.Enchant)
                    {
                        Item.Enchant = Enchant;
                        Item.Mode = Nyx.Server.Game.Enums.ItemMode.Update;
                        Item.Send(client);
                        Database.ConquerItemTable.UpdateEnchant(Item);
                        client.Inventory.Remove(EnchantGem, Nyx.Server.Game.Enums.ItemUse.Remove);
                    }
                    else
                    {
                        client.Inventory.Remove(EnchantGem, Nyx.Server.Game.Enums.ItemUse.Remove);
                    }
                }
            }
        }
        static void UseItem(ConquerItem item, Client.GameClient client)
        {
            Database.ConquerItemInformation infos = new Database.ConquerItemInformation(item.ID, 0);
            if (client.Booth != null)
                return;
            client.Entity.UseItem = true;
            client.SpiltStack = true;
            switch (item.ID)
            {
                #region DailySignIn
                case 3100011:
                    {
                        int r = Kernel.Random.Next(1, 5);
                        if (r == 1)
                        {
                            client.ChiPoints += 200;
                            client.Send(new Message("You opened DailySign-inPack and received 200 Chi Points!", Color.Red, Message.System));
                        }
                        if (r == 2)
                        {
                            client.Inventory.Add(3002030, 0, 5);
                            client.Send(new Message("You opened DailySign-inPack and received 5 Super Protection Pills!", Color.Red, Message.System));
                        }
                        if (r == 3)
                        {
                            client.ChiPoints += 200;
                            client.Send(new Message("You opened DailySign-inPack and received 200 Chi Points!", Color.Red, Message.System));
                        }
                        if (r == 4)
                        {
                            client.Entity.SubClasses.StudyPoints += 300;
                            client.Send(new Message("You opened DailySign-inPack and received 300 Study Points!", Color.Red, Message.System));
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                case 3100012:
                    {
                        int r = Kernel.Random.Next(1, 5);
                        if (r == 1)
                        {
                            client.Entity.BoundCps += 200;
                            client.Send(new Message("You opened SeniorSign-inBox and received 200 Conquer Points (B)!", Color.Red, Message.System));
                        }
                        if (r == 2)
                        {
                            client.Inventory.Add(730004, 4, 1);
                            client.Send(new Message("You opened SeniorSign-inBox and received a Stone(+4)!", Color.Red, Message.System));
                        }
                        if (r == 3)
                        {
                            client.ChiPoints += 200;
                            client.Send(new Message("You opened SeniorSign-inBox and received 200 Chi Points!", Color.Red, Message.System));
                        }
                        if (r == 4)
                        {
                            client.Entity.SubClasses.StudyPoints += 300;
                            client.Send(new Message("You opened SeniorSign-inBox and received 300 Study Points!", Color.Red, Message.System));
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                case 3100013:
                    {
                        if (Kernel.Rate(50))
                        {
                            foreach (var star in Database.StorageItem.Garments.Values.Where(i => i.Stars == 4))
                            {
                                if (Kernel.Rate(20))
                                {
                                    client.Inventory.AddTime(star.ID, 5 * 24 * 60 * 60, true);
                                    break;
                                }
                            }
                        }
                        else
                        {
                            foreach (var star in Database.StorageItem.Mounts.Values.Where(i => i.Stars == 4))
                            {
                                client.Inventory.AddTime(star.ID, 5 * 24 * 60 * 60, true);
                                break;
                            }
                        }
                        client.Inventory.Add(3100012, 0, 1);
                        client.Send(new Message("You opened 2-daySign-inPack and received SeniorSign-inBox and a 5-Day 4 Star Mount/Garment (B)!", Color.Red, Message.System));
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                case 3100014:
                    {
                        client.Inventory.Add(3100012, 0, 1);
                        client.Entity.BoundCps += 200;
                        client.Send(new Message("You opened 7-daySign-inPack and received SeniorSign-inBox and 200 Conquer Points (B)!", Color.Red, Message.System));
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                case 3100015:
                    {
                        client.Inventory.Add(3100012, 0, 1);
                        client.Inventory.AddBound(730003, 3, 1);
                        client.Send(new Message("You opened 14-daySign-inPack and received SeniorSign-inBox and Stone(+3) (B)!", Color.Red, Message.System));
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                case 3100016:
                    {
                        client.Inventory.Add(3100012, 0, 1);
                        client.ChiPoints += 1000;
                        client.Inventory.Add(1088000, 0, 1, true);
                        client.Send(new Message("You opened 21-daySign-inPack and received SeniorSign-inBox and 1,000 Chi Points and DragonBall(B)!", Color.Red, Message.System));
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                case 3100017:
                    {
                        client.Inventory.Add(3100012, 0, 1);
                        client.Inventory.Add(3009000, 0, 4);
                        client.Inventory.Add(3009001, 0, 2);
                        client.Send(new Message("You opened 21-daySign-inPack and received SeniorSign-inBox, 4-TwiligtStarStones and 2-BrightStarStones!", Color.Red, Message.System));
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                #endregion
                #region EXPPacks
                case 3008956:
                case 3008957:
                case 3008958:
                case 3008959:
                case 3008960:
                case 3008961:
                case 3008962:
                case 3008963:
                case 3008964:
                case 3008965:
                case 3008966:
                case 3008967:
                case 3008968:
                case 3008969:
                case 3008970:
                case 3008971:
                case 3008972:
                case 3008973:
                case 3008974:
                case 3008975:
                    {
                        if (client.Entity.Level < 140)
                        {
                            if (item.ID == 3008956) client.IncreaseExperience(client.ExpBall / 2, false);
                            if (item.ID == 3008957) client.IncreaseExperience((ulong)(client.ExpBall), false);
                            if (item.ID == 3008958) client.IncreaseExperience((ulong)(client.ExpBall * 1.5), false);
                            if (item.ID == 3008959) client.IncreaseExperience((ulong)(client.ExpBall * 2), false);
                            if (item.ID == 3008960) client.IncreaseExperience((ulong)(client.ExpBall * 3), false);
                            if (item.ID == 3008961) client.IncreaseExperience(client.ExpBall * 3, false);
                            if (item.ID == 3008962) client.IncreaseExperience((ulong)(client.ExpBall * 3), false);
                            if (item.ID == 3008963) client.IncreaseExperience((ulong)(client.ExpBall * 3), false);
                            if (item.ID == 3008964) client.IncreaseExperience((ulong)(client.ExpBall * 4), false);
                            if (item.ID == 3008965) client.IncreaseExperience(client.ExpBall * 5, false);
                            if (item.ID == 3008966) client.IncreaseExperience(client.ExpBall * 5, false);
                            if (item.ID == 3008967) client.IncreaseExperience(client.ExpBall * 6, false);
                            if (item.ID == 3008968) client.IncreaseExperience((ulong)(client.ExpBall * 6.5), false);
                            if (item.ID == 3008969) client.IncreaseExperience(client.ExpBall * 8, false);
                            if (item.ID == 3008970) client.IncreaseExperience(client.ExpBall * 10, false);
                            if (item.ID == 3008971) client.IncreaseExperience(client.ExpBall * 12, false);
                            if (item.ID == 3008972) client.IncreaseExperience((ulong)(client.ExpBall * 0.66666), false);
                            if (item.ID == 3008973) client.IncreaseExperience((ulong)(client.ExpBall * 1.3), false);
                            if (item.ID == 3008974) client.IncreaseExperience((ulong)(client.ExpBall * 1.2), false);
                            if (item.ID == 3008975) client.IncreaseExperience((ulong)(client.ExpBall * 1.66666), false);
                        }
                        else
                        {
                            uint value = 0;
                            if (item.ID == 3008956) value = 10;
                            if (item.ID == 3008957) value = 20;
                            if (item.ID == 3008958) value = 30;
                            if (item.ID == 3008959) value = 40;
                            if (item.ID == 3008960) value = 50;
                            if (item.ID == 3008961) value = 50;
                            if (item.ID == 3008962) value = 60;
                            if (item.ID == 3008963) value = 60;
                            if (item.ID == 3008964) value = 70;
                            if (item.ID == 3008965) value = 90;
                            if (item.ID == 3008966) value = 100;
                            if (item.ID == 3008967) value = 100;
                            if (item.ID == 3008968) value = 120;
                            if (item.ID == 3008969) value = 150;
                            if (item.ID == 3008970) value = 180;
                            if (item.ID == 3008971) value = 200;
                            if (item.ID == 3008972) value = 10;
                            if (item.ID == 3008973) value = 20;
                            if (item.ID == 3008974) value = 15;
                            if (item.ID == 3008975) value = 30;
                            client.ChiPoints += value;
                            client.Send(new Message("You received " + value + " Chi Points!", Color.Red, Message.System));
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                #endregion
                #region BlazingCPFragment
                case 3008727:
                    {
                        if (client.Inventory.Contains(item.ID, 9))
                        {
                            client.Inventory.Remove(item.ID, 9);
                            client.Entity.BoundCps += 270;
                            client.Send(new Message("You received 270 Conquer Points (B)!", System.Drawing.Color.Red, Message.System));
                        }
                        else client.Send(new Message("Failed to combine since you don't have enough number of fragments.", Color.Red, Message.System));
                        break;
                    }
                #endregion
                #region DragonBloodStone
                case 3008994:
                    {
                        if (client.Inventory.Contains(item.ID, 10))
                        {
                            client.Inventory.Remove(item.ID, 10);
                            client.Inventory.AddBound(1088000, 0, 1);
                            client.Send(new Message("You used 10 Dragon BloodStones and received a Dragon Ball (B).", Color.Red, Message.System));
                        }
                        else
                        {
                            client.Send(new Message("You don't have enough Dragon BloodStones to make a Dragon Ball (B).", Color.Red, Message.System));
                        }
                        break;
                    }
                #endregion
                #region RealmCrytalFragment
                case 3600029:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            int R = Kernel.Random.Next(1, 4);
                            if (R == 1) client.Inventory.Add(3008994, 0, 1);
                            if (R == 2) client.Inventory.Add(3006539, 0, 1);
                            if (R == 3) client.Inventory.Add(3002030, 0, 3);
                            else client.Inventory.Add(3002030, 0, 3);
                            client.Entity.KingdomDeed += 6;
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region Bounties
                case 3200000:
                    {
                        if (client.Inventory.Count <= 37)
                        {
                            client.Send(new Message("Your excellent performance in the battle has earned yourself a wonderful bountry!", Color.Red, Message.System));
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.AddTime(3200334, 1 * 24 * 60 * 60);
                            client.Inventory.AddTime(3007109, 7 * 24 * 60 * 60);
                            client.Inventory.Add(3006539, 0, 1);
                            client.Entity.KingdomDeed += 90;
                            client.ChampionPoints += 50;
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 3200005:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            int R = Kernel.Random.Next(1, 3);
                            if (R == 1) client.Inventory.AddTime(3008965, 2 * 24 * 60 * 60);
                            else client.Inventory.AddTime(3008963, 2 * 24 * 60 * 60);
                            int x = Kernel.Random.Next(1, 3);
                            if (x == 1) client.Inventory.Add(3002926, 0, 2);
                            if (x == 2) client.Inventory.Add(3002030, 0, 2);
                            else client.Inventory.Add(3003125, 0, 2);
                            client.Entity.KingdomDeed += 60;
                            client.ChampionPoints += 50;
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 3200004:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            int R = Kernel.Random.Next(1, 3);
                            if (R == 1) client.Inventory.AddTime(3008965, 2 * 24 * 60 * 60);
                            else client.Inventory.AddTime(3008963, 2 * 24 * 60 * 60);
                            int x = Kernel.Random.Next(1, 3);
                            if (x == 1) client.Inventory.Add(3002926, 0, 2);
                            if (x == 2) client.Inventory.Add(3002030, 0, 2);
                            else client.Inventory.Add(3003125, 0, 2);
                            client.Entity.KingdomDeed += 30;
                            client.ChampionPoints += 50;
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region TeamPkPack
                case 720793:
                    {
                        client.IncreaseExperience(client.ExpBall, false);
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                #endregion
                #region HorseRacingPointsPack3K
                case 720880:
                    {
                        client.RacePoints += 3000;
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                #endregion
                #region P7WeaponSoulPack
                case 3004247:
                    {
                        Npcs dialog = new Npcs(client);
                        dialog.Text("Hello. You can choose a P7 Weapon.");
                        dialog.Option("MonsterSaber", 1);
                        dialog.Option("SkyHammer", 2);
                        dialog.Option("SkyHalberd", 3);
                        dialog.Option("SpiritShield", 4);
                        dialog.Option("GhostKnife", 5);
                        dialog.Option("SunBow", 6);
                        dialog.Option("ShadowKatana", 7);
                        dialog.Option("DemonScythe", 8);
                        dialog.Option("BuddaBeads", 9);
                        dialog.Option("DeathPistol", 10);
                        dialog.Option("RepentRapier", 11);
                        dialog.Option("TimeBacksword", 12);
                        dialog.Option("Nunchaku", 13);
                        dialog.Option("WonderHossu", 14);
                        dialog.Option("FistofDemon", 15);
                        dialog.Option("FistofDeity", 16);
                        dialog.Avatar(0);
                        dialog.Send();
                        client.ActiveNpc = item.ID;
                        break;
                    }
                #endregion
                #region MoonBox
                case 721020:
                case 721021:
                case 721022:
                case 721023:
                case 721024:
                case 721025:
                case 721030:
                case 721031:
                case 721032:
                case 721033:
                case 721034:
                case 721035:
                case 721040:
                case 721041:
                case 721042:
                case 721043:
                case 721051:
                case 721052:
                case 721053:
                case 721054:
                case 721055:
                case 721061:
                case 721062:
                case 721063:
                case 721064:
                case 721065:
                case 721080:
                case 721081:
                case 721082:
                case 721083:
                case 721084:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            client.Inventory.Add(150056, 0, 1);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region P7EquipmentSoulPack
                case 3004248:
                    {
                        Npcs dialog = new Npcs(client);
                        dialog.Text("Hello. You can choose a P7 Equipment.");
                        dialog.Option("CraneRing", 1);
                        dialog.Option("FoxBoots", 2);
                        dialog.Option("NetherArmor", 3);
                        dialog.Option("HeavenNecklace", 4);
                        dialog.Option("MoonHeadgear", 5);
                        dialog.Option("FervorBag", 6);
                        dialog.Option("RainbowBracelet", 7);
                        dialog.Option("EclipseArmor", 8);
                        dialog.Option("CraneBoots", 9);
                        dialog.Option("IceHeadgear", 10);
                        dialog.Option("SunHeadgear", 11);
                        dialog.Option("StarHeadgear", 12);
                        dialog.Option("DragonBoots", 13);
                        dialog.Option("DragonRing", 14);
                        dialog.Option("LionHeavyRing", 15);
                        dialog.Option("TigerHeavyRing", 16);
                        dialog.Avatar(0);
                        dialog.Send();
                        client.ActiveNpc = item.ID;
                        break;
                    }
                #endregion
                #region SacredRefineryPack
                case 3004249:
                    {
                        Npcs dialog = new Npcs(client);
                        dialog.Text("Hello. You can choose a L.6 Refinery.");
                        dialog.Option("CriticalStrike [1-handed]", 15);
                        dialog.Option("CriticalStrike [2-handed]", 16);
                        dialog.Option("CriticalStrike [Ring]", 10);
                        dialog.Option("CriticalStrike [Bow]", 14);
                        dialog.Option("SkillC.Strike [Backsword]", 28);
                        dialog.Option("Counteraction [Armor]", 3);
                        dialog.Option("Counteraction [Necklace]", 11);
                        dialog.Option("Breakthrough [Ring]", 12);
                        dialog.Option("Breakthrough [Bracelet]", 13);
                        dialog.Option("Breakthrough [1-handed]", 17);
                        dialog.Option("Breakthrough [2-handed]", 18);
                        dialog.Option("Breakthrough [Bow])", 19);
                        dialog.Option("Detoxication [Headgear]", 21);
                        dialog.Option("Detoxication [Armor]", 22);
                        dialog.Option("Detoxication [Boots]", 23);
                        dialog.Option("Detoxication [Necklace]", 24);
                        dialog.Option("Detoxication [Bag]", 26);
                        dialog.Option("Penetration [Headgear]", 25);
                        dialog.Option("Penetration [Bag]", 7);
                        dialog.Option("Penetration [Bracelet]", 27);
                        dialog.Option("M-Defense [Necklace]", 1);
                        dialog.Option("M-Defense [Bag]", 5);
                        dialog.Option("M-Defense [Ring]", 8);
                        dialog.Option("M-Defense [Bracelet]", 9);
                        dialog.Option("Block [Headgear]", 4);
                        dialog.Option("Block [Shield]", 20);
                        dialog.Option("Immunity [Armor]", 2);
                        dialog.Option("Immunity [Boots]", 6);
                        dialog.Option("Intensification [Headgear]", 29);
                        dialog.Avatar(0);
                        dialog.Send();
                        client.ActiveNpc = item.ID;
                        break;
                    }
                #endregion
                #region MemoryAgate
                case 720828:
                    if (client != null && !client.Entity.Dead && client.Entity != null && !client.Entity.InJail() && !client.InQualifier() && !client.InTeamQualifier() && !client.IsWatching() && client.Booth == null && !Constants.PKFreeMaps.Contains(client.Entity.MapID) && client.Entity.MapID < 10000)
                    {
                        item.SendAgate(client);
                    }
                    else
                    {
                        client.Send(new Nyx.Server.Network.GamePackets.Message("You can't record here!", System.Drawing.Color.Tan, 0x7dc));
                        break;
                    }
                    break;
                #endregion MemoryAgate
                 #region Bloodshed~Sea item's
                case 3004230:
                    {
                        if (client.Entity.MapID == 3856)
                        {
                            if (!client.Entity.IncreaseAttribute)
                            {
                                client.Entity.MaxAttack += 3000;
                                client.Entity.MinAttack += 3000;
                                client.Entity.MagicAttack += 3000;
                                client.Entity.IncreaseAttribute = true;
                            }
                            client.Entity.IncreaseAttributeStamp = Time32.Now;
                            Network.GamePackets.Update upgrade = new Network.GamePackets.Update(true);
                            upgrade.UID = client.Entity.UID;
                            upgrade.Append((byte)Network.GamePackets.Update.IncreasePAttack, 0, 80, 3000, 0);
                            upgrade.Append((byte)Network.GamePackets.Update.IncreaseMAttack, 0, 80, 3000, 0);
                            client.Send(upgrade.Encode());
                            _String str = new _String(true);
                            str.TextsCount = 1;
                            str.UID = client.Entity.UID;
                            str.Type = 10;
                            str.Texts.Add("eidolon");
                            client.SendScreen(str, true);
                            client.Inventory.Remove(item, Enums.ItemUse.Remove);
                            client.Send(new Message("You've used an item.", Color.Red, Message.System));
                            break;
                        }
                        else client.Send(new Message("This~potion~can~only~be~used~in~the~Bloodshed~Sea!", System.Drawing.Color.Red, Message.System));
                        break;
                    }
                case 3004182:
                    {
                        if (client.Entity.MapID == 3856)
                        {
                            if (!client.Entity.GodlyShield)
                            {
                                client.Entity.AddFlag((ulong)Network.GamePackets.Update.Flags.GodlyShield);
                                client.Entity.GodlyShield = true;
                            }
                            client.Entity.GodlyShieldStamp = Time32.Now;
                            var upd = new GameCharacterUpdates(true);
                            upd.UID = client.Entity.UID;
                            upd.Add(GameCharacterUpdates.DivineShield, 0, 80);
                            client.SendScreen(upd, true);
                            client.Inventory.Remove(item, Enums.ItemUse.Remove);
                            _String str = new _String(true);
                            str.TextsCount = 1;
                            str.UID = client.Entity.UID;
                            str.Type = 10;
                            str.Texts.Add("eidolon");
                            client.SendScreen(str, true);
                            client.Send(new Message("You've used an item.", Color.Red, Message.System));
                            client.Send(new Message("You're immune to control skills for 80 seconds. Please seize the chance!", Color.Red, Message.System));
                            break;
                        }
                        else client.Send(new Message("This~potion~can~only~be~used~in~the~Bloodshed~Sea!", System.Drawing.Color.Red, Message.System));
                        break;
                    }
                case 3004231:
                    {
                        if (client.Entity.MapID == 3856)
                        {
                            if (!client.Entity.IncreaseBreack)
                            {
                                client.Entity.Breaktrough += 1500;
                                client.Entity.IncreaseBreack = true;
                            }
                            client.Entity.IncreaseBreackStamp = Time32.Now;
                            Network.GamePackets.Update upgrade = new Network.GamePackets.Update(true);
                            upgrade.UID = client.Entity.UID;
                            upgrade.Append((byte)Network.GamePackets.Update.IncreaseBreack, 0, 80, 150, 0);
                            client.Send(upgrade.Encode());
                            client.Inventory.Remove(item, Enums.ItemUse.Remove);
                            _String str = new _String(true);
                            str.TextsCount = 1;
                            str.UID = client.Entity.UID;
                            str.Type = 10;
                            str.Texts.Add("eidolon");
                            client.SendScreen(str, true);
                            client.Send(new Message("You've used an item.", Color.Red, Message.System));
                            client.Send(new Message("Your Break is increased by 150 for 80 seconds. Please seize the chance!", Color.Red, Message.System));
                            break;
                        }
                        else client.Send(new Message("This~potion~can~only~be~used~in~the~Bloodshed~Sea!", System.Drawing.Color.Red, Message.System));
                        break;
                    }
                case 3004232:
                    {
                        if (client.Entity.MapID == 3856)
                        {
                            if (!client.Entity.IncreasePStrike)
                            {
                                client.Entity.CriticalStrike += 1500;
                                client.Entity.SkillCStrike += 1500;
                                client.Entity.IncreasePStrike = true;
                            }
                            client.Entity.IncreasePStrikeStamp = Time32.Now;
                            Network.GamePackets.Update upgrade = new Network.GamePackets.Update(true);
                            upgrade.UID = client.Entity.UID;
                            upgrade.Append((byte)Network.GamePackets.Update.IncreasePStrike, 0, 80, 150, 0);
                            upgrade.Append((byte)Network.GamePackets.Update.IncreaseMStrike, 0, 80, 150, 0);
                            client.Send(upgrade.Encode());
                            _String str = new _String(true);
                            str.TextsCount = 1;
                            str.UID = client.Entity.UID;
                            str.Type = 10;
                            str.Texts.Add("eidolon");
                            client.SendScreen(str, true);
                            client.Inventory.Remove(item, Enums.ItemUse.Remove);
                            client.Send(new Message("You've used an item.", Color.Red, Message.System));
                            client.Send(new Message("Your P-Strike and M-Strike are increased by 150 for 80 seconds. Please seize the chance!", Color.Red, Message.System));
                            break;
                        }
                        else client.Send(new Message("This~potion~can~only~be~used~in~the~Bloodshed~Sea!", System.Drawing.Color.Red, Message.System));
                        break;
                    }
                case 3004233:
                    {
                        if (client.Entity.MapID == 3856)
                        {
                            if (!client.Entity.IncreaseAntiBreack)
                            {
                                client.Entity.Counteraction += 1500;
                                client.Entity.IncreaseAntiBreack = true;
                            }
                            client.Entity.IncreaseAntiBreackStamp = Time32.Now;
                            Network.GamePackets.Update upgrade = new Network.GamePackets.Update(true);
                            upgrade.UID = client.Entity.UID;
                            upgrade.Append((byte)Network.GamePackets.Update.IncreaseAntiBreack, 0, 80, 150, 0);
                            client.Send(upgrade.Encode());
                            client.Inventory.Remove(item, Enums.ItemUse.Remove);
                            _String str = new _String(true);
                            str.TextsCount = 1;
                            str.UID = client.Entity.UID;
                            str.Type = 10;
                            str.Texts.Add("eidolon");
                            client.SendScreen(str, true);
                            client.Send(new Message("You've used an item.", Color.Red, Message.System));
                            client.Send(new Message("Your Anti-Break is increased by 150 for 80 seconds. Please seize the chance!", Color.Red, Message.System));
                            
                            break;
                        }
                        else client.Send(new Message("This~potion~can~only~be~used~in~the~Bloodshed~Sea!", System.Drawing.Color.Red, Message.System));
                        break;
                    }
                case 3004234:
                    {
                        if (client.Entity.MapID == 3856)
                        {
                            if (!client.Entity.IncreaseImunity)
                            {
                                client.Entity.Immunity += 1500;
                                client.Entity.IncreaseImunity = true;
                            }
                            client.Entity.IncreaseImunityStamp = Time32.Now;
                            Network.GamePackets.Update upgrade = new Network.GamePackets.Update(true);
                            upgrade.UID = client.Entity.UID;
                            upgrade.Append((byte)Network.GamePackets.Update.IncreaseImunity, 0, 80, 150, 0);
                            client.Send(upgrade.Encode());
                            client.Inventory.Remove(item, Enums.ItemUse.Remove);
                            _String str = new _String(true);
                            str.TextsCount = 1;
                            str.UID = client.Entity.UID;
                            str.Type = 10;
                            str.Texts.Add("eidolon");
                            client.SendScreen(str, true);
                            client.Send(new Message("You've used an item.", Color.Red, Message.System));
                            client.Send(new Message("Your Immunity is increased by 150 for 80 seconds. Please seize the chance!", Color.Red, Message.System));
                            break;

                        }
                        else client.Send(new Message("This~potion~can~only~be~used~in~the~Bloodshed~Sea!", System.Drawing.Color.Red, Message.System));
                        break;
                    }
                case 3004235:
                    {
                        if (client.Entity.MapID == 3856)
                        {
                            if (!client.Entity.IncreaseFinalPAttack)
                            {
                                client.Entity.PhysicalDamageIncrease += 3000;
                                client.Entity.IncreaseFinalPAttack = true;
                            }
                            client.Entity.IncreaseFinalPAttackStamp = Time32.Now;
                            Network.GamePackets.Update upgrade = new Network.GamePackets.Update(true);
                            upgrade.UID = client.Entity.UID;
                            upgrade.Append((byte)Network.GamePackets.Update.IncreaseFinalPAttack, 0, 80, 3000, 0);
                            client.Send(upgrade.Encode());
                            client.Inventory.Remove(item, Enums.ItemUse.Remove);
                            _String str = new _String(true);
                            str.TextsCount = 1;
                            str.UID = client.Entity.UID;
                            str.Type = 10;
                            str.Texts.Add("eidolon");
                            client.SendScreen(str, true);
                            client.Send(new Message("You've used an item.", Color.Red, Message.System));
                            client.Send(new Message("Your Final-P~Attack is increased by 3000 for 80 seconds. Please seize the chance!", Color.Red, Message.System));
                           
                            break;
                        }
                        else client.Send(new Message("This~potion~can~only~be~used~in~the~Bloodshed~Sea!", System.Drawing.Color.Red, Message.System));
                        break;
                    }
                case 3004236:
                    {
                        if (client.Entity.MapID == 3856)
                        {
                            if (!client.Entity.IncreaseFinalMAttack)
                            {
                                client.Entity.MagicDamageIncrease += 3000;
                                client.Entity.IncreaseFinalMAttack = true;
                            }
                            client.Entity.IncreaseFinalMAttackStamp = Time32.Now;
                            Network.GamePackets.Update upgrade = new Network.GamePackets.Update(true);
                            upgrade.UID = client.Entity.UID;
                            upgrade.Append((byte)Network.GamePackets.Update.IncreaseFinalMAttack, 0, 80, 3000, 0);
                            client.Send(upgrade.Encode());
                            client.Inventory.Remove(item, Enums.ItemUse.Remove);
                            _String str = new _String(true);
                            str.TextsCount = 1;
                            str.UID = client.Entity.UID;
                            str.Type = 10;
                            str.Texts.Add("eidolon");
                            client.SendScreen(str, true);
                            client.Send(new Message("You've used an item.", Color.Red, Message.System));
                            client.Send(new Message("Your Final-M~Attack is increased by 3000 for 80 seconds. Please seize the chance!", Color.Red, Message.System));
                           
                            break;
                        }
                        else client.Send(new Message("This~potion~can~only~be~used~in~the~Bloodshed~Sea!", System.Drawing.Color.Red, Message.System));
                        break;
                    }
                case 3004237:
                    {
                        if (client.Entity.MapID == 3856)
                        {
                            if (!client.Entity.IncreaseFinalPDamage)
                            {
                                client.Entity.PhysicalDamageDecrease += 3000;
                                client.Entity.IncreaseFinalPDamage = true;
                            }
                            client.Entity.IncreaseFinalPDamageStamp = Time32.Now;
                            Network.GamePackets.Update upgrade = new Network.GamePackets.Update(true);
                            upgrade.UID = client.Entity.UID;
                            upgrade.Append((byte)Network.GamePackets.Update.IncreaseFinalPDamage, 0, 80, 3000, 0);
                            client.Send(upgrade.Encode());
                            client.Inventory.Remove(item, Enums.ItemUse.Remove);
                            _String str = new _String(true);
                            str.TextsCount = 1;
                            str.UID = client.Entity.UID;
                            str.Type = 10;
                            str.Texts.Add("eidolon");
                            client.SendScreen(str, true);
                            client.Send(new Message("You've used an item.", Color.Red, Message.System));
                            client.Send(new Message("Your Final-P~Damage is decreased by 3000 for 80 seconds. Please seize the chance!", Color.Red, Message.System));
                           
                            break;
                        }
                        else client.Send(new Message("This~potion~can~only~be~used~in~the~Bloodshed~Sea!", System.Drawing.Color.Red, Message.System));
                        break;
                    }
                case 3004238:
                    {
                        if (client.Entity.MapID == 3856)
                        {
                            if (!client.Entity.IncreaseFinalMDamage)
                            {
                                client.Entity.MagicDamageDecrease += 3000;
                                client.Entity.IncreaseFinalMDamage = true;
                            }
                            client.Entity.IncreaseFinalMDamageStamp = Time32.Now;
                            Network.GamePackets.Update upgrade = new Network.GamePackets.Update(true);
                            upgrade.UID = client.Entity.UID;
                            upgrade.Append((byte)Network.GamePackets.Update.IncreaseFinalMDamage, 0, 80, 3000, 0);
                            client.Send(upgrade.Encode());
                            client.Inventory.Remove(item, Enums.ItemUse.Remove);
                            _String str = new _String(true);
                            str.TextsCount = 1;
                            str.UID = client.Entity.UID;
                            str.Type = 10;
                            str.Texts.Add("eidolon");
                            client.SendScreen(str, true);
                            client.Send(new Message("You've used an item.", Color.Red, Message.System));
                            client.Send(new Message("Your Final-M~Damage is decreased by 3000 for 80 seconds. Please seize the chance!", Color.Red, Message.System));
                           
                            break;
                        }
                        else client.Send(new Message("This~potion~can~only~be~used~in~the~Bloodshed~Sea!", System.Drawing.Color.Red, Message.System));
                        break;
                    }
                #endregion
                #region Elite PK Prizes
                #region 8TopRank
                case 720729:
                    {
                        if (client.Inventory.Count > 40 - 23)
                        {
                            client.Send("You need atleast 23 open spots!");
                            break;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Inventory.Add(3004181, 0, 1);
                        client.Inventory.Add(723342, 0, 5);
                        client.Inventory.Add(720731, 0, 1);
                        client.Inventory.Add(729626, 0, 1);
                        break;
                    }
                case 720728: //#2 lvl 130+
                    {
                        if (client.Inventory.Count > 40 - 23)
                        {
                            client.Send("You need atleast 23 open spots!");
                            break;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Inventory.Add(729626, 0, 1);
                        client.Inventory.Add(723341, 0, 1);
                        break;
                    }
                case 720727: //#3 lvl 130+
                    {
                        if (client.Inventory.Count > 40 - 23)
                        {
                            client.Send("You need atleast 23 open spots!");
                            break;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Inventory.Add(729626, 0, 1);
                        client.Inventory.Add(723341, 0, 1);
                        break;
                    }
                case 720726: //#4-8 lvl 130+
                    {
                        if (client.Inventory.Count > 40 - 23)
                        {
                            client.Send("You need atleast 23 open spots!");
                            break;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Inventory.Add(729626, 0, 1);
                        client.Inventory.Add(723341, 0, 1);
                        break;
                    }
                #endregion
                #region 3rdPlace
                case 720725:
                    {
                        if (client.Inventory.Count > 40 - 23)
                        {
                            client.Send("You need atleast 23 open spots!");
                            break;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.IncreaseExperience(Database.DataHolder.LevelExperience(client.Entity.Level), false);
                        client.Inventory.Add(3004181, 0, 1);
                        client.Inventory.Add(729626, 0, 2);
                        client.Inventory.Add(720731, 0, 2);
                        client.Inventory.Add(723342, 0, 1);
                        break;
                    }
                case 720724:
                    {
                        if (client.Inventory.Count > 40 - 23)
                        {
                            client.Send("You need atleast 23 open spots!");
                            break;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.IncreaseExperience(Database.DataHolder.LevelExperience(client.Entity.Level) / 2, false);
                        client.Inventory.Add(729626, 0, 1);
                        client.Inventory.Add(720731, 0, 1);
                        client.Inventory.Add(723341, 0, 1);
                        break;
                    }
                case 720723:
                    {
                        if (client.Inventory.Count > 40 - 23)
                        {
                            client.Send("You need atleast 23 open spots!");
                            break;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Inventory.Add(729626, 0, 1);
                        client.Inventory.Add(720731, 0, 1);
                        client.Inventory.Add(723341, 0, 1);
                        break;
                    }
                case 720722:
                    {
                        if (client.Inventory.Count > 40 - 23)
                        {
                            client.Send("You need atleast 23 open spots!");
                            break;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Inventory.Add(729626, 0, 1);
                        client.Inventory.Add(720731, 0, 1);
                        client.Inventory.Add(723341, 0, 1);
                        break;
                    }
                #endregion
                #region 2ndPlace
                case 720721:
                    {
                        if (client.Inventory.Count > 40 - 23)
                        {
                            client.Send("You need atleast 23 open spots!");
                            break;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Inventory.Add(1088000, 0, 1);
                        client.Inventory.Add(729626, 0, 3);
                        client.Inventory.Add(720731, 0, 3);
                        client.Inventory.Add(3004181, 0, 2);
                        break;
                    }
                case 720720:
                    {
                        if (client.Inventory.Count > 40 - 23)
                        {
                            client.Send("You need atleast 23 open spots!");
                            break;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Inventory.Add(729626, 0, 1);
                        client.Inventory.Add(720731, 0, 2);
                        client.Inventory.Add(723341, 0, 1);
                        break;
                    }
                case 720719:
                    {
                        if (client.Inventory.Count > 40 - 23)
                        {
                            client.Send("You need atleast 23 open spots!");
                            break;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Inventory.Add(729626, 0, 1);
                        client.Inventory.Add(720731, 0, 2);
                        client.Inventory.Add(723341, 0, 1);
                        break;
                    }
                case 720718:
                    {
                        if (client.Inventory.Count > 40 - 23)
                        {
                            client.Send("You need atleast 23 open spots!");
                            break;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Inventory.Add(729626, 0, 1);
                        client.Inventory.Add(720731, 0, 2);
                        client.Inventory.Add(723341, 0, 1);
                        break;
                    }
                #endregion
                #region HighChampion
                case 720717:
                    {
                        if (client.Inventory.Count > 40 - 23)
                        {
                            client.Send("You need atleast 23 open spots!");
                            break;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Inventory.Add(1088000, 0, 3);
                        client.Inventory.Add(729626, 0, 5);
                        client.Inventory.Add(720731, 0, 5);
                        client.Inventory.Add(723863, 0, 1);
                        client.Inventory.Add(3004181, 0, 5);
                        break;
                    }
                case 720716:
                    {
                        if (client.Inventory.Count > 40 - 23)
                        {
                            client.Send("You need atleast 23 open spots!");
                            break;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Inventory.Add(723341, 0, 5);
                        client.Inventory.Add(729626, 0, 1);
                        client.Inventory.Add(1088000, 0, 1);
                        client.Inventory.Add(720731, 0, 3);
                        break;
                    }
                case 720715:
                    {
                        if (client.Inventory.Count > 40 - 23)
                        {
                            client.Send("You need atleast 23 open spots!");
                            break;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Inventory.Add(723341, 0, 5);
                        client.Inventory.Add(729626, 0, 1);
                        client.Inventory.Add(1088000, 0, 1);
                        client.Inventory.Add(720731, 0, 3);
                        break;
                    }
                case 720714:
                    {
                        if (client.Inventory.Count > 40 - 23)
                        {
                            client.Send("You need atleast 23 open spots!");
                            break;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Inventory.Add(723341, 0, 5);
                        client.Inventory.Add(729626, 0, 1);
                        client.Inventory.Add(1088000, 0, 1);
                        client.Inventory.Add(720731, 0, 3);
                        break;
                    }
                #endregion
                case 729626:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        var array = Database.ConquerItemInformation.BaseInformations.Values
                            .Where(p => (p.ID >= 724130 && p.ID <= 724499 && p.Name.Contains("Super"))).ToArray();
                        client.Inventory.Add(array[Kernel.Random.Next(array.Length)].ID, 0, 1);
                        // 
                        break;
                    }
                case 720731:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        var array = Database.ConquerItemInformation.BaseInformations.Keys
                            .Where(p => (p >= 350001 && p <= 380030)).ToArray();
                        client.Inventory.Add(array[Kernel.Random.Next(array.Length)], 0, 1);
                        break;
                    }
                case 720049: // random steed pack
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        ConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 6;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        if (Kernel.Random.Sign() == 1)
                            _item.SocketProgress = 150 << 8 | 255 << 16;
                        else if (Kernel.Random.Sign() == 1)
                            _item.SocketProgress = 150 | 255 << 8;
                        else
                            _item.SocketProgress = 255 | 150 << 16;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                #endregion
                #region SkillTeamPk Prizes
                case 721303:
                    {
                        if (client.Inventory.Count <= 30)
                        {
                            client.Inventory.Add(1088000, 0, 5);
                            client.Inventory.Add(723342, 0, 1);
                            client.Inventory.Add(700072, 0, 5);
                            client.Inventory.Add(711504, 0, 75);
                            client.Inventory.Add(729626, 0, 5);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 721302:
                    {
                        if (client.Inventory.Count <= 30)
                        {
                            client.Inventory.Add(723341, 0, 5);
                            client.Inventory.Add(711504, 0, 75);
                            client.Inventory.Add(729626, 0, 3);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 721307:
                    {
                        if (client.Inventory.Count <= 30)
                        {
                            client.Inventory.Add(1088000, 0, 3);
                            client.Inventory.Add(700072, 0, 5);
                            client.Inventory.Add(723342, 0, 4);
                            client.Inventory.Add(711504, 0, 75);
                            client.Inventory.Add(729626, 0, 3);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 721306:
                    {
                        if (client.Inventory.Count <= 30)
                        {
                            client.Inventory.Add(723341, 0, 4);
                            client.Inventory.Add(711504, 0, 75);
                            client.Inventory.Add(729626, 0, 2);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 721304:
                    {
                        if (client.Inventory.Count <= 30)
                        {
                            client.Inventory.Add(723341, 0, 4);
                            client.Inventory.Add(711504, 0, 75);
                            client.Inventory.Add(729626, 0, 2);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 721301:
                    {
                        if (client.Inventory.Count <= 30)
                        {
                            client.Inventory.Add(1088000, 0, 1);
                            client.Inventory.Add(723342, 0, 3);
                            client.Inventory.Add(711504, 0, 75);
                            client.Inventory.Add(729626, 0, 3);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 721300:
                    {
                        if (client.Inventory.Count <= 30)
                        {
                            client.Inventory.Add(723342, 0, 2);
                            client.Inventory.Add(711504, 0, 75);
                            client.Inventory.Add(729626, 0, 3);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 721305:
                    {
                        if (client.Inventory.Count <= 30)
                        {
                            client.Inventory.Add(723341, 0, 2);
                            client.Inventory.Add(711504, 0, 75);
                            client.Inventory.Add(729626, 0, 3);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 721309:
                    {
                        if (client.Inventory.Count <= 30)
                        {
                            client.Inventory.Add(723341, 0, 2);
                            client.Inventory.Add(711504, 0, 75);
                            client.Inventory.Add(729626, 0, 3);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 721308:
                    {
                        if (client.Inventory.Count <= 30)
                        {
                            client.Inventory.Add(723341, 0, 2);
                            client.Inventory.Add(711504, 0, 75);
                            client.Inventory.Add(729626, 0, 3);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 721310:
                    {
                        if (client.Inventory.Count <= 30)
                        {
                            client.Inventory.Add(723341, 0, 2);
                            client.Inventory.Add(711504, 0, 75);
                            client.Inventory.Add(729626, 0, 3);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 721311:
                    {
                        if (client.Inventory.Count <= 30)
                        {
                            client.Inventory.Add(723341, 0, 2);
                            client.Inventory.Add(711504, 0, 75);
                            client.Inventory.Add(729626, 0, 3);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 721312:
                    {
                        if (client.Inventory.Count <= 30)
                        {
                            client.Inventory.Add(723341, 0, 2);
                            client.Inventory.Add(711504, 0, 75);
                            client.Inventory.Add(729626, 0, 3);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 721313:
                    {
                        if (client.Inventory.Count <= 30)
                        {
                            client.Inventory.Add(723341, 0, 2);
                            client.Inventory.Add(711504, 0, 75);
                            client.Inventory.Add(729626, 0, 3);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 721314:
                    {
                        if (client.Inventory.Count <= 30)
                        {
                            client.Inventory.Add(723341, 0, 2);
                            client.Inventory.Add(711504, 0, 75);
                            client.Inventory.Add(729626, 0, 3);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 721315:
                    {
                        if (client.Inventory.Count <= 30)
                        {
                            client.Inventory.Add(723341, 0, 2);
                            client.Inventory.Add(711504, 0, 75);
                            client.Inventory.Add(729626, 0, 3);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region LotteryPacks
                #region StandardLotteryPack
                case 3000121:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            client.Inventory.Add(711504, 0, 3);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region MiniLotteryPack
                case 3000120:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            client.Inventory.Add(711504, 0, 2);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region BigLotteryPack
                case 3000122:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            client.Inventory.Add(711504, 0, 5);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region LuxeryLottery
                case 3000123:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            client.Inventory.Add(711504, 0, 7);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region SmallLotteryTicketPack
                case 724002:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Inventory.Add(711504, 0, 3);
                        break;
                    }
                #endregion
                #endregion
                #region Medicine
                #region Panacea Box
                case 720011:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1002000, 0, 3);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region LifeFruit
                case 723726:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Hitpoints = client.Entity.MaxHitpoints;
                        client.Entity.Mana = client.Entity.MaxMana;
                        break;
                    }
                #endregion
                #region LuxeryOi
                case 3007434:
                    {
                        if (client.Inventory.Count <= 36)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(725066, 0, 20);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region GrandOi
                case 3007286:
                    {
                        if (client.Inventory.Count <= 36)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(725065, 0, 20);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region Amrita Box
                case 720010:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1000030, 0, 3);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region Ginseng Box
                case 720012:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1002010, 0, 3);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region Vanilla Box
                case 720013:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1002020, 0, 3);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region 7StarPouch
                case 725067:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(725065, 0, 5);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region SerenityPouch
                case 725068:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(725066, 0, 5);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region LifeFruitBasket
                case 723725:
                    {
                        if (client.Inventory.Count <= 31)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(723726, 0, 10);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region RecoveryPill Box
                case 720014:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1001030, 0, 3);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion RecoveryPill
                #region SoulPill Box
                case 720015:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1001040, 0, 3);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region RefreshingPill Box
                case 720016:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1002030, 0, 3);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region ChantPill Box
                case 720017:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1002040, 0, 3);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region Mil.Ginseng Box
                case 721330:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1002050, 0, 3);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                case 1000000:
                case 1000010:
                case 1000020:
                case 1000030:
                case 1002000:
                case 1002010:
                case 1002020:
                case 1002050:
                case 1000040:
                case 725065:
                    {

                        if (client.Entity.NoDrugsTime > 0)
                        {
                            if (Time32.Now > client.Entity.NoDrugsStamp.AddSeconds(client.Entity.NoDrugsTime))
                            {
                                client.Entity.NoDrugsTime = 0;
                            }
                            else
                            {
                                return;
                            }
                        }
                        if (client.Entity.Hitpoints == client.Entity.MaxHitpoints)
                        {
                            return;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Hitpoints = Math.Min(client.Entity.Hitpoints + infos.BaseInformation.ItemHP, client.Entity.MaxHitpoints);
                        break;
                    }
                case 1001000:
                case 1001010:
                case 1001020:
                case 1001030:
                case 1001040:
                case 1002030:
                case 1002040:
                case 725066:
                    {
                        if (client.Entity.NoDrugsTime > 0)
                        {
                            if (Time32.Now > client.Entity.NoDrugsStamp.AddSeconds(client.Entity.NoDrugsTime))
                            {
                                client.Entity.NoDrugsTime = 0;
                            }
                            else
                            {
                                return;
                            }
                        }
                        if (client.Entity.Mana == client.Entity.MaxMana)
                            return;
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Mana = (ushort)Math.Min(client.Entity.Mana + infos.BaseInformation.ItemMP, client.Entity.MaxMana);
                        break;
                    }
                case 723790:
                    {
                        if (client.Entity.Mana == client.Entity.MaxMana && client.Entity.Hitpoints == client.Entity.MaxHitpoints)
                            return;
                        client.Entity.Hitpoints = Math.Min(client.Entity.Hitpoints + infos.BaseInformation.ItemHP, client.Entity.MaxHitpoints);
                        client.Entity.Mana = (ushort)Math.Min(client.Entity.Mana + infos.BaseInformation.ItemMP, client.Entity.MaxMana);
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                #endregion
                #region Gates
                case 1060020:
                    {
                        if (client.Entity.ContainsFlag(Update.Flags.Cursed))
                            return;
                        if (client.Entity.MapID == 601) return;
                        if (client.Map.BaseID == 6000 || client.Map.BaseID == 6001 || client.Map.BaseID == 1844 || client.Map.BaseID == 1801 || client.Map.BaseID == 8883 || client.Map.BaseID == 1005 && client.Entity.MapID != 1005 || client.Map.BaseID == 700 || client.Entity.MapID == 3856)
                        {
                            client.Send(Constants.JailItemUnusable);
                            return;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Teleport(1002, 300, 278);
                        break;
                    }
                case 1060021:
                    {
                        if (client.Entity.ContainsFlag(Update.Flags.Cursed))
                            return;
                        if (client.Entity.MapID == 601) return;
                        if (client.Map.BaseID == 6000 || client.Map.BaseID == 6001 || client.Map.BaseID == 1844 || client.Map.BaseID == 1801 || client.Map.BaseID == 8883 || client.Map.BaseID == 1005 && client.Entity.MapID != 1005 || client.Map.BaseID == 700 || client.Entity.MapID == 3856)
                        {
                            client.Send(Constants.JailItemUnusable);
                            return;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Teleport(1000, 500, 650);
                        break;
                    }
                case 1060022:
                    {
                        if (client.Entity.ContainsFlag(Update.Flags.Cursed))
                            return;
                        if (client.Entity.MapID == 601) return;
                        if (client.Map.BaseID == 6000 || client.Map.BaseID == 6001 || client.Map.BaseID == 1844 || client.Map.BaseID == 1801 || client.Map.BaseID == 8883 || client.Map.BaseID == 1005 && client.Entity.MapID != 1005 || client.Map.BaseID == 700 || client.Entity.MapID == 3856)
                        {
                            client.Send(Constants.JailItemUnusable);
                            return;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Teleport(1020, 565, 562);
                        break;
                    }
                case 1060023:
                    {
                        if (client.Entity.ContainsFlag(Update.Flags.Cursed))
                            return;
                        if (client.Entity.MapID == 601) return;
                        if (client.Map.BaseID == 6000 || client.Map.BaseID == 6001 || client.Map.BaseID == 1844 || client.Map.BaseID == 1801 || client.Map.BaseID == 8883 || client.Map.BaseID == 1005 && client.Entity.MapID != 1005 || client.Map.BaseID == 700 || client.Entity.MapID == 3856)
                        {
                            client.Send(Constants.JailItemUnusable);
                            return;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Teleport(1011, 188, 264);
                        break;
                    }
                case 1060024:
                    {
                        if (client.Entity.ContainsFlag(Update.Flags.Cursed))
                            return;
                        if (client.Entity.MapID == 601) return;
                        if (client.Map.BaseID == 6000 || client.Map.BaseID == 6001 || client.Map.BaseID == 1844 || client.Map.BaseID == 1801 || client.Map.BaseID == 8883 || client.Map.BaseID == 1005 && client.Entity.MapID != 1005 || client.Map.BaseID == 700 || client.Entity.MapID == 3856)
                        {
                            client.Send(Constants.JailItemUnusable);
                            return;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Teleport(1015, 717, 571);
                        break;
                    }
                case 1060039:
                    {
                        if (client.Entity.ContainsFlag(Update.Flags.Cursed))
                            return;
                        if (client.Entity.MapID == 601) return;
                        if (client.Map.BaseID == 6000 || client.Map.BaseID == 6001 || client.Map.BaseID == 1844 || client.Map.BaseID == 1801 || client.Map.BaseID == 8883 || client.Map.BaseID == 1005 && client.Entity.MapID != 1005 || client.Map.BaseID == 700 || client.Entity.MapID == 3856)
                        {
                            client.Send(Constants.JailItemUnusable);
                            return;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Teleport(1217, 535, 558);
                        break;
                    }
                #endregion
                #region Dyes
                case 723584:
                    {
                        if (client.Equipment.TryGetItem(3) == null)
                            return;
                        if (client.Equipment.TryGetItem(3).ID == 0)
                            return;
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Equipment.TryGetItem(3).Color = Game.Enums.Color.Black;
                        Nyx.Server.Database.ConquerItemTable.UpdateColor(client.Equipment.TryGetItem(3));
                        client.Equipment.TryGetItem(3).Mode = Nyx.Server.Game.Enums.ItemMode.Update;
                        client.Equipment.TryGetItem(3).Send(client);
                        client.Equipment.UpdateEntityPacket();
                        break;
                    }
                case 1060030:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.HairColor = 3;
                        break;
                    }
                case 1060040:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.HairColor = 9;
                        break;
                    }
                case 1060050:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.HairColor = 8;
                        break;
                    }
                case 1060060:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.HairColor = 7;
                        break;
                    }
                case 1060070:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.HairColor = 6;
                        break;
                    }
                case 1060080:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.HairColor = 5;
                        break;
                    }
                case 1060090:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.HairColor = 4;
                        break;
                    }
                #endregion
                #region CpsPacks
                #region 40CpsPack
                case 3005643:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.ConquerPoints += 40;
                        break;
                    }
                #endregion
                #region 5CpsPack
                case 720657:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.ConquerPoints += 5;
                        break;
                    }
                #endregion
                #region 10CpsPack
                case 720656:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.ConquerPoints += 10;
                        break;
                    }
                #endregion
                #region 20CpsPack
                case 720655:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.ConquerPoints += 20;
                        break;
                    }
                #endregion
                #region 2CPBag
                case 729911:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.ConquerPoints += 3;
                        break;
                    }
                #endregion
                #region 25CpsPack
                case 720658:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.ConquerPoints += 25;
                        break;
                    }
                #endregion
                #region 50CpsPack
                case 720659:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.ConquerPoints += 50;
                        break;
                    }
                #endregion
                #region 100CpsPack
                case 720664:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.ConquerPoints += 100;
                        break;
                    }
                #endregion
                #region 50CpsPack
                case 3005644:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.ConquerPoints += 50;
                        break;
                    }
                #endregion
                #region 60CpsPack
                case 3008927:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.ConquerPoints += 60;
                        break;
                    }
                #endregion
                #region 500CpsPack
                case 3005648:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.ConquerPoints += 500;
                        break;
                    }
                #endregion
                #region StarCPPack
                case 720666:
                    {
                        client.Entity.ConquerPoints += 2700;
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                #endregion
                #region CPSBag
                case 729536:
                    {
                        int R = Kernel.Random.Next(9, 999);
                        client.Entity.ConquerPoints += (uint)R;
                        client.MessageBox("Congratulations!! You Got " + R + "");
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                #endregion
                #region 600CpsPack
                case 3005013:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.ConquerPoints += 600;
                        break;
                    }
                #endregion
                #region 120CpsPack
                case 3008929:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.ConquerPoints += 120;
                        break;
                    }
                #endregion
                #region 70CpsPack
                case 3008928:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.ConquerPoints += 70;
                        break;
                    }
                #endregion
                #region CuteCpPack
                case 720665:
                    {
                        client.Entity.ConquerPoints += 200;
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                #endregion
                #region LuxuriousCPPack
                case 3007368:
                    {
                        client.Entity.ConquerPoints += 300;
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                #endregion
                #region 150CpsPack
                case 3008930:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.ConquerPoints += 150;
                        break;
                    }
                #endregion
                #region 100CpsPack
                case 3005645:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.ConquerPoints += 100;
                        break;
                    }
                #endregion
                #endregion
                #region PernanmentStonePacks
                case 3005676:
                case 3008933:
                    {
                        if (client.ActiveNpc == 3008933)
                        {
                            client.Inventory.Add(723694, 0, 3);
                        }
                        else
                        {
                            client.Inventory.Add(723694, 0, 2);
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                #endregion
                #region GemPacks
                #region RefinedTortoiseGemPack
                case 3005660:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Add(700072, 0, 1);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region SuperTortoiseGemPack
                case 3008932:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Add(700073, 0, 1);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region RefinedThunderGemPack
                case 3005661:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Add(700102, 0, 1);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region RefinedGloryGemPack
                case 3005662:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Add(700122, 0, 1);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region SuperGemBack
                case 3005664:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            uint ItemID = 0;
                            int r = Kernel.Random.Next(1, 3);
                            if (r == 1)
                                ItemID = 700013;
                            if (r == 2)
                                ItemID = 700003;
                            if (r == 3)
                                ItemID = 700033;
                            client.Inventory.Add(ItemID, 0, 1);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #endregion
                #region SteedPacks
                #region LeadingSteedPack
                case 3005666:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Add(723855, 0, 1);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region SwiftSteedPack
                case 3005667:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            ConquerItem _item = new ConquerItem(true);
                            _item.ID = 300000;
                            Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                            _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                            _item.Plus = 4;
                            _item.Effect = Game.Enums.ItemEffect.Horse;
                            _item.SocketProgress = 150 << 8 | 255 << 16;
                            client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region SteedPack
                case 729990:
                    {
                        Npcs dialog = new Npcs(client);
                        dialog.Text("Hello. You can choose a horse:");
                        dialog.Option("Spitfire horse", 1);
                        dialog.Option("Frostbite horse", 2);
                        dialog.Option("Blazehoof horse", 3);
                        dialog.Option("Spotted horse", 4);
                        dialog.Option("Zebra", 5);
                        dialog.Option("Nevermind.", 255);
                        dialog.Send();
                        client.ActiveNpc = item.ID;
                        break;
                    }
                #endregion
                #region SuccessSteedPack
                case 3005668:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            ConquerItem _item = new ConquerItem(true);
                            _item.ID = 300000;
                            Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                            _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                            _item.Plus = 5;
                            _item.Effect = Game.Enums.ItemEffect.Horse;
                            _item.SocketProgress = 150 << 8 | 255 << 16;
                            client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region SteedPacks
                case 728525:
                case 3007287:
                case 3007283:
                case 728526:
                case 728527:
                    {
                        Npcs dialog = new Npcs(client);
                        dialog.Text("Hello. You can choose a horse: black, brown or white.");
                        dialog.Option("Black horse", 1);
                        dialog.Option("Brown horse", 2);
                        dialog.Option("White horse", 3);
                        dialog.Option("Nevermind.", 255);
                        dialog.Send();
                        client.ActiveNpc = item.ID;
                        break;
                    }
                case 723855:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        ConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 1;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 150 << 8 | 255 << 16;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                case 723856:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        ConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 1;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 150 | 255 << 8;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                case 723859:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        ConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 1;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 255 | 150 << 16;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                case 723860:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        ConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 3;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 150 << 8 | 255 << 16;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                case 723861:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        ConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 3;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 150 | 255 << 8;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                case 723862:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        ConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 3;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 255 | 150 << 16;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                case 723863:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        ConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 6;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 150 << 8 | 255 << 16;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                case 723864:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        ConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 6;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 150 | 255 << 8;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                case 723865:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        ConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 6;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 255 | 150 << 16;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                case 723900:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        ConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 0;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 150 << 8 | 255 << 16;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                case 723901:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        ConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 0;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 150 | 255 << 8;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                case 723902:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        ConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 0;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 255 | 150 << 16;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                #endregion
                #region AdvanceSteedPack
                case 3005669:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            ConquerItem _item = new ConquerItem(true);
                            _item.ID = 300000;
                            Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                            _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                            _item.Plus = 7;
                            _item.Effect = Game.Enums.ItemEffect.Horse;
                            _item.SocketProgress = 150 << 8 | 255 << 16;
                            client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #endregion
                #region Labyrinth
                #region Sun Diamond
                case 3007529:
                    {
                        client.Entity.AddFlag(Update.Flags.XPList);
                        client.XPListStamp = Time32.Now;
                        client.Inventory.Remove(item, Enums.ItemUse.Remove);
                        break;
                    }
                case 722732:
                case 722733:
                case 722734:
                case 722735:
                    {
                        if (client.Inventory.Contains(722732) && client.Inventory.Contains(722733) && client.Inventory.Contains(722734) && client.Inventory.Contains(722735))
                        {
                            client.IncreaseExperience(client.ExpBall / 100, true);
                            client.MessageBox("You Have Recieved 5 Minute Of Exprience");
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else
                            client.MessageBox("Failed~to~use~this~item.~You~should~use~a~Red~Flower~together~with~a~White~Flower~to~get~the~reward.");
                        break;
                    }
                case 722736:
                case 722737:
                case 722738:
                case 722739:
                    {
                        if (client.Inventory.Contains(722736) && client.Inventory.Contains(722737) && client.Inventory.Contains(722738) && client.Inventory.Contains(722739))
                        {
                            client.IncreaseExperience(client.ExpBall / 100, true);
                            client.MessageBox("You Have Recieved 5 Minute Of Exprience");
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else
                            client.MessageBox("Failed~to~use~this~item.~You~should~use~a~Red~Flower~together~with~a~red~Flower~to~get~the~reward.");
                        break;
                    }
                case 721533:
                    {
                        Npcs dialog = new Npcs(client);
                        dialog.Text("It requires 3 Sun Diamonds for making a Moon Diamond, and 17 Sun Diamonds for a Solar Treasure Chest. Which item do you want to make?");

                        dialog.Option("Treasure~chest.~(once~a~day)", 1);
                        dialog.Option("Moon~Diamond.", 2);
                        dialog.Option("I`ll~think~about~it.", 255);
                        dialog.Avatar(9999);
                        dialog.Send();
                        client.ActiveNpc = item.ID;
                        break;
                    }
                case 721535:
                    {
                        Npcs dialog = new Npcs(client);
                        dialog.Text("It requires 3 Star Diamonds for making a Cloud Diamond, and 17 Star Diamonds for a Starry Treasure Chest. Which item do you want to make?");

                        dialog.Option("Treasure~chest.~(once~a~day)", 1);
                        dialog.Option("Cloud~Diamond.", 2);
                        dialog.Option("I`ll~think~about~it.", 255);
                        dialog.Avatar(9999);
                        dialog.Send();
                        client.ActiveNpc = item.ID;
                        break;
                    }
                case 721536:
                    {
                        Npcs dialog = new Npcs(client);
                        dialog.Text("It requires 3 Cloud Diamonds for making a Labyrinth Permint, and 17 Cloud Diamonds for a Cloud Treasure Chest. Which item do you want to make?");
                        dialog.Option("Treasure~chest.~(once~a~day)", 1);
                        dialog.Option("Labyrinth~Permint.", 2);
                        dialog.Option("I`ll~think~about~it.", 255);
                        dialog.Avatar(9999);
                        dialog.Send();
                        client.ActiveNpc = item.ID;
                        break;
                    }

                case 721534:
                    {
                        Npcs dialog = new Npcs(client);
                        dialog.Text("It requires 3 Moon Diamonds for making a Star Diamond, and 17 Moon Diamonds for a Lunar Treasure Chest. Which item do you want to make?");

                        dialog.Option("Treasure~chest.~(once~a~day)", 1);
                        dialog.Option("Star~Diamond.", 2);
                        dialog.Option("I`ll~think~about~it.", 255);
                        dialog.Avatar(9999);
                        dialog.Send();
                        client.ActiveNpc = item.ID;
                        break;
                    }
                case 3007528:
                    {
                        Npcs dialog = new Npcs(client);
                        dialog.Text("The guiding bee can lead you to see the teleporting general, or spot the treasure if you have the map of this floor. So, where do you want to go?");

                        dialog.Option("Visit~the~general.", 1);
                        dialog.Option("Spot~the~treasure.", 2);
                        dialog.Option("I`ll~think~about~it.", 255);
                        dialog.Avatar(9999);
                        dialog.Send();
                        client.ActiveNpc = item.ID;
                        break;
                    }
                case 3007530:
                    {
                        if (client.Inventory.Count <= 38 && !client.Inventory.Contains(3007534))
                        {
                            #region Stalks
                            if (Kernel.Rate(10))
                            {
                                client.Inventory.Add(722732, 0, 1);//RedFlower
                            }
                            if (Kernel.Rate(11))
                            {
                                client.Inventory.Add(722733, 0, 1);//RedPetal
                            }
                            if (Kernel.Rate(12))
                            {
                                client.Inventory.Add(722734, 0, 1);//Redistal
                            }
                            if (Kernel.Rate(13))
                            {
                                client.Inventory.Add(722735, 0, 1);//RedStalk
                            }
                            if (Kernel.Rate(14))
                            {
                                client.Inventory.Add(722736, 0, 1);//WhiteFlower
                            }
                            if (Kernel.Rate(15))
                            {
                                client.Inventory.Add(722737, 0, 1);//WhitePetal
                            }
                            if (Kernel.Rate(16))
                            {
                                client.Inventory.Add(722738, 0, 1);//WhitePistil
                            }
                            if (Kernel.Rate(16))
                            {
                                client.Inventory.Add(722739, 0, 1);//WhiteStalk
                            }
                            #endregion
                            client.Inventory.Add(3007534, 0, 1);//SolarCrystal
                            client.Inventory.Remove(item, Enums.ItemUse.Remove);
                            client.IncreaseExperience(client.ExpBall / 100, true);
                            client.Send(new Message("You~received~60~minutes~of~EXP, Solar Crystal!", System.Drawing.Color.Tan, Message.System));
                        }
                        else
                        {
                            client.Send(Constants.FullInventory);
                        }
                        break;
                    }
                case 3007531:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            #region Stalks
                            if (Kernel.Rate(10))
                            {
                                client.Inventory.Add(722732, 0, 1);//RedFlower
                            }
                            if (Kernel.Rate(11))
                            {
                                client.Inventory.Add(722733, 0, 1);//RedPetal
                            }
                            if (Kernel.Rate(12))
                            {
                                client.Inventory.Add(722734, 0, 1);//Redistal
                            }
                            if (Kernel.Rate(13))
                            {
                                client.Inventory.Add(722735, 0, 1);//RedStalk
                            }
                            if (Kernel.Rate(14))
                            {
                                client.Inventory.Add(722736, 0, 1);//WhiteFlower
                            }
                            if (Kernel.Rate(15))
                            {
                                client.Inventory.Add(722737, 0, 1);//WhitePetal
                            }
                            if (Kernel.Rate(16))
                            {
                                client.Inventory.Add(722738, 0, 1);//WhitePistil
                            }
                            if (Kernel.Rate(16))
                            {
                                client.Inventory.Add(722739, 0, 1);//WhiteStalk
                            }
                            #endregion
                            client.Inventory.Add(3007535, 0, 1);//SolarCrystal
                            client.Inventory.Remove(item, Enums.ItemUse.Remove);
                            client.IncreaseExperience(client.ExpBall / 100, true);
                            client.Send(new Message("You~received~120~minutes~of~EXP, Lunar Crystal!", System.Drawing.Color.Tan, Message.System));
                        }
                        else
                        {
                            client.Send(Constants.FullInventory);
                        }
                        break;
                    }
                case 3007532:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            #region Stalks
                            if (Kernel.Rate(10))
                            {
                                client.Inventory.Add(722732, 0, 1);//RedFlower
                            }
                            if (Kernel.Rate(11))
                            {
                                client.Inventory.Add(722733, 0, 1);//RedPetal
                            }
                            if (Kernel.Rate(12))
                            {
                                client.Inventory.Add(722734, 0, 1);//Redistal
                            }
                            if (Kernel.Rate(13))
                            {
                                client.Inventory.Add(722735, 0, 1);//RedStalk
                            }
                            if (Kernel.Rate(14))
                            {
                                client.Inventory.Add(722736, 0, 1);//WhiteFlower
                            }
                            if (Kernel.Rate(15))
                            {
                                client.Inventory.Add(722737, 0, 1);//WhitePetal
                            }
                            if (Kernel.Rate(16))
                            {
                                client.Inventory.Add(722738, 0, 1);//WhitePistil
                            }
                            if (Kernel.Rate(16))
                            {
                                client.Inventory.Add(722739, 0, 1);//WhiteStalk
                            }
                            #endregion
                            client.Inventory.Add(3007536, 0, 1);//SolarCrystal
                            client.Inventory.Remove(item, Enums.ItemUse.Remove);
                            client.IncreaseExperience(client.ExpBall / 100, true);
                            client.Send(new Message("You~received~240~minutes~of~EXP, Starry Crystal!", System.Drawing.Color.Tan, Message.System));
                        }
                        else
                        {
                            client.Send(Constants.FullInventory);
                        }
                        break;
                    }
                case 3007533:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            #region Stalks
                            if (Kernel.Rate(10))
                            {
                                client.Inventory.Add(722732, 0, 1);//RedFlower
                            }
                            if (Kernel.Rate(11))
                            {
                                client.Inventory.AddBound(3003124, 0, 1);
                            }
                            if (Kernel.Rate(12))
                            {
                                client.Inventory.Add(722734, 0, 1);//Redistal
                            }
                            if (Kernel.Rate(13))
                            {
                                client.Inventory.AddBound(3003124, 0, 1);
                            }
                            if (Kernel.Rate(14))
                            {
                                client.Inventory.Add(722736, 0, 1);//WhiteFlower
                            }
                            if (Kernel.Rate(15))
                            {
                                client.Inventory.Add(722737, 0, 1);//WhitePetal
                            }
                            if (Kernel.Rate(16))
                            {
                                client.Inventory.Add(722738, 0, 1);//WhitePistil
                            }
                            if (Kernel.Rate(16))
                            {
                                client.Inventory.Add(722739, 0, 1);//WhiteStalk
                            }
                            #endregion
                            client.Inventory.Add(3007537, 0, 1);//SolarCrystal
                            client.Inventory.Remove(item, Enums.ItemUse.Remove);
                            client.IncreaseExperience(client.ExpBall / 100, true);
                            client.Send(new Message("You~received~320~minutes~of~EXP, Cloud Crystal!", System.Drawing.Color.Tan, Message.System));
                        }
                        else
                        {
                            client.Send(Constants.FullInventory);
                        }
                        break;
                    }
                case 3007534:
                case 3007535:
                case 3007536:
                case 3007537:
                    {
                        if (client.Inventory.Contains(3007534) && client.Inventory.Contains(3007535) && client.Inventory.Contains(3007536) && client.Inventory.Contains(3007537))
                        {
                            client.Inventory.Remove(3007534, 1);
                            client.Inventory.Remove(3007535, 1);
                            client.Inventory.Remove(3007536, 1);
                            client.Inventory.Remove(3007537, 1);
                            client.Inventory.Add(3008060, 0, 1);
                            client.Inventory.Add(3000796, 0, 1);
                            client.Entity.Teleport(1002, 300, 278);
                            if (client.Quests.HasQuest(QuestID.EvilLabyrinth))
                            {
                                client.Quests.FinishQuest(QuestID.EvilLabyrinth);
                            }
                            else
                            {
                                client.Quests.Accept(QuestID.EvilLabyrinth);
                                client.Quests.FinishQuest(QuestID.EvilLabyrinth);
                            }
                        }
                        break;
                    }
                case 3000796:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            int R = Kernel.Random.Next(1, 28);
                            if (R == 1)
                            {
                                client.Inventory.Add("SkyHammer");
                                _String packet = new _String(true);
                                packet.UID = 940;
                                packet.TextsCount = 1;
                                packet.Type = _String.Effect;
                                packet.Texts.Add("lottery");
                                client.Send(packet);
                            }
                            if (R == 2)
                            {
                                client.Inventory.Add("HeavenNecklace");
                                _String packet = new _String(true);
                                packet.UID = 940;
                                packet.TextsCount = 1;
                                packet.Type = _String.Effect;
                                packet.Texts.Add("lottery");
                                client.Send(packet);
                            }
                            if (R == 3)
                            {
                                client.Inventory.Add("MonsterSaber");
                                _String packet = new _String(true);
                                packet.UID = 940;
                                packet.TextsCount = 1;
                                packet.Type = _String.Effect;
                                packet.Texts.Add("lottery");
                                client.Send(packet);
                            }
                            if (R == 4)
                            {
                                client.Inventory.Add("CraneRing"); _String packet = new _String(true);
                                packet.UID = 940;
                                packet.TextsCount = 1;
                                packet.Type = _String.Effect;
                                packet.Texts.Add("lottery");
                                client.Send(packet);
                            }
                            if (R == 5)
                            {
                                client.Inventory.Add("NetherArmor"); _String packet = new _String(true);
                                packet.UID = 940;
                                packet.TextsCount = 1;
                                packet.Type = _String.Effect;
                                packet.Texts.Add("lottery");
                                client.Send(packet);

                            }
                            if (R == 6)
                            {
                                client.Inventory.Add("FervorBag"); _String packet = new _String(true);
                                packet.UID = 940;
                                packet.TextsCount = 1;
                                packet.Type = _String.Effect;
                                packet.Texts.Add("lottery");
                                client.Send(packet);
                            }
                            if (R == 7)
                            {
                                _String packet = new _String(true);
                                packet.UID = 940;
                                packet.TextsCount = 1;
                                packet.Type = _String.Effect;
                                packet.Texts.Add("lottery");
                                client.Send(packet);
                                client.Inventory.Add("StarHeadgear");
                            }
                            if (R == 8)
                            {
                                _String packet = new _String(true);
                                packet.UID = 940;
                                packet.TextsCount = 1;
                                packet.Type = _String.Effect;
                                packet.Texts.Add("lottery");
                                client.Send(packet);
                                client.Inventory.Add("FoxBoots");
                            }
                            if (R == 9)
                            {
                                _String packet = new _String(true);
                                packet.UID = 940;
                                packet.TextsCount = 1;
                                packet.Type = _String.Effect;
                                packet.Texts.Add("lottery");
                                client.Send(packet);
                                client.Inventory.Add("SkyHalberd");
                            }
                            if (R == 10)
                            {
                                _String packet = new _String(true);
                                packet.UID = 940;
                                packet.TextsCount = 1;
                                packet.Type = _String.Effect;
                                packet.Texts.Add("lottery");
                                client.Send(packet);
                                client.Inventory.Add("SpiritShield");
                            }
                            if (R == 11)
                            {
                                _String packet = new _String(true);
                                packet.UID = 940;
                                packet.TextsCount = 1;
                                packet.Type = _String.Effect;
                                packet.Texts.Add("lottery");
                                client.Send(packet);
                                client.Inventory.Add("SunHeadgear");
                            }
                            if (R == 12)
                            {
                                _String packet = new _String(true);
                                packet.UID = 940;
                                packet.TextsCount = 1;
                                packet.Type = _String.Effect;
                                packet.Texts.Add("lottery");
                                client.Send(packet);
                                client.Inventory.Add("BuddaBeads");
                            }
                            if (R == 13)
                            {
                                _String packet = new _String(true);
                                packet.UID = 940;
                                packet.TextsCount = 1;
                                packet.Type = _String.Effect;
                                packet.Texts.Add("lottery");
                                client.Send(packet);
                                client.Inventory.Add("ShadowKatana");
                            }
                            if (R == 14)
                            {
                                _String packet = new _String(true);
                                packet.UID = 940;
                                packet.TextsCount = 1;
                                packet.Type = _String.Effect;
                                packet.Texts.Add("lottery");
                                client.Send(packet);
                                client.Inventory.Add(800255, 0, 1);//DemonScyche
                            }
                            if (R == 15)
                            {
                                _String packet = new _String(true);
                                packet.UID = 940;
                                packet.TextsCount = 1;
                                packet.Type = _String.Effect;
                                packet.Texts.Add("lottery");
                                client.Send(packet);
                                client.Inventory.Add("DeathPistol");
                            }
                            if (R == 16)
                            {
                                _String packet = new _String(true);
                                packet.UID = 940;
                                packet.TextsCount = 1;
                                packet.Type = _String.Effect;
                                packet.Texts.Add("lottery");
                                client.Send(packet);
                                client.Inventory.Add("DragonBoots");
                            }
                            if (R == 17)
                            {
                                _String packet = new _String(true);
                                packet.UID = 940;
                                packet.TextsCount = 1;
                                packet.Type = _String.Effect;
                                packet.Texts.Add("lottery");
                                client.Send(packet);
                                client.Inventory.Add("RepentRapier");
                            }
                            if (R == 18)
                            {
                                _String packet = new _String(true);
                                packet.UID = 940;
                                packet.TextsCount = 1;
                                packet.Type = _String.Effect;
                                packet.Texts.Add("lottery");
                                client.Send(packet);
                                client.Inventory.Add("EclipseArmor");
                            }
                            if (R == 19)
                            {
                                _String packet = new _String(true);
                                packet.UID = 940;
                                packet.TextsCount = 1;
                                packet.Type = _String.Effect;
                                packet.Texts.Add("lottery");
                                client.Send(packet);
                                client.Inventory.Add("RainbowBracelet");
                            }
                            if (R == 20)
                            {
                                _String packet = new _String(true);
                                packet.UID = 940;
                                packet.TextsCount = 1;
                                packet.Type = _String.Effect;
                                packet.Texts.Add("lottery");
                                client.Send(packet);
                                client.Inventory.Add("GhostKnife");
                            }
                            if (R == 21)
                            {
                                _String packet = new _String(true);
                                packet.UID = 940;
                                packet.TextsCount = 1;
                                packet.Type = _String.Effect;
                                packet.Texts.Add("lottery");
                                client.Send(packet);
                                client.Inventory.Add("SunBow");
                            }
                            if (R == 22)
                            {
                                _String packet = new _String(true);
                                packet.UID = 940;
                                packet.TextsCount = 1;
                                packet.Type = _String.Effect;
                                packet.Texts.Add("lottery");
                                client.Send(packet);
                                client.Inventory.Add("TimeBacksword");
                            }
                            if (R == 23)
                            {
                                _String packet = new _String(true);
                                packet.UID = 940;
                                packet.TextsCount = 1;
                                packet.Type = _String.Effect;
                                packet.Texts.Add("lottery");
                                client.Send(packet);
                                client.Inventory.Add("WonderHossu");

                            }
                            if (R == 24)
                            {
                                _String packet = new _String(true);
                                packet.UID = 940;
                                packet.TextsCount = 1;
                                packet.Type = _String.Effect;
                                packet.Texts.Add("lottery");
                                client.Send(packet);
                                client.Inventory.Add("WarCraze");

                            }
                            if (R == 25)
                            {
                                _String packet = new _String(true);
                                packet.UID = 940;
                                packet.TextsCount = 1;
                                packet.Type = _String.Effect;
                                packet.Texts.Add("lottery");
                                client.Send(packet);
                                client.Inventory.Add("IceHeadgear");

                            }
                            if (R == 26)
                            {
                                _String packet = new _String(true);
                                packet.UID = 940;
                                packet.TextsCount = 1;
                                packet.Type = _String.Effect;
                                packet.Texts.Add("lottery");
                                client.Send(packet);
                                client.Inventory.Add("MoonHeadgear");

                            }
                            if (R == 27)
                            {
                                _String packet = new _String(true);
                                packet.UID = 940;
                                packet.TextsCount = 1;
                                packet.Type = _String.Effect;
                                packet.Texts.Add("lottery");
                                client.Send(packet);
                                client.Inventory.Add("DragonRing");

                            }
                            if (R == 28)
                            {
                                _String packet = new _String(true);
                                packet.UID = 940;
                                packet.TextsCount = 1;
                                packet.Type = _String.Effect;
                                packet.Texts.Add("lottery");
                                client.Send(packet);
                                client.Inventory.Add("CraneBoots");

                            }
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                case 3008060:
                    {
                        if (client.ChiPoints < 8000)
                        {
                            client.ChiPoints += 300;
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        break;
                    }
                #endregion
                #endregion
                #region SecondQuestItems
                case 3001556:
                    {
                        if (client.Entity.Reborn == 1 && client.Quests.GetQuest(QuestID.SecondQuestStageTwo) != null && client.Quests.GetQuest(QuestID.SecondQuestStageTwo).QItem.Status == QuestPacket.QuestData.QuestStatus.Accepted && client.Quests.GetQuest(QuestID.SecondQuestStageTwo).Kills < 40000)
                        {
                            client.Quests.IncreaseQuestKills(QuestID.SecondQuestStageTwo, 200);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else
                        {
                            client.MessageBox("You aren't 1st reborn or you haven't the stage two quest!");
                        }
                        break;
                    }
                case 3001557:
                    {
                        if (client.Entity.Reborn == 1 && client.Quests.GetQuest(QuestID.SecondQuestStageTwo) != null && client.Quests.GetQuest(QuestID.SecondQuestStageTwo).QItem.Status == QuestPacket.QuestData.QuestStatus.Accepted && client.Quests.GetQuest(QuestID.SecondQuestStageTwo).Kills < 40000)
                        {
                            client.Quests.IncreaseQuestKills(QuestID.SecondQuestStageTwo, 1000);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else
                        {
                            client.MessageBox("You aren't 1st reborn or you haven't the stage two quest!");
                        }
                        break;
                    }
                case 3001558:
                    {
                        if (client.Entity.Reborn == 1 && client.Quests.GetQuest(QuestID.SecondQuestStageTwo) != null && client.Quests.GetQuest(QuestID.SecondQuestStageTwo).QItem.Status == QuestPacket.QuestData.QuestStatus.Accepted && client.Quests.GetQuest(QuestID.SecondQuestStageTwo).Kills < 40000)
                        {
                            client.Quests.IncreaseQuestKills(QuestID.SecondQuestStageTwo, 2000);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else
                        {
                            client.MessageBox("You aren't 1st reborn or you haven't the stage two quest!");
                        }
                        break;
                    }
                case 3001559:
                    {
                        if (client.Entity.Reborn == 1 && client.Quests.GetQuest(QuestID.SecondQuestStageTwo) != null && client.Quests.GetQuest(QuestID.SecondQuestStageTwo).QItem.Status == QuestPacket.QuestData.QuestStatus.Accepted && client.Quests.GetQuest(QuestID.SecondQuestStageTwo).Kills < 40000)
                        {
                            client.Quests.IncreaseQuestKills(QuestID.SecondQuestStageTwo, 10000);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else
                        {
                            client.MessageBox("You aren't 1st reborn or you haven't the stage two quest!");
                        }
                        break;
                    }
                case 3001560:
                    {
                        if (client.Entity.Reborn == 1 && client.Quests.GetQuest(QuestID.SecondQuestStageTwo) != null && client.Quests.GetQuest(QuestID.SecondQuestStageTwo).QItem.Status == QuestPacket.QuestData.QuestStatus.Accepted && client.Quests.GetQuest(QuestID.SecondQuestStageTwo).Kills < 40000)
                        {
                            client.Quests.IncreaseQuestKills(QuestID.SecondQuestStageTwo, 20000);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else
                        {
                            client.MessageBox("You aren't 1st reborn or you haven't the stage two quest!");
                        }
                        break;
                    }
                case 3001561:
                    {
                        if (client.Entity.Reborn == 1 && client.Quests.GetQuest(QuestID.SecondQuestStageTwo) != null && client.Quests.GetQuest(QuestID.SecondQuestStageTwo).QItem.Status == QuestPacket.QuestData.QuestStatus.Accepted && client.Quests.GetQuest(QuestID.SecondQuestStageTwo).Kills < 40000)
                        {
                            client.Quests.IncreaseQuestKills(QuestID.SecondQuestStageTwo, 40000);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else
                        {
                            client.MessageBox("You aren't 1st reborn or you haven't the stage two quest!");
                        }
                        break;
                    }
                case 3001562:
                    {
                        if (client.Entity.Reborn == 1 && client.Quests.GetQuest(QuestID.SecondQuestStageThree) != null && client.Quests.GetQuest(QuestID.SecondQuestStageThree).QItem.Status == QuestPacket.QuestData.QuestStatus.Accepted)
                        {
                            client.Quests.IncreaseQuestKills2(QuestID.SecondQuestStageThree, 1);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else
                        {
                            client.MessageBox("You aren't 1st reborn or you haven't the stage 3 quest!");
                        }
                        break;
                    }
                case 3001563:
                    {
                        if (client.Entity.Reborn == 1 && client.Quests.GetQuest(QuestID.SecondQuestStageThree) != null && client.Quests.GetQuest(QuestID.SecondQuestStageThree).QItem.Status == QuestPacket.QuestData.QuestStatus.Accepted)
                        {
                            client.Quests.IncreaseQuestKills2(QuestID.SecondQuestStageThree, 8);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else
                        {
                            client.MessageBox("You aren't 1st reborn or you haven't the stage 3 quest!");
                        }
                        break;
                    }
                case 3001564:
                    {
                        if (client.Entity.Reborn == 1 && client.Quests.GetQuest(QuestID.SecondQuestStageThree) != null && client.Quests.GetQuest(QuestID.SecondQuestStageThree).QItem.Status == QuestPacket.QuestData.QuestStatus.Accepted)
                        {
                            client.Quests.IncreaseQuestKills2(QuestID.SecondQuestStageThree, 72);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else
                        {
                            client.MessageBox("You aren't 1st reborn or you haven't the stage 3 quest!");
                        }
                        break;
                    }
                #endregion
                #region ActivinessPack
                #region DivineActivePack
                case 3005065:
                    {
                        Npcs dialog = new Npcs(client);
                        dialog.Text("You are able to choose a [Champion] Active Pack, which contains many");
                        dialog.Text("rewards, or a Magic Lucky Ticket, Which could multiply the reward when you");
                        dialog.Text("open the [Champion] Active Pack. What is your choice?)");
                        dialog.Option("[Champion] Active Pack.", 1);
                        dialog.Option("Magic Lucky Ticket.", 2);
                        dialog.Send();
                        client.ActiveNpc = item.ID;
                        break;
                    }
                #endregion
                #region [Champion]ActivePack
                case 3005062:
                    {
                        Npcs dialog = new Npcs(client);
                        dialog.Text("Do you want to use the Magic Lucky Ticket when opening the pack? Te ticket");
                        dialog.Text("will multiply the reward by 2 - 128 times. (Access the active system to claim");
                        dialog.Text("active packs and Magic Lucky Tickets:)");
                        dialog.Option("Yeah. Open it with the ticket.", 1);
                        dialog.Option("No. Just open the pack.", 2);
                        dialog.Send();
                        client.ActiveNpc = item.ID; break;
                    }
                #endregion
                #endregion
                #region JiangItems
                #region FavordTrainingPillspacks
                case 3003132:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            client.Inventory.Add(3003124, 0, 1);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 3003133:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            client.Inventory.Add(3003124, 0, 2);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 3003134:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            client.Inventory.Add(3003124, 0, 5);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 3003135:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            client.Inventory.Add(3003124, 0, 10);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 3003136:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            client.Inventory.Add(3003124, 0, 20);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 3003137:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            client.Inventory.Add(3003124, 0, 50);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 3003138:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            client.Inventory.Add(3003124, 0, 100);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region SeniorTrainingPillspacks
                case 3003146:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            client.Inventory.Add(3003126, 0, 1);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 3003147:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            client.Inventory.Add(3003126, 0, 2);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 3003148:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            client.Inventory.Add(3003126, 0, 5);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 3003149:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            client.Inventory.Add(3003126, 0, 10);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 3003150:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            client.Inventory.Add(3003126, 0, 20);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 3003151:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            client.Inventory.Add(3003126, 0, 50);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 3003152:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            client.Inventory.Add(3003126, 0, 100);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 3005659:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Add(3003126, 0, 200);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region TrainingTalentPack
                case 3006542:
                    {
                        if (client.Entity.MyJiang != null)
                        {
                            if (client.Entity.MyJiang.Talent < 4)
                            {
                                client.Entity.MyJiang.Talent++;
                                client.Entity.MyJiang.SendInfo(client, GamePackets.JiangHu.UpdateTalent, client.Entity.UID.ToString(), client.Entity.MyJiang.Talent.ToString());
                                client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            }
                            else client.Send(new Message("Failed to use this pack. Your Talent of Jiang hu is full.", Color.White, Message.Talk));
                        }
                        else client.Send(new Message("You should unlock the Jiang Hu system before you can use this pack.", Color.White, Message.Talk));
                        break;
                    }
                #endregion
                #region TrainingTalentPack
                case 3007386:
                    {
                        if (client.Inventory.Count <= 30)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(3006542, 0, 10);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region LuxuryProtection
                case 3007285:
                    {
                        if (client.Inventory.Count <= 25)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(3002029, 0, 15);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region GoldenTrainingPack
                case 3007284:
                    {
                        if (client.Entity.MyJiang != null)
                        {
                            if (client.Entity.MyJiang.FreeCourse <= 900000)
                            {
                                client.Entity.MyJiang.FreeCourse += 100000;
                                client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            }
                        }
                        else client.Send(new Message("You should unlock the Jiang Hu system before you can use this pack.", Color.White, Message.Talk));
                        break;
                    }
                #endregion
                #region SpecialTrainingPillspacks
                case 3003139:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            client.Inventory.Add(3003125, 0, 1);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 3003140:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            client.Inventory.Add(3003125, 0, 2);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 3003141:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            client.Inventory.Add(3003125, 0, 5);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 3003142:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            client.Inventory.Add(3003125, 0, 10);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 3003143:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            client.Inventory.Add(3003125, 0, 20);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 3003144:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            client.Inventory.Add(3003125, 0, 50);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 3003145:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            client.Inventory.Add(3003125, 0, 100);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                case 3003153:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            client.Inventory.Add(3003125, 0, 6);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #endregion
                #region ChiPacks
                #region ChiPack(50pts)
                    case 3006539:
                    {
                        client.ChiPoints += 50;
                        client.Send(new Message("You received 50 Chi Points!", Color.Red, Message.System));
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                #endregion
                #region 20PointsChiPack
                case 3000060:
                    {
                        client.ChiPoints += 20;
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                #endregion
                #region 40PointsChiPack
                case 3000061:
                    {
                        client.ChiPoints += 40;
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                #endregion
                #region RadiantChiPack
                case 3005670:
                    {
                        client.ChiPoints += 500;
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                #endregion
                #region VitalPill
                case 729242:
                    {
                        if (client.ChiPoints < 4000)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.ChiPoints += 500;
                            client.Send(new Message("Congratultions you have got 500 Chi points.", System.Drawing.Color.Red,
                                Message.TopLeft));
                        }
                        else
                        {
                            client.Send(new Message("Your ChiPoints is reach 4,000 you can't use this item.", System.Drawing.Color.Red,
                                Message.TopLeft));
                        }

                        break;
                    }
                #endregion
                #region 60PointsChiPack
                case 3000062:
                    {
                        client.ChiPoints += 60;
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                #endregion
                #region 150PointsChiPack
                case 3000063:
                    {
                        client.ChiPoints += 150;
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                #endregion
                #endregion
                #region TrojanEpic
            /*    case 3003340:
                    {
                        Npcs dialog = new Npcs(client);
                        dialog.Text("Hello. Which weapon will i change?:");
                        dialog.Option("Left weapon", 1);
                        dialog.Option("Right weapon", 2);
                        dialog.Send();
                        client.ActiveNpc = item.ID;

                        break;
                    }*/
                #endregion
                #region Prosperity Pack
                case 3000550:
                    {
                        if (client.Entity.Reborn > 0) break;
                        if (client.Entity.StarterPackLevel == 0)
                        {
                            client.Entity.Money += 500;
                            client.Entity.StarterPackLevel = 5;
                            break;
                        }
                        else if (client.Entity.StarterPackLevel == 5 && client.Entity.Level >= 5)
                        {
                            if (client.Inventory.Count <= 39)
                            {
                                client.Entity.Money += 1500;
                                client.Entity.StarterPackLevel = 10;
                                client.Inventory.AddBound(723017, 0, 1);
                                break;
                            }
                            else
                            {
                                client.Send(Constants.FullInventory);
                                break;
                            }
                        }
                        else if (client.Entity.StarterPackLevel == 10 && client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count <= 39)
                            {
                                client.Entity.Money += 300;
                                client.Entity.StarterPackLevel = 15;
                                client.Inventory.AddBound(723790, 0, 5);
                                break;
                            }
                            else
                            {
                                client.Send(Constants.FullInventory);
                                break;
                            }
                        }
                        else if (client.Entity.StarterPackLevel == 15 && client.Entity.Level >= 15)
                        {
                            if (client.Inventory.Count <= 38)
                            {
                                client.Entity.Money += 5000;
                                client.Entity.StarterPackLevel = 20;
                                client.Inventory.AddBound(723790, 0, 5);
                                client.Inventory.AddBound(1060020, 0, 3);
                                break;
                            }
                            else
                            {
                                client.Send(Constants.FullInventory);
                                break;
                            }
                        }
                        else if (client.Entity.StarterPackLevel == 20 && client.Entity.Level >= 20)
                        {
                            if (client.Inventory.Count <= 39)
                            {
                                client.Entity.StarterPackLevel = 25;
                                client.Inventory.AddBound(3000587, 0, 1);
                                break;
                            }
                            else
                            {
                                client.Send(Constants.FullInventory);
                                break;
                            }
                        }
                        else if (client.Entity.StarterPackLevel == 25 && client.Entity.Level >= 25)
                        {
                            if (client.Inventory.Count <= 38)
                            {
                                client.Entity.StarterPackLevel = 30;
                                client.Inventory.AddBound(721625, 0, 3);
                                client.Inventory.AddBound(721626, 0, 3);
                                break;
                            }
                            else
                            {
                                client.Send(Constants.FullInventory);
                                break;
                            }
                        }
                        else if (client.Entity.StarterPackLevel == 30 && client.Entity.Level >= 30)
                        {
                            if (client.Inventory.Count <= 38)
                            {
                                client.Entity.StarterPackLevel = 35;
                                client.Inventory.AddBound(723017, 0, 1);
                                client.Inventory.AddBound(1060023, 0, 3);
                                break;
                            }
                            else
                            {
                                client.Send(Constants.FullInventory);
                                break;
                            }
                        }
                        else if (client.Entity.StarterPackLevel == 35 && client.Entity.Level >= 35)
                        {
                            if (client.Inventory.Count <= 39)
                            {
                                client.Entity.StarterPackLevel = 40;
                                client.Inventory.AddBound(725018, 0, 1);
                                client.Entity.Money += 8000;
                                break;
                            }
                            else
                            {
                                client.Send(Constants.FullInventory);
                                break;
                            }
                        }
                        else if (client.Entity.StarterPackLevel == 40 && client.Entity.Level >= 40)
                        {
                            if (client.Inventory.Count <= 39)
                            {
                                client.Entity.StarterPackLevel = 45;
                                client.Inventory.AddBound(723017, 0, 1);
                                client.Entity.Money += 10000;
                                break;
                            }
                            else
                            {
                                client.Send(Constants.FullInventory);
                                break;
                            }
                        }
                        else if (client.Entity.StarterPackLevel == 45 && client.Entity.Level >= 45)
                        {
                            if (client.Inventory.Count <= 39)
                            {
                                client.Entity.StarterPackLevel = 50;
                                client.Inventory.AddBound(728525, 0, 1);
                                break;
                            }
                            else
                            {
                                client.Send(Constants.FullInventory);
                                break;
                            }
                        }
                        else if (client.Entity.StarterPackLevel == 50 && client.Entity.Level >= 50)
                        {
                            if (client.Inventory.Count <= 39)
                            {
                                client.Entity.StarterPackLevel = 55;
                                client.Inventory.AddBound(3000588, 0, 1);
                                break;
                            }
                            else
                            {
                                client.Send(Constants.FullInventory);
                                break;
                            }
                        }
                        else if (client.Entity.StarterPackLevel == 55 && client.Entity.Level >= 55)
                        {
                            if (client.Inventory.Count <= 38)
                            {
                                client.Entity.StarterPackLevel = 60;
                                client.Inventory.AddBound(723017, 0, 1);
                                client.Inventory.AddBound(1088001, 0, 1);
                                break;
                            }
                            else
                            {
                                client.Send(Constants.FullInventory);
                                break;
                            }
                        }
                        else if (client.Entity.StarterPackLevel == 60 && client.Entity.Level >= 60)
                        {
                            if (client.Inventory.Count <= 38)
                            {
                                client.Entity.StarterPackLevel = 65;
                                client.Inventory.AddBound(730001, 1, 1);
                                client.Inventory.AddBound(1088001, 0, 1);
                                break;
                            }
                            else
                            {
                                client.Send(Constants.FullInventory);
                                break;
                            }
                        }
                        if (client.Entity.StarterPackLevel == 65 && client.Entity.Level >= 65)
                        {
                            if (client.Inventory.Count <= 37)
                            {
                                client.Entity.StarterPackLevel = 70;
                                client.Inventory.AddBound(730001, 1, 1);
                                client.Inventory.AddBound(1088001, 0, 1);
                                client.Inventory.AddBound(1200000, 0, 1);
                                break;
                            }
                            else
                            {
                                client.Send(Constants.FullInventory);
                                break;
                            }
                        }
                        else if (client.Entity.StarterPackLevel == 70 && client.Entity.Level >= 70)
                        {
                            if (client.Inventory.Count <= 37)
                            {
                                client.Entity.StarterPackLevel = 75;
                                client.Inventory.AddBound(730001, 1, 1);
                                client.Inventory.AddBound(1088001, 0, 1);
                                client.Inventory.AddBound(1080001, 0, 1);
                                break;
                            }
                            else
                            {
                                client.Send(Constants.FullInventory);
                                break;
                            }
                        }
                        else if (client.Entity.StarterPackLevel == 75 && client.Entity.Level >= 75)
                        {
                            if (client.Inventory.Count <= 37)
                            {
                                client.Entity.StarterPackLevel = 80;
                                client.Inventory.AddBound(730001, 1, 1);
                                client.Inventory.AddBound(1088001, 0, 1);
                                client.Inventory.AddBound(700012, 0, 1);
                                break;
                            }
                            else
                            {
                                client.Send(Constants.FullInventory);
                                break;
                            }
                        }
                        else if (client.Entity.StarterPackLevel == 80 && client.Entity.Level >= 80)
                        {
                            if (client.Inventory.Count <= 37)
                            {
                                client.Entity.StarterPackLevel = 85;
                                client.Inventory.AddBound(3000589, 0, 1);
                                break;
                            }
                            else
                            {
                                client.Send(Constants.FullInventory);
                                break;
                            }
                        }
                        else if (client.Entity.StarterPackLevel == 85 && client.Entity.Level >= 85)
                        {
                            if (client.Inventory.Count <= 37)
                            {
                                client.Entity.StarterPackLevel = 90;
                                client.Inventory.AddBound(730001, 1, 1);
                                client.Inventory.AddBound(1088001, 0, 1);
                                client.Inventory.AddBound(723700, 0, 1);
                                break;
                            }
                            else
                            {
                                client.Send(Constants.FullInventory);
                                break;
                            }
                        }
                        else if (client.Entity.StarterPackLevel == 90 && client.Entity.Level >= 90)
                        {
                            if (client.Inventory.Count <= 38)
                            {
                                client.Entity.StarterPackLevel = 95;
                                client.Inventory.AddBound(730001, 1, 1);
                                client.Inventory.AddBound(1088001, 0, 1);
                                break;
                            }
                            else
                            {
                                client.Send(Constants.FullInventory);
                                break;
                            }
                        }
                        else if (client.Entity.StarterPackLevel == 95 && client.Entity.Level >= 95)
                        {
                            if (client.Inventory.Count <= 36)
                            {
                                client.Entity.StarterPackLevel = 100;
                                client.Inventory.AddBound(201008, 0, 1);
                                client.Inventory.AddBound(1088001, 0, 3);
                                break;
                            }
                            else
                            {
                                client.Send(Constants.FullInventory);
                                break;
                            }
                        }
                        else if (client.Entity.StarterPackLevel == 100 && client.Entity.Level >= 100)
                        {
                            if (client.Inventory.Count <= 34)
                            {
                                client.Entity.StarterPackLevel = 105;
                                client.Inventory.AddBound(202008, 0, 1);
                                client.Inventory.AddBound(1088001, 0, 3);
                                client.Inventory.AddBound(1200000, 0, 1);
                                client.Inventory.AddBound(723700, 0, 1);
                                client.Entity.Money += 20000;
                                break;
                            }
                            else
                            {
                                client.Send(Constants.FullInventory);
                                break;
                            }
                        }
                        else if (client.Entity.StarterPackLevel == 105 && client.Entity.Level >= 105)
                        {
                            if (client.Inventory.Count <= 38)
                            {
                                client.Entity.StarterPackLevel = 110;
                                client.Inventory.AddBound(723017, 0, 2);
                                client.Inventory.AddBound(204007, 0, 1);
                                client.Entity.BoundCps += 50;
                                break;
                            }
                            else
                            {
                                client.Send(Constants.FullInventory);
                                break;
                            }
                        }
                        else if (client.Entity.StarterPackLevel == 110 && client.Entity.Level >= 110)
                        {
                            if (client.Inventory.Count <= 31)
                            {
                                client.Entity.StarterPackLevel = 115;
                                client.Inventory.AddBound(753009, 0, 1);
                                client.Inventory.AddBound(753003, 0, 2);
                                client.Inventory.AddBound(721090, 0, 1);
                                client.Inventory.AddBound(1088001, 0, 3);
                                client.Inventory.AddBound(730001, 1, 1);
                                break;
                            }
                            else
                            {
                                client.Send(Constants.FullInventory);
                                break;
                            }
                        }
                        else if (client.Entity.StarterPackLevel == 115 && client.Entity.Level >= 115)
                        {
                            if (client.Inventory.Count <= 32)
                            {
                                client.Entity.StarterPackLevel = 120;
                                client.Inventory.AddBound(730001, 1, 1);
                                client.Inventory.AddBound(1088001, 0, 3);
                                client.Inventory.AddBound(723700, 0, 1);
                                client.Inventory.AddBound(723017, 0, 2);
                                int r = Kernel.Random.Next(1, 4);
                                if (r == 1)
                                {
                                    client.Inventory.AddBound(181455, 0, 1);
                                }
                                if (r == 2)
                                {
                                    client.Inventory.AddBound(191305, 0, 1);
                                }
                                if (r == 3)
                                {
                                    client.Inventory.AddBound(183325, 0, 1);
                                }
                                if (r == 4)
                                {
                                    client.Inventory.AddBound(181395, 0, 1);
                                }
                                break;
                            }
                            else
                            {
                                client.Send(Constants.FullInventory);
                                break;
                            }
                        }
                        else if (client.Entity.StarterPackLevel == 120 && client.Entity.Level >= 120)
                        {
                            if (client.Inventory.Count <= 37)
                            {
                                client.Entity.StarterPackLevel = 255;
                                client.Inventory.AddBound(721259, 0, 1);
                                client.Inventory.AddBound(1200000, 0, 1);
                                client.Inventory.AddBound(3000590, 0, 1);
                                client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                                break;
                            }
                            else
                            {
                                client.Send(Constants.FullInventory);
                                break;
                            }
                        }
                        else
                        {
                            client.Send(new Message("You should reach level " + client.Entity.StarterPackLevel + " before you can open this pack.", Color.Red, Message.Talk));
                            break;
                        }
                        
                    }
                #endregion
                #region AttackPot
                case 721625:
                    {
                        client.Entity.AddFlag((ulong)Update.Flags.Stigma);
                        client.Entity.StigmaStamp = Time32.Now;
                        client.Entity.StigmaIncrease = 15;
                        client.Entity.StigmaTime += 1800;
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                #endregion
                #region DefencePot
                case 721626:
                    {
                        client.Entity.AddFlag((ulong)Update.Flags.MagicShield);
                        client.Entity.MagicShieldStamp = Time32.Now;
                        client.Entity.MagicShieldIncrease = 15;
                        client.Entity.MagicShieldTime += 1800;
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                #endregion
                #region Epic
               /* #region ToaistEpic
                case 3006016:
                    {
                        Npcs dialog = new Npcs(client);
                        dialog.Text("Hello. Which weapon will i change?:");
                        dialog.Option("Epic~Backsword", 1);
                        dialog.Option("Hossu", 2);
                        dialog.Send();
                        client.ActiveNpc = item.ID;

                        break;
                    }
                #endregion
                #region MonkEpic
                case 3007564:
                    {
                        Npcs dialog = new Npcs(client);
                        dialog.Text("Hello. Which weapon will i change?:");
                        dialog.Option("Left weapon", 1);
                        dialog.Option("Right weapon", 2);
                        dialog.Send();
                        client.ActiveNpc = item.ID;

                        break;
                    }
                #endregion
                #region Life'S Eye
                case 3004464:
                    {
                        Npcs dialog = new Npcs(client);
                        dialog.Text("Hello. Which weapon will i change?:");
                        dialog.Option("Left weapon", 1);
                        dialog.Option("Right weapon", 2);
                        dialog.Send();
                        client.ActiveNpc = item.ID;
                        break;
                    }
                #endregion*/
                #endregion
                #region Epic Weapone
                #region Life`sEye
                case 3004464:
                    {

                        if (client.Entity.Class >= 50 && client.Entity.Class <= 55)
                        {
                            if (client.Equipment.TryGetItem(4) != null || client.Equipment.TryGetItem(5) != null)
                            {

                                if (client.Equipment.TryGetItem(4).ID / 1000 == 601 || client.Equipment.TryGetItem(5).ID / 1000 == 601)
                                {
                                    if (client.Equipment.TryGetItem(4).ID / 1000 == 601)
                                    {

                                        var items = client.Equipment.TryGetItem(4);

                                        items.ID = (616 * 1000) + (items.ID % 1000);

                                        Database.ConquerItemTable.UpdateItemID(items);
                                        items.Mode = Enums.ItemMode.Update;
                                        items.Send(client);
                                        items.Mode = Enums.ItemMode.Default;

                                        client.LoadItemStats();
                                        client.Equipment.UpdateEntityPacket();
                                        client.MessageBox("congratulations You Get Epic Ninja");

                                    }
                                    else if (client.Equipment.TryGetItem(5).ID / 1000 == 601)
                                    {
                                        var items = client.Equipment.TryGetItem(5);
                                        //items.ID = NewID;
                                        items.ID = (616 * 1000) + (items.ID % 1000);
                                        Database.ConquerItemTable.UpdateItemID(items);
                                        items.Mode = Enums.ItemMode.Update;
                                        items.Send(client);
                                        items.Mode = Enums.ItemMode.Default;

                                        client.LoadItemStats();
                                        client.Equipment.UpdateEntityPacket();
                                        client.MessageBox("congratulations You Get Epic Ninja");

                                    }
                                }
                                else
                                {
                                    client.Send(new Message("You should Equip Katana.", System.Drawing.Color.Red, Message.TopLeft));
                                }

                                client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                                // c//lient.Entity.Teleport(1002, 301, 278);
                            }
                            else
                            {
                                client.Send(new Message("You should Equip Katana.", System.Drawing.Color.Red, Message.TopLeft));
                            }
                        }
                        else
                        {
                            client.MessageBox(" Sorry ! Your Class not a Ninja");
                        }
                        break;
                    }
                #endregion
                #region DivinePanacea
                case 3006016:
                    {
                        if (client.Entity.Class >= 100 && client.Entity.Class <= 145)
                        {
                            if (client.Equipment.TryGetItem(4) != null)
                            {

                                if (client.Equipment.TryGetItem(4).ID / 1000 == 421)
                                {
                                    if (client.Equipment.TryGetItem(4).ID / 1000 == 421)
                                    {

                                        var items = client.Equipment.TryGetItem(4);

                                        items.ID = (620 * 1000) + (items.ID % 1000);

                                        Database.ConquerItemTable.UpdateItemID(items);
                                        items.Mode = Enums.ItemMode.Update;
                                        items.Send(client);
                                        items.Mode = Enums.ItemMode.Default;

                                        client.LoadItemStats();
                                        client.Equipment.UpdateEntityPacket();
                                        client.MessageBox("congratulations You Get Epic Taoists");


                                    }
                                }
                                else
                                {
                                    client.Send(new Message("You should Equip BackSowrd.", System.Drawing.Color.Red, Message.TopLeft));
                                }

                                client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                                // c//lient.Entity.Teleport(1002, 301, 278);
                            }
                            else
                            {
                                client.Send(new Message("You should Equip BackSowrd.", System.Drawing.Color.Red, Message.TopLeft));
                            }
                        }
                        else
                        {
                            client.MessageBox(" Sorry ! Your Class Not a Taoist");
                        }
                        break;
                    }
                #endregion
                #region EpicWeapontrojan
                case 3003340:
                    {
                        if (client.Entity.Class >= 10 && client.Entity.Class <= 15)
                        {
                            if (client.Equipment.TryGetItem(4) != null || client.Equipment.TryGetItem(5) != null)
                            {

                                if (client.Equipment.TryGetItem(4).ID / 1000 == 410 || client.Equipment.TryGetItem(5).ID / 1000 == 410 ||
                                    client.Equipment.TryGetItem(4).ID / 1000 == 420 || client.Equipment.TryGetItem(5).ID / 1000 == 420 ||
                                    client.Equipment.TryGetItem(4).ID / 1000 == 480 || client.Equipment.TryGetItem(5).ID / 1000 == 480)
                                {
                                    if (client.Equipment.TryGetItem(4).ID / 1000 == 410 ||
                                        client.Equipment.TryGetItem(4).ID / 1000 == 420 ||
                                        client.Equipment.TryGetItem(4).ID / 1000 == 480)
                                    {

                                        var items = client.Equipment.TryGetItem(4);

                                        items.ID = (614 * 1000) + (items.ID % 1000);

                                        Database.ConquerItemTable.UpdateItemID(items);
                                        items.Mode = Enums.ItemMode.Update;
                                        items.Send(client);
                                        items.Mode = Enums.ItemMode.Default;

                                        client.LoadItemStats();
                                        client.Equipment.UpdateEntityPacket();
                                        client.MessageBox("congratulations You Get Epic Trojan");

                                    }
                                    else if (client.Equipment.TryGetItem(5).ID / 1000 == 410 ||
                                        client.Equipment.TryGetItem(5).ID / 1000 == 420 ||
                                        client.Equipment.TryGetItem(5).ID / 1000 == 480)
                                    {
                                        var items = client.Equipment.TryGetItem(5);
                                        //items.ID = NewID;
                                        items.ID = (614 * 1000) + (items.ID % 1000);
                                        Database.ConquerItemTable.UpdateItemID(items);
                                        items.Mode = Enums.ItemMode.Update;
                                        items.Send(client);
                                        items.Mode = Enums.ItemMode.Default;

                                        client.LoadItemStats();
                                        client.Equipment.UpdateEntityPacket();
                                        client.MessageBox("congratulations You Get Epic Trojan");

                                    }
                                }
                                else
                                {
                                    client.Send(new Message("You should Equip Blade Or Sword or Club .", System.Drawing.Color.Red, Message.TopLeft));
                                }

                                client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                                // c//lient.Entity.Teleport(1002, 301, 278);
                            }
                            else
                            {
                                client.Send(new Message("You should Equip Blade Or Sword or Club.", System.Drawing.Color.Red, Message.TopLeft));
                            }
                        }
                        else
                        {
                            client.MessageBox(" Sorry ! Your Class not Trojan");
                        }
                        break;
                    }
                #endregion
                #region EpicWeaponToken
                case 3006226://
                    {
                        if (client.Entity.Class >= 100 && client.Entity.Class <= 145)
                        {
                            client.Inventory.Add(619439, 0, 1);
                            // PacketHandler.CheckCommand2("@tegotegatege UniverseHossu super 12 7 255 3 3", client);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Send(new Message("" + client.Entity.Name + " Got the EpicWeaponToken . and Obtained a Super UniverseHossu ( TaoistEpicWeapon )", System.Drawing.Color.Red, Message.TopLeft));
 
                        }
                        else
                        {
                            client.MessageBox(" Sorry ! Your Class Not Taoist ");
                        }
                        break;
                    }
                #endregion
                #region BoundlessHeart
                case 3007564:
                    {
                        if (client.Entity.Class >= 60 && client.Entity.Class <= 65)
                        {
                            if (client.Equipment.TryGetItem(4) != null || client.Equipment.TryGetItem(5) != null)
                            {

                                if (client.Equipment.TryGetItem(4).ID / 1000 == 610 || client.Equipment.TryGetItem(5).ID / 1000 == 610)
                                {
                                    if (client.Equipment.TryGetItem(4).ID / 1000 == 610)
                                    {

                                        var items = client.Equipment.TryGetItem(4);

                                        items.ID = (622 * 1000) + (items.ID % 1000);

                                        Database.ConquerItemTable.UpdateItemID(items);
                                        items.Mode = Enums.ItemMode.Update;
                                        items.Send(client);
                                        items.Mode = Enums.ItemMode.Default;

                                        client.LoadItemStats();
                                        client.Equipment.UpdateEntityPacket();
                                        client.MessageBox("congratulations You Get Epic Monk");

                                    }
                                    else if (client.Equipment.TryGetItem(5).ID / 1000 == 610)
                                    {
                                        var items = client.Equipment.TryGetItem(5);
                                        //items.ID = NewID;
                                        items.ID = (622 * 1000) + (items.ID % 1000);
                                        Database.ConquerItemTable.UpdateItemID(items);
                                        items.Mode = Enums.ItemMode.Update;
                                        items.Send(client);
                                        items.Mode = Enums.ItemMode.Default;

                                        client.LoadItemStats();
                                        client.Equipment.UpdateEntityPacket();
                                        client.MessageBox("congratulations You Get Epic Monk");

                                    }
                                }
                                else
                                {
                                    client.Send(new Message("You should Equip Beads.", System.Drawing.Color.Red, Message.TopLeft));
                                }

                                client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                                // c//lient.Entity.Teleport(1002, 301, 278);
                            }
                            else
                            {
                                client.Send(new Message("You should Equip Beads.", System.Drawing.Color.Red, Message.TopLeft));
                            }
                        }
                        else
                        {
                            client.MessageBox(" Sorry ! Your Class Not a Monk ");
                        }
                        break;
                    }
                #endregion
                #endregion
                #region FairyWing
                case 3008863:
                    {
                        new TitleStorage().AddTitle(client, 6005, 6005, true);
                        break;
                    }
                #endregion
                #region PlutoTokenScrap
                case 3006983:
                    {
                        if (client.Inventory.Contains(item.ID, 4))
                        {
                            client.Inventory.Remove(item.ID, 4);
                            client.Inventory.Add(3006984, 0, 1);
                        }
                        else
                        {
                            client.MessageBox("You Haven't 4 PlutoTokenScrapes");
                            break;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                case 3006984:
                    {
                        if (Kernel.GetDistance(client.Entity.X, client.Entity.Y, 149, 139) > 16)
                        {
                            client.MessageBox("Please go to the center (149,139) of the Battle Formation, and then retry to summon the Ultimate Pluto.");
                            break;
                        }
                        Database.MonsterInformation mob = null;
                        Database.MonsterInformation.MonsterInformations.TryGetValue(5059, out mob);
                        client.map.SpawnMonsterNearToHero(mob, client);
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                #endregion
                #region DailyQuestItems
                #region SpiritBead
                case 729611:
                case 729612:
                case 729613:
                case 729614:
                case 729703:
                    {
                        Npcs dialog = new Npcs(client);
                        dialog.Text("This bead needs to absorb 2,500 spirits. Current spirits: " + client.Entity.SpiritBeadsCount + ".");
                        if (Npcs.CalculateBeadSpirits(Npcs.GetBeadID(client, client.Entity.SpiritBeadsType)) - client.Entity.SpiritBeadsCount > 0)
                        {
                            dialog.Option("Fill~it~up.~(5CPs)", 1);
                        }
                        else if (Npcs.CalculateBeadSpirits(Npcs.GetBeadID(client, client.Entity.SpiritBeadsType)) - client.Entity.SpiritBeadsCount <= 0)
                        {
                            dialog.Option("Submit.", 2);
                        }
                        dialog.Option("Okay.", 255);
                        dialog.Avatar(84);
                        dialog.Send();
                        client.ActiveNpc = item.ID;
                        break;
                    }
                #endregion
                #region HeavenKeyScrap
                case 3002307:
                    {
                        if (client.Inventory.Contains(item.ID, 3))
                        {
                            client.Inventory.Remove(item.ID, 3);
                            client.Inventory.Add(item.ID + 1, 0, 1);
                            client.MessageBox("You~received~a~Heaven~Key!");
                        }
                        break;
                    }
                #endregion
                #region Magnolias
                case 729306:
                case 729307:
                case 729308:
                case 729309:
                case 729310:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            if (client.Entity.MapID != 1806)
                                break;
                            foreach (var npc in Kernel.Maps[client.Entity.MapID].Npcs.Values)
                            {
                                if (npc.UID != 9897 && Kernel.GetDistance(client.Entity.X, client.Entity.Y, npc.X, npc.Y) <= 7)
                                {
                                    client.ProgressBar = new Game.ProgressBar(client, Database.ConquerItemInformation.BaseInformations[item.ID].Name.Remove(Database.ConquerItemInformation.BaseInformations[item.ID].Name.Length - 4, 4), p =>
                                        {
                                            if (item.ID == 729306)
                                            {
                                                client.Entity.SubClasses.StudyPoints += 10;
                                                client.MessageBox("Congratulations!~You~received~A~Special~Item,~10~Study~Points~and~1~Chi~Token!");
                                            }
                                            if (item.ID == 729307)
                                            {
                                                client.Entity.SubClasses.StudyPoints += 20;
                                                client.MessageBox("Congratulations!~You~received~A~Special~Item,~20~Study~Points~and~1~Chi~Token!");
                                                client.IncreaseExperience(client.ExpBall, false);
                                            }
                                            if (item.ID == 729308)
                                            {
                                                client.Entity.SubClasses.StudyPoints += 50;
                                                client.MessageBox("Congratulations!~You~received~A~Special~Item,~50~Study~Points~and~1~Chi~Token!");
                                                client.IncreaseExperience(client.ExpBall * 2, false);
                                            }
                                            if (item.ID == 729309)
                                            {
                                                client.Entity.SubClasses.StudyPoints += 100;
                                                client.MessageBox("Congratulations!~You~received~A~Special~Item,~100~Study~Points~and~1~Chi~Token!");
                                                client.IncreaseExperience(client.ExpBall * 3, false);
                                            }
                                            if (item.ID == 729310)
                                            {
                                                client.Entity.SubClasses.StudyPoints += 300;
                                                client.MessageBox("Congratulations!~You~received~A~Special~Item,~300~Study~Points~and~1~Chi~Token!");
                                                client.IncreaseExperience(client.ExpBall * 5, false);
                                            }
                                            client.Inventory.Add(729304, 0, 1);
                                            if (Kernel.Rate(50))
                                            {
                                                client.Inventory.Add(721261, 0, 3);
                                            }
                                            _String str = new _String(true);
                                            str.UID = client.Entity.UID;
                                            str.TextsCount = 1;
                                            str.Type = _String.Effect;
                                            str.Texts.Add("end_task");
                                            client.SendScreen(str, true);
                                            _String str2 = new _String(true);
                                            str2.UID = client.Entity.UID;
                                            str2.TextsCount = 1;
                                            str2.Type = 10;
                                            str2.Texts.Add("angelwing");
                                            client.SendScreen(str2, true);
                                            if (!client.Quests.HasQuest(QuestID.Magnolias))
                                            {
                                                client.Quests.Accept(QuestID.Magnolias);
                                            }
                                            client.Quests.FinishQuest(QuestID.Magnolias);
                                            client.Activenes.SendSinglePacket(client, Activeness.Types.DailyQuestTask, client.Activenes.DailyQuestCompletedTimes(client));
                                            INpc NS = new NpcSpawn(true);
                                            NS.Name = "";
                                            NS.UID = (uint)Kernel.Random.Next(1, 2000000000);
                                            while (client.Map.Npcs.ContainsKey(NS.UID)) NS.UID = (uint)Kernel.Random.Next(1, 2000000000);
                                            NS.MapID = client.Entity.MapID;
                                            NS.X = (ushort)(npc.X + 1);
                                            NS.Y = (ushort)(npc.Y + 1);
                                            NS.Type = (Game.Enums.NpcType)2;
                                            NS.Mesh = 19360;
                                            _String str3 = new _String(true);

                                            str3.TextsCount = 1;
                                            str3.Type = 10;
                                            if (item.ID == 729306)
                                            {
                                                str3.Texts.Add("accession");
                                                NS.Name = "NormalMagnolia";
                                            }
                                            if (item.ID == 729307)
                                            {
                                                str3.Texts.Add("accession1");
                                                NS.Name = "RefinedMagnolia";
                                            }
                                            if (item.ID == 729308)
                                            {
                                                str3.Texts.Add("accession2");
                                                NS.Name = "UniqueMagnolia";
                                            }
                                            if (item.ID == 729309)
                                            {
                                                str3.Texts.Add("accession3");
                                                NS.Name = "EliteMagnolia";
                                            }
                                            if (item.ID == 729310)
                                            {
                                                str3.Texts.Add("accession4");
                                                NS.Name = "SuperMagnolia";
                                            }
                                            client.map.AddNpc(NS);
                                            client.Screen.Reload(null);
                                            foreach (var player in Kernel.GamePool.Values)
                                            {
                                                if (player.Entity.MapID == NS.MapID && Kernel.GetDistance(player.Entity.X, player.Entity.Y, NS.X, NS.Y) < 17)
                                                {
                                                    NS.SendSpawn(player);
                                                    str3.Send(player);
                                                    player.Screen.Reload(null);
                                                }
                                            }

                                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                                        }, Database.ConquerItemInformation.BaseInformations[item.ID].Name.Remove(Database.ConquerItemInformation.BaseInformations[item.ID].Name.Length - 4, 4), 1);
                                    break;
                                }
                            }
                            client.MessageBox("Your~seed~can`t~be~planted~here.~You`ll~need~to~find~a~Flower~Bed.");

                        }
                        else
                        {
                            client.Send(Constants.FullInventory);
                        }
                        break;
                    }
                #endregion
                #region ItemList
                case 729087:
                    {
                        Npcs dialog = new Npcs(client);
                        dialog.Text("\t\t\t\t\t\t\t\t\t\tItem List\n");
                        dialog.Text("\t\t\t،ھ،ھ،ھ،ھ،ھ،ھ،ھ،ھ،ھ،ھ،ھ،ھ،ھ،ھ،ھ،ھ،ھ،ھ،ھ،ھ،ھ،ھ،ھ\n");
                        dialog.Text("\t\t\tItem: [" + Database.ConquerItemInformation.BaseInformations[client.Entity.ETHAPItemID].Name + "]\n");
                        dialog.Text("\t\t\tAmount: [" + client.Entity.ETHAPItemAmount + "]\n");
                        dialog.Text("\t\t\tMonster: " + Npcs.GetMonsterNameFromItemID(client.Entity.ETHAPItemID) + "\n");
                        dialog.Text("\t\t\tLocation: " + Npcs.GetLocationFromItemID(client.Entity.ETHAPItemID) + "\n");
                        dialog.Text("\t\t\t،ھ،ھ،ھ،ھ،ھ،ھ،ھ،ھ،ھ،ھ،ھ،ھ،ھ،ھ،ھ،ھ،ھ،ھ،ھ،ھ،ھ،ھ،ھ\n");
                        dialog.Send();
                        break;
                    }
                #endregion
                #region ExorcismPack
                case 720948:
                case 729594:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            if (item.ID == 729594)
                            {
                                client.Entity.BoundCps += 50;
                                client.Inventory.Add(3004181, 0, 1);
                            }
                            client.Inventory.Remove(item, Enums.ItemUse.Remove);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region ChiToken
                case 729304:
                    {
                        if (client.Inventory.Contains(729304, 7))
                        {
                            client.ChampionPoints += 100;
                            client.IncreaseExperience(client.ExpBall * 3, false);
                            client.ChiPoints += 200;
                            client.Send(new Message("You received 180 minutes of EXP and 200 Chi Points!", Color.Red, Message.System));
                            client.Inventory.Remove(item.ID, 7);
                        }
                        else
                        {
                            client.MessageBox("You Need 7 ChiToken To Use!");
                        }
                        break;
                    }
                #endregion
                #endregion
                #region KingdomMissionItems
                case 3007108:
                    {
                        client.Entity.InnerPower.AddPotency(null, client, 400);
                        client.UnionExploits += 50;
                        if (client.Union != null)
                        {
                            client.Union.UnionFund += 100;
                        }
                        client.MessageBox("You got 50 War Exploits, 400 PotencyPoints and 100 Union Fund!");
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                case 3007109:
                    {
                        client.Entity.InnerPower.AddPotency(null, client, 600);
                        client.UnionExploits += 100;
                        client.ChampionPoints += 50;
                        if (client.Union != null)
                        {
                            client.Union.UnionFund += 160;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.MessageBox("You got 100 War Exploits, 600 PotencyPoints, 50 ChampionPoints and 160 Union Fund!");
                        break;
                    }
                case 3007110:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.UnionExploits += 150;
                        client.Entity.InnerPower.AddPotency(null, client, 1000);
                        client.ChampionPoints += 100;
                        if (client.Union != null)
                        {
                            client.Union.UnionFund += 360;
                        }
                        client.MessageBox("You got 150 War Exploits, 1000 PotencyPoints, 100 ChampionPoints and 360 Union Fund!");
                        break;
                    }
                #endregion
                #region Furniture
                case 721189:
                case 721182:
                case 721183:
                case 721184:
                case 721185:
                case 721186:
                case 721187:
                case 721188:
                case 726076:
                case 726077:
                case 726078:
                case 726079:
                case 721180:
                case 726080:
                case 726081:
                case 726082:
                case 726072:
                case 726083:
                case 721178:
                case 721179:
                case 726084:
                case 726085:
                case 726092:
                case 721177:
                    {
                        if (client.Entity.MapID == (ushort)client.Entity.UID)
                        {
                            INpc NS = new Network.GamePackets.NpcSpawn();
                            if (item.ID == 721189)
                            {
                                NS.UID = (uint)(client.Entity.UID + 1000000);
                            }
                            else
                            {
                                NS.UID = (uint)Kernel.Random.Next(int.MinValue, int.MaxValue);
                            }
                            while (client.map.Npcs.ContainsKey(NS.UID))
                            {
                                if (item.ID == 721189)
                                {
                                    client.MessageBox("You Already Spawned Your ItemBox!");
                                    return;
                                }
                                NS.UID = (uint)Kernel.Random.Next(int.MinValue, int.MaxValue);
                            }
                            NS.MapID = client.Entity.MapID;
                            NS.X = client.Entity.X;
                            NS.Y = client.Entity.Y;
                            if (item.ID == 721189)
                            {
                                NS.Type = (Game.Enums.NpcType)2;
                                NS.Mesh = 8200;
                                Nyx.Server.Database.MySqlCommand command = new Nyx.Server.Database.MySqlCommand(Database.MySqlCommandType.DELETE);
                                command.Delete("Furniture", "NameOwner", client.Entity.Name).And("lookface", 8200).Execute();
                            }
                            else
                            {
                                NS.Type = (Game.Enums.NpcType)26;
                            }
                            if (item.ID == 721177)
                                NS.Mesh = 10;
                            if (item.ID == 721178)
                                NS.Mesh = 21;
                            if (item.ID == 721179)
                                NS.Mesh = 37;
                            if (item.ID == 721180)
                                NS.Mesh = 41;
                            if (item.ID == 721181)
                                NS.Mesh = 51;
                            if (item.ID == 721182)
                                NS.Mesh = 61;
                            if (item.ID == 721183)
                                NS.Mesh = 71;
                            if (item.ID == 721184)
                                NS.Mesh = 81;
                            if (item.ID == 721185)
                                NS.Mesh = 91;
                            if (item.ID == 721186)
                                NS.Mesh = 101;
                            if (item.ID == 721187)
                                NS.Mesh = 111;
                            if (item.ID == 721188)
                                NS.Mesh = 121;
                            if (item.ID == 726085)
                                NS.Mesh = 857;
                            if (item.ID == 726084)
                                NS.Mesh = 847;
                            if (item.ID == 726083)
                                NS.Mesh = 837;
                            if (item.ID == 726082)
                                NS.Mesh = 827;
                            if (item.ID == 726081)
                                NS.Mesh = 817;
                            if (item.ID == 726080)
                                NS.Mesh = 807;
                            if (item.ID == 726079)
                                NS.Mesh = 797;
                            if (item.ID == 726078)
                                NS.Mesh = 787;
                            if (item.ID == 726077)
                                NS.Mesh = 777;
                            if (item.ID == 726076)
                                NS.Mesh = 767;
                            client.map.AddNpc(NS);
                            NpcSpawn NS2 = new Network.GamePackets.NpcSpawn();
                            NS2.UID = NS.UID;
                            NS2.MapID = NS.MapID;
                            NS2.X = NS.X;
                            NS2.Y = NS.Y;
                            NS2.Type = NS.Type;
                            NS2.Mesh = NS.Mesh;
                            Database.HouseTable.SaveFurniture(NS2.Encode(), client);
                            client.Inventory.Remove(item, Enums.ItemUse.Remove);
                            client.Screen.Reload(null);
                            if (item.ID == 721189)
                            {
                                if (!client.Warehouses.ContainsKey((Nyx.Server.Game.ConquerStructures.Warehouse.WarehouseID)(uint)(client.Entity.UID + 1000000)))
                                {
                                    client.Warehouses.Add((Nyx.Server.Game.ConquerStructures.Warehouse.WarehouseID)(uint)(client.Entity.UID + 1000000), new Game.ConquerStructures.Warehouse(client, (Nyx.Server.Game.ConquerStructures.Warehouse.WarehouseID)(uint)(client.Entity.UID + 1000000)));
                                }
                            }
                        }
                        break;
                    }
                #endregion
                #region ArenaPack
                case 723912:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.ConquerPoints += 50;
                        client.IncreaseExperience((ulong)(client.ExpBall / 3), false);
	        client.Send(new Message("You opened the pack, and received 20 minutes of EXP!", System.Drawing.Color.Red, Message.System));
                        break;
                    }
                #endregion

                #region The Banshee Spirit
                case 3004259:
                    {
                        if (client.Entity.MapID != (ushort)client.Entity.UID)
                        {
                            client.Send(new Message("The Banshee Spirit can only be used to summon the SnowBanshee at your own home.", Color.White, Message.System));
                            return;
                        }
                        Npcs dialog = new Npcs(client);
                        dialog.Text("Would you like to use the Banshee Spirit to summon a Purple Banshee?");
                        dialog.Option("Yes.", 1);
                        dialog.Option("No.", 255);
                        dialog.Avatar(92);
                        dialog.Send();
                        client.ActiveNpc = item.ID;
                        break;
                    }
                #endregion
                #region The Sword Soul
                case 720842:
                    {
                        if (client.Entity.MapID != (ushort)client.Entity.UID)
                        {
                            client.Send(new Message("The Sword Soul can only be used to summon the SwordMaster at your own home.", Color.White, Message.System));
                            return;
                        }
                        Npcs dialog = new Npcs(client);
                        dialog.Text("If the Sword Master is summoned, but not defeated, while you are upgrading your house, you will have to wait till the next server maintenance to summon it again!");
                        dialog.Text("~If the server is down or under maintenance while you are challenging the Sword Master, the system will judge it as failing. You have to challenge it again, tomorrow!");
                        dialog.Text("Please summon the Sword Master in the middle of your home rather than some narrow places or the edges of the house.");
                        dialog.Option("Confirm.", 1);
                        dialog.Option("Cancel.", 255);
                        dialog.Avatar(92);
                        dialog.Send();
                        client.ActiveNpc = item.ID;
                        break;
                    }
                #endregion
                #region PowerEXPBall
                case 723744:
                case 722057:
                    {
                        if (client.Entity.Level < 140)
                        {
                            client.IncreaseExperience(((Database.DataHolder.LevelExperience(client.Entity.Level) / 100) * 10), false);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        else
                            client.Send(new Message("You Already level 140, you do not need the EXP", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }
                #endregion
                #region Way2Heroes
                case 3005117: //Class1FortunePack  
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 5000;
                        break;
                    }
                case 3006151:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 2000;
                        break;
                    }
                case 3005118: //Class2FortunePack  
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 10000;
                        break;
                    }
                case 3005119: //Class3FortunePack  
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 20000;
                        break;
                    }
                case 3005123:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.SubClasses.StudyPoints += 200;
                        break;
                    }
                case 3005124:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.SubClasses.StudyPoints += 300;
                        break;
                    }
                case 3005120: //Class4FortunePack  
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 50000;
                        break;
                    }

                case 3005121: //Class5FortunePack  
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 100000;
                        break;
                    }
                case 3005122: //Class6FortunePack  
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 200000;
                        client.Entity.SubClasses.StudyPoints += 400;
                        break;
                    }

                case 3005126: //NormalChiPack  
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.ChiPoints += 500;
                        break;
                    }
                case 3001836: //NormalChiPack  
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.ChiPoints += 2500;
                        break;
                    }
                case 3005127: //MediumChiPack  
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.ChiPoints += 1000;
                        break;
                    }
                case 3005128: //SeniorChiPack  
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.ChiPoints += 2000;
                        break;
                    }
                case 3005129: // ExtremeChiPack  
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.ChiPoints += 3000;
                        break;
                    }
                case 3005130: //RefinedhGem(B)Pack  
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            Random R = new Random();
                            int Nr = R.Next(1, 10);
                            if (Nr == 1) client.Inventory.Add(700002, 0, 1);
                            if (Nr == 2) client.Inventory.Add(700013, 0, 1);
                            if (Nr == 3) client.Inventory.Add(700022, 0, 1);
                            if (Nr == 4) client.Inventory.Add(700032, 0, 1);
                            if (Nr == 5) client.Inventory.Add(700042, 0, 1);
                            if (Nr == 6) client.Inventory.Add(700052, 0, 1);
                            if (Nr == 7) client.Inventory.Add(700062, 0, 1);
                            if (Nr == 8) client.Inventory.Add(700072, 0, 1);
                            if (Nr == 9) client.Inventory.Add(700102, 0, 1);
                            if (Nr == 10) client.Inventory.Add(700122, 0, 1);
                        }
                        client.Send(new Message("Congratultions you have got RefinedGeM.", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }
                case 3005132: //SuperGem(B)Pack  
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            Random R = new Random();
                            int Nr = R.Next(1, 10);
                            if (Nr == 1) client.Inventory.Add(700003, 0, 1);
                            if (Nr == 2) client.Inventory.Add(700014, 0, 1);
                            if (Nr == 3) client.Inventory.Add(700023, 0, 1);
                            if (Nr == 4) client.Inventory.Add(700033, 0, 1);
                            if (Nr == 5) client.Inventory.Add(700043, 0, 1);
                            if (Nr == 6) client.Inventory.Add(700053, 0, 1);
                            if (Nr == 7) client.Inventory.Add(700063, 0, 1);
                            if (Nr == 8) client.Inventory.Add(700073, 0, 1);
                            if (Nr == 9) client.Inventory.Add(700103, 0, 1);
                            if (Nr == 10) client.Inventory.Add(700123, 0, 1);
                        }
                        client.Send(new Message("Congratultions you have got SuperGem.", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }
                case 3005133: //P4DragonSoulBag  
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            Random R = new Random();
                            int Nr = R.Next(1, 10);
                            if (Nr == 1) client.Inventory.Add(800803, 0, 1);
                            if (Nr == 2) client.Inventory.Add(800808, 0, 1);
                            if (Nr == 3) client.Inventory.Add(823052, 0, 1);
                            if (Nr == 4) client.Inventory.Add(823053, 0, 1);
                            if (Nr == 5) client.Inventory.Add(823054, 0, 1);
                            if (Nr == 6) client.Inventory.Add(800720, 0, 1);
                            if (Nr == 7) client.Inventory.Add(800253, 0, 1);

                        }
                        client.Send(new Message("Congratultions you have got P4DragonSoul.", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }
                case 3005300: //TurkeyRunPack  
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(200490, 0, 1);

                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                case 3005301:   //FancyAlpacaPack  
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(200499, 0, 1);

                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                case 3005134: //SweetLovePack  
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(422020, 0, 1);
                            client.Inventory.Add(755099, 0, 1);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                case 3005309: // 100PointsChiPack  
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.ChiPoints += 100;
                        client.Send(new Message("Congratultions you have got 100 Chi points.", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }


                case 3005310: //120PointsChiPack  
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.ChiPoints += 120;
                        client.Send(new Message("Congratultions you have got 120 Chi points.", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }


                case 3005311: //160PointsChiPack  
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.ChiPoints += 160;
                        client.Send(new Message("Congratultions you have got 160 Chi points.", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }


                case 3005312: //300PointsChiPack  
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.ChiPoints += 300;
                        break;
                    }

                case 3005313: //800PointsChiPack  
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.ChiPoints += 800;
                        break;
                    }
                case 3005314: //1000PointsChiPack  
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.ChiPoints += 1000;
                        break;
                    }
                case 3005331: //P7WeaponSoulPack  
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            Random R = new Random();
                            int Nr = R.Next(1, 8);
                            if (Nr == 1) client.Inventory.AddBound(800111, 0, 1);
                            if (Nr == 2) client.Inventory.AddBound(800142, 0, 1);
                            if (Nr == 3) client.Inventory.AddBound(800522, 0, 1);
                            if (Nr == 4) client.Inventory.AddBound(800618, 0, 1);
                            if (Nr == 5) client.Inventory.AddBound(800422, 0, 1);
                            if (Nr == 6) client.Inventory.AddBound(800725, 0, 1);
                            if (Nr == 7) client.Inventory.AddBound(800810, 0, 1);
                            if (Nr == 8) client.Inventory.AddBound(800811, 0, 1);
                        }
                        client.Send(new Message("Congratultions you have got P7WeaponSoul(B).", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }
                case 3005135: //P6DragonSoulBag  
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            Random R = new Random();
                            int Nr = R.Next(1, 7);
                            if (Nr == 1) client.Inventory.Add(800000, 0, 1);
                            if (Nr == 2) client.Inventory.Add(800017, 0, 1);
                            if (Nr == 3) client.Inventory.Add(801003, 0, 1);
                            if (Nr == 4) client.Inventory.Add(800809, 0, 1);
                            if (Nr == 5) client.Inventory.Add(800722, 0, 1);
                            if (Nr == 6) client.Inventory.Add(821032, 0, 1);
                            if (Nr == 7) client.Inventory.Add(821031, 0, 1);
                        }
                        client.Send(new Message("Congratultions you have got P6DragonSoul.", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }
                #endregion Way2Heroes
                #region Mount's Pack
                case 728326:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(200464, 0, 1);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                case 729111:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(200418, 0, 1);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                case 728397:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(200413, 0, 1);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                case 729197:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(200414, 0, 1);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                case 3004764:
                    {
                        client.Inventory.Add(200499, 0, 1);
                        client.Inventory.Remove(item, Enums.ItemUse.Remove);
                        break;
                    }
                case 3000254:
                    {
                        client.Inventory.Add(200407, 0, 1);
                        client.Inventory.Remove(item, Enums.ItemUse.Remove);
                        break;
                    }
                case 3000256:
                    {
                        client.Inventory.Add(200411, 0, 1);
                        client.Inventory.Remove(item, Enums.ItemUse.Remove);
                        break;
                    }
                case 3000257:
                    {
                        client.Inventory.Add(200412, 0, 1);
                        client.Inventory.Remove(item, Enums.ItemUse.Remove);
                        break;
                    }
                case 3000258:
                    {
                        client.Inventory.Add(200413, 0, 1);
                        client.Inventory.Remove(item, Enums.ItemUse.Remove);
                        break;
                    }
                case 3000259:
                    {
                        client.Inventory.Add(200414, 0, 1);
                        client.Inventory.Remove(item, Enums.ItemUse.Remove);
                        break;
                    }
                case 3000260:
                    {
                        client.Inventory.Add(200415, 0, 1);
                        client.Inventory.Remove(item, Enums.ItemUse.Remove);
                        break;
                    }
                case 3000261:
                    {
                        client.Inventory.Add(200426, 0, 1);
                        client.Inventory.Remove(item, Enums.ItemUse.Remove);
                        break;
                    }
                case 3000262:
                    {
                        client.Inventory.Add(200417, 0, 1);
                        client.Inventory.Remove(item, Enums.ItemUse.Remove);
                        break;
                    }
                case 3000263:
                    {
                        client.Inventory.Add(200418, 0, 1);
                        client.Inventory.Remove(item, Enums.ItemUse.Remove);
                        break;
                    }
                case 3000264:
                    {
                        client.Inventory.Add(200437, 0, 1);
                        client.Inventory.Remove(item, Enums.ItemUse.Remove);
                        break;
                    }
                case 3000265:
                    {
                        client.Inventory.Add(200420, 0, 1);
                        client.Inventory.Remove(item, Enums.ItemUse.Remove);
                        break;
                    }
                case 3000266:
                    {
                        client.Inventory.Add(200421, 0, 1);
                        client.Inventory.Remove(item, Enums.ItemUse.Remove);
                        break;
                    }
                case 3000267:
                    {
                        client.Inventory.Add(200427, 0, 1);
                        client.Inventory.Remove(item, Enums.ItemUse.Remove);
                        break;
                    }
                case 3000268:
                    {
                        client.Inventory.Add(200431, 0, 1);
                        client.Inventory.Remove(item, Enums.ItemUse.Remove);
                        break;
                    }
                case 3000269:
                    {
                        client.Inventory.Add(200438, 0, 1);
                        client.Inventory.Remove(item, Enums.ItemUse.Remove);
                        break;
                    }
                case 3000270:
                    {
                        client.Inventory.Add(200444, 0, 1);
                        client.Inventory.Remove(item, Enums.ItemUse.Remove);
                        break;
                    }
                case 3000271:
                    {
                        client.Inventory.Add(200442, 0, 1);
                        client.Inventory.Remove(item, Enums.ItemUse.Remove);
                        break;
                    }
                #endregion
                #region MeditationPack
                case 3001046:
                    {
                        if (client.Inventory.Count <= 36)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            if (Kernel.Rate(50))
                            {
                                client.Entity.SubClasses.StudyPoints += 3000;
                                client.MessageBox("You Got 3000 StudyPoints!");
                            }
                            else
                            {
                                client.ChiPoints += 1000;
                                client.MessageBox("You Got 1000 ChiPoints!");
                            }
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region SpeedArrowPack
                case 727000:
                    {
                        if (client.Inventory.Count <= 35)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1050002, 0, 1);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region ExpBall
                case 723700:
                    {
                        if (client.ExpBalls < 10)
                        {
                            if (client.Entity.Level < 137)
                            {
                                client.IncreaseExperience(client.ExpBall, false);
                                client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                                client.ExpBalls++;
                            }
                        }
                        else
                            client.Send(Constants.ExpBallsUsed);
                        break;
                    }
                #endregion
                #region MeteorTearScroll
                case 723711:
                    {
                        if (client.Inventory.Count <= 36)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1088002, 0, 5);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region StonePacks
                #region +1Stone Pack
                case 723712:
                    {
                        if (client.Inventory.Count <= 36)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(730001, 1, 5);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region +2Stone Pack
                case 729022:
                    {
                        if (client.Inventory.Count <= 30)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(730002, 2, 10);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region +3Stone Pack
                case 729023:
                    {
                        if (client.Inventory.Count <= 30)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(730003, 3, 10);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region +8StonePack
                case 721222:
                    {
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 38)
                            {
                                client.Inventory.Add(730008, 8, 1);//+8
                                client.Inventory.Add(730006, 6, 1); //+6
                                client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 2 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #endregion
                #region ExPBallGiftPack
                case 727464:
                    {
                        if (client.Inventory.Count <= 35)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(723700, 0, 5);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region MoneyBags
                #region MediumSilverPack
                case 3005836:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 50000000;
                        break;
                    }
                #endregion
                #region BigSilverPack
                case 3005837:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 100000000;
                        break;
                    }
                #endregion
                #region 500kMoneyBag
                case 728232:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 500000;
                        break;
                    }
                #endregion
                #region Class1MoneyBag
                case 723713:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 300000;
                        break;
                    }
                #endregion
                #region ProsperousMoneyBag
                case 3005665:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 10000000;
                        break;
                    }
                #endregion
                #region Class2MoneyBag
                case 723714:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 800000;
                        break;
                    }
                #endregion
                #region Class3MoneyBag
                case 723715:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 1200000;
                        break;
                    }
                #endregion
                #region Class4MoneyBag
                case 723716:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 1800000;
                        break;
                    }
                #endregion
                #region Class5MoneyBag
                case 723717:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 500;
                        break;
                    }
                #endregion
                #region InnerPower Poten
                case 727456:
                    {//EgYC
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.InnerPower.AddPotency(null, client, 500);
                        break;
                    }
                #endregion
                #region Class6MoneyBag
                case 723718:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 20000000;
                        break;
                    }
                #endregion
                #region Class7MoneyBag
                case 723719:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 25000000;
                        break;
                    }
                #endregion
                #region Class8MoneyBag
                case 723720:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 80000000;
                        break;
                    }
                #endregion
                #region Class9MoneyBag
                case 723721:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 100000000;
                        break;
                    }
                #endregion
                #region Class10MoneyBag
                case 723722:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 300000000;
                        break;
                    }
                #endregion
                #region TopMoneyBag
                case 723723:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 500000000;
                        break;
                    }
                #endregion
                #endregion
                #region DragonBallScroll
                case 720028:
                    {
                        if (client.Inventory.Count <= 31)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1088000, 0, 10);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region StudyPointsPacks
                #region ModestyBook
                case 723342:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.SubClasses.StudyPoints += 500;
                        client.Send(new Network.GamePackets.SubClassShowFull(true) { ID = 8, Study = client.Entity.SubClasses.StudyPoints, StudyReceive = 500 }.Encode());
                        Network.GamePackets._String str = new Network.GamePackets._String(true)
                        {
                            Type = 10,
                            UID = client.Entity.UID
                        };
                        str.Texts.Add("zf2-e300");
                        client.SendScreen(str.Encode(), true); }
                    break;

                #endregion
                #region DiligenceBook
                case 723340:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.SubClasses.StudyPoints += 5;
                        client.Send(new Network.GamePackets.SubClassShowFull(true) { ID = 8, Study = client.Entity.SubClasses.StudyPoints, StudyReceive = 5 }.Encode());
                        Network.GamePackets._String str = new Network.GamePackets._String(true)
                        {
                            Type = 10,
                            UID = client.Entity.UID
                        };
                        str.Texts.Add("zf2-e300");
                        client.SendScreen(str.Encode(), true);
                    }
                    break;

                #endregion
                #region EnduraceBook
                case 723341:
                    {
                        client.Entity.SubClasses.StudyPoints += 20;
                        client.Send(new Network.GamePackets.SubClassShowFull(true) { ID = 8, Study = client.Entity.SubClasses.StudyPoints, StudyReceive = 20 }.Encode());
                        Network.GamePackets._String str = new Network.GamePackets._String(true)
                        {
                            Type = 10,
                            UID = client.Entity.UID
                        };
                        str.Texts.Add("zf2-e300");
                        client.SendScreen(str.Encode(), true);
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                #endregion
                #region StudyBook[Arena]
                case 720774:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.SubClasses.StudyPoints += 50;
                        client.Send(new Network.GamePackets.SubClassShowFull(true) { ID = 8, Study = client.Entity.SubClasses.StudyPoints, StudyReceive = 50 }.Encode());
                        Network.GamePackets._String str = new Network.GamePackets._String(true)
                        {
                            Type = 10,
                            UID = client.Entity.UID
                        };
                        str.Texts.Add("zf2-e300");
                        client.SendScreen(str.Encode(), true);
                    }
                    break;
                #endregion
                #endregion
                #region MeteorScroll
                case 720027:
                    {
                        if (client.Inventory.Count <= 31)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1088001, 0, 10);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region DoubleExperiencePotion
                case 723017:
                    {
                        client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);
                        client.Entity.DoubleExperienceTime = 3600;
                        if (client.Entity.Level >= 90)
                            client.Entity.EnlightenPoints += 0.1;
                        break;
                    }
                #endregion
                #region NinjaAmulet
                case 723583:
                    {
                        client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);
                        switch (client.Entity.Body % 10)
                        {
                            case 2:
                            case 4:
                                client.Entity.Body--;
                                break;
                            case 1:
                            case 3:
                                client.Entity.Body++;
                                break;
                        }
                        break;
                    }
                #endregion
                #region FirstCredit
                case 3001266://FortunePack
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 100000;
                        break;
                    }
                case 3001268://EXPPotionPack
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Inventory.AddBound(723017, 0, 10);
                        break;
                    }
                case 3001270://Meteor Pack
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Inventory.AddBound(720027, 0, 10);
                        break;
                    }
                case 3001271://BigEXPBallPack
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Inventory.AddBound(720757, 0, 1);
                        break;
                    }
                case 3001275://SuperWeapon
                    {
                        #region Trojan
                        if (client.Entity.Class >= 10 && client.Entity.Class <= 15)
                        {
                            client.Inventory.AddBound(410009, 0, 1);
                            break;
                        }
                        #endregion
                        #region Ninja
                        if (client.Entity.Class >= 50 && client.Entity.Class <= 55)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.AddBound(601009, 0, 1);
                            break;
                        }
                        #endregion
                        #region Archer
                        if (client.Entity.Class >= 40 && client.Entity.Class <= 45)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.AddBound(500019, 0, 1);
                            break;
                        }
                        #endregion
                        #region Monk
                        if (client.Entity.Class >= 60 && client.Entity.Class <= 65)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.AddBound(610009, 0, 1);
                            break;
                        }
                        #endregion
                        #region Warrior
                        if (client.Entity.Class >= 20 && client.Entity.Class <= 25)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.AddBound(561009, 0, 1);
                            break;
                        }
                        #endregion
                        #region Fire|Water
                        if (client.Entity.Class >= 100 && client.Entity.Class <= 145)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.AddBound(421009, 0, 1);
                            break;
                        }
                        #endregion
                        #region Pirate
                        if (client.Entity.Class >= 70 && client.Entity.Class <= 75)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.AddBound(611009, 0, 1);
                            break;
                        }
                        #endregion
                        #region LeeLong
                        if (client.Entity.Class >= 80 && client.Entity.Class <= 85)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.AddBound(138000, 0, 1);
                            break;
                        }
                        #endregion
                        break;
                    }
                case 3001280://SuperArmor
                    {
                        #region Trojan
                        if (client.Entity.Class >= 10 && client.Entity.Class <= 15)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.AddBound(130009, 0, 1);
                            break;
                        }
                        #endregion
                        #region Ninja
                        if (client.Entity.Class >= 50 && client.Entity.Class <= 55)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.AddBound(135009, 0, 1);
                            break;
                        }
                        #endregion
                        #region Warrior
                        if (client.Entity.Class >= 20 && client.Entity.Class <= 25)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.AddBound(133009, 0, 1);
                            break;
                        }
                        #endregion
                        #region Monk
                        if (client.Entity.Class >= 60 && client.Entity.Class <= 65)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.AddBound(136009, 0, 1);
                            break;
                        }
                        #endregion
                        #region Archer
                        if (client.Entity.Class >= 40 && client.Entity.Class <= 45)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.AddBound(131009, 0, 1);
                            break;
                        }
                        #endregion
                        #region Fire|Water
                        if (client.Entity.Class >= 100 && client.Entity.Class <= 145)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.AddBound(134009, 0, 1);
                            break;
                        }
                        #endregion
                        #region Pirate
                        if (client.Entity.Class >= 70 && client.Entity.Class <= 75)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.AddBound(139009, 0, 1);
                            break;
                        }
                        #endregion
                        #region LeeLong
                        if (client.Entity.Class >= 80 && client.Entity.Class <= 85)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.AddBound(617000, 0, 1);
                            break;
                        }
                        #endregion
                        break;
                    }
                case 3001267://+3WhiteSteed
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        ConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        _item.Bound = true;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 3;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 150 | 255 << 8;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                case 3001282://PrayingStone(L)
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Inventory.AddBound(1200002, 0, 1);
                        break;
                    }
                case 3001289://PromotionGift
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Inventory.AddBound(721080, 0, 1);
                        client.Inventory.AddBound(721259, 0, 1);
                        client.Inventory.AddBound(1080001, 0, 1);
                        break;
                    }
                #endregion
                #region PrayingStones
                #region PrayingStone(S)
                case 1200000:
                    {
                        uint value = (uint)(3 * 24 * 60 * 60);
                        if (client.Entity.VIPLevel == 1)
                            value += value * (10 / 100);
                        if (client.Entity.VIPLevel == 2)
                            value += value * (15 / 100);
                        if (client.Entity.VIPLevel == 3)
                            value += value * (20 / 100);
                        if (client.Entity.VIPLevel == 4)
                            value += value * (30 / 100);
                        if (client.Entity.VIPLevel == 5)
                            value += value * (30 / 100);
                        if (client.Entity.VIPLevel == 6)
                            value += value * (30 / 100);
                        client.OnlineTrainingPoints += 10;
                        client.AddBless(value);
                        client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);
                        client.Entity.Update(Network.GamePackets.Update.OnlineTraining, client.OnlineTrainingPoints, false);
                        break;
                    }
                #endregion
                #region PrayingStone(M)
                case 1200001:
                case 720578:
                    {
                        uint value = (uint)(7 * 24 * 60 * 60);
                        if (client.Entity.VIPLevel == 1)
                            value += value * (10 / 100);
                        if (client.Entity.VIPLevel == 2)
                            value += value * (15 / 100);
                        if (client.Entity.VIPLevel == 3)
                            value += value * (20 / 100);
                        if (client.Entity.VIPLevel == 4)
                            value += value * (30 / 100);
                        if (client.Entity.VIPLevel == 5)
                            value += value * (30 / 100);
                        if (client.Entity.VIPLevel == 6)
                            value += value * (30 / 100);
                        client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);
                        client.AddBless(value);
                        client.Entity.Update(Network.GamePackets.Update.OnlineTraining, client.OnlineTrainingPoints, false);
                        break;
                    }
                #endregion
                #region PrayingStone(L)
                case 1200002:
                    {
                        uint value = (uint)(30 * 24 * 60 * 60);
                        if (client.Entity.VIPLevel == 1)
                            value += value * (10 / 100);
                        if (client.Entity.VIPLevel == 2)
                            value += value * (15 / 100);
                        if (client.Entity.VIPLevel == 3)
                            value += value * (20 / 100);
                        if (client.Entity.VIPLevel == 4)
                            value += value * (30 / 100);
                        if (client.Entity.VIPLevel == 5)
                            value += value * (30 / 100);
                        if (client.Entity.VIPLevel == 6)
                            value += value * (30 / 100);
                        client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);
                        client.AddBless(value);
                        client.Entity.Update(Network.GamePackets.Update.OnlineTraining, client.OnlineTrainingPoints, false);
                        break;
                    }
                #endregion
                #endregion
                #region PenitenceAmulet
                case 723727:
                case 720128:
                    {
                        if (client.Entity.PKPoints >= 30)
                        {
                            client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);
                            client.Entity.PKPoints -= 30;
                        }
                        break;
                    }
                #endregion
                #region DisguiseAmulet
                case 723724:
                    {
                        int disguise = Kernel.Random.Next(Database.DataHolder.Disguises.Length);
                        ushort selected = Database.DataHolder.Disguises[disguise];

                        client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);

                        bool wasTransformated = client.Entity.Transformed;
                        if (wasTransformated)
                        {
                            client.Entity.Hitpoints = client.Entity.MaxHitpoints;
                            client.Entity.TransformationID = 0;
                            client.Entity.TransformationStamp = Time32.Now;
                        }
                        ushort transformation = selected;
                        client.Entity.TransformationID = transformation;
                        client.Entity.TransformationStamp = Time32.Now;
                        client.Entity.TransformationTime = 110;
                        SpellUse spellUse = new SpellUse(true);
                        spellUse.Attacker = client.Entity.UID;
                        spellUse.SpellID = 1360;
                        spellUse.SpellLevel = 4;
                        spellUse.X = client.Entity.X;
                        spellUse.Y = client.Entity.Y;
                        spellUse.AddTarget(client.Entity, (uint)0, null);
                        client.Send(spellUse);
                        client.Entity.TransformationMaxHP = 3000;
                        double maxHP = client.Entity.MaxHitpoints;
                        double HP = client.Entity.Hitpoints;
                        double point = HP / maxHP;

                        client.Entity.Hitpoints = (uint)(client.Entity.TransformationMaxHP * point);
                        client.Entity.Update(Update.MaxHitpoints, client.Entity.TransformationMaxHP, false);
                        break;

                    }
                #endregion
                #region ToughDrillPack
                case 721223:
                    {
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 38)
                            {
                                client.Inventory.Add(1200005, 0, 1);
                                client.Inventory.Add(730003, 3, 1);
                                client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 2 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region StuffsPacks
                #region SuperWarrior`sArmorPack
                case 721224:
                    {
                        uint itemid = 131069;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Nyx.Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Nyx.Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Nyx.Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Nyx.Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperWarrior`sHelmetPack
                case 721225:
                    {
                        uint itemid = 111069;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Nyx.Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Nyx.Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Nyx.Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Nyx.Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperTrojan`sArmorPack
                case 721226:
                    {
                        uint itemid = 130069;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Nyx.Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Nyx.Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Nyx.Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Nyx.Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperTrojan`sCoronetPack
                case 721227:
                    {
                        uint itemid = 118069;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Nyx.Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Nyx.Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Nyx.Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Nyx.Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperNinja`sVestPack
                case 721228:
                    {
                        uint itemid = 135069;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Nyx.Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Nyx.Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Nyx.Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Nyx.Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region L30RefinedGearPack
                case 3000587:
                    {
                        if (client.Entity.Level >= 30)
                        {
                            if (client.Inventory.Count <= 33)
                            {
                                if (client.Entity.Class >= 10 && client.Entity.Class <= 15)
                                {
                                    client.Inventory.AddBound(118036, 0, 1);
                                    client.Inventory.AddBound(130026, 0, 1);
                                    client.Inventory.AddBound(410056, 0, 1);
                                }
                                if (client.Entity.Class >= 20 && client.Entity.Class <= 25)
                                {
                                    client.Inventory.AddBound(561056, 0, 1);
                                    client.Inventory.AddBound(141036, 0, 1);
                                    client.Inventory.AddBound(131026, 0, 1);
                                }
                                if (client.Entity.Class >= 40 && client.Entity.Class <= 45)
                                {
                                    client.Inventory.AddBound(500046, 0, 1);
                                    client.Inventory.AddBound(133026, 0, 1);
                                    client.Inventory.AddBound(142016, 0, 1);
                                }
                                if (client.Entity.Class >= 50 && client.Entity.Class <= 55)
                                {
                                    client.Inventory.AddBound(601056, 0, 1);
                                    client.Inventory.AddBound(123036, 0, 1);
                                    client.Inventory.AddBound(135026, 0, 1);
                                }
                                if (client.Entity.Class >= 60 && client.Entity.Class <= 65)
                                {
                                    client.Inventory.AddBound(610056, 0, 1);
                                    client.Inventory.AddBound(143036, 0, 1);
                                    client.Inventory.AddBound(136026, 0, 1);
                                }
                                if (client.Entity.Class >= 70 && client.Entity.Class <= 75)
                                {
                                    client.Inventory.AddBound(611056, 0, 1);
                                    client.Inventory.AddBound(139026, 0, 1);
                                    client.Inventory.AddBound(145036, 0, 1);
                                }
                                if (client.Entity.Class >= 80 && client.Entity.Class <= 85)
                                {
                                    client.Inventory.AddBound(617056, 0, 1);
                                    client.Inventory.AddBound(138026, 0, 1);
                                    client.Inventory.AddBound(148036, 0, 1);
                                }
                                if (client.Entity.Class >= 100 && client.Entity.Class <= 145)
                                {
                                    client.Inventory.AddBound(421066, 0, 1);
                                    client.Inventory.AddBound(114036, 0, 1);
                                    client.Inventory.AddBound(134026, 0, 1);
                                }
                                client.Inventory.AddBound(150056, 0, 1);
                                client.Inventory.AddBound(120046, 0, 1);
                                client.Inventory.AddBound(160056, 0, 1);
                                client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(Constants.FullInventory);
                            
                        }
                        break;
                    }
                #endregion
                #region L60UniqueGearPack
                case 3000588:
                    {
                        if (client.Entity.Level >= 60)
                        {
                            if (client.Inventory.Count <= 33)
                            {
                                if (client.Entity.Class >= 10 && client.Entity.Class <= 15)
                                {
                                    client.Inventory.AddBound(118067, 0, 1);
                                    client.Inventory.AddBound(130057, 0, 1);
                                    client.Inventory.AddBound(410077, 0, 1);
                                }
                                if (client.Entity.Class >= 20 && client.Entity.Class <= 25)
                                {
                                    client.Inventory.AddBound(561077, 0, 1);
                                    client.Inventory.AddBound(141067, 0, 1);
                                    client.Inventory.AddBound(131057, 0, 1);
                                }
                                if (client.Entity.Class >= 40 && client.Entity.Class <= 45)
                                {
                                    client.Inventory.AddBound(500107, 0, 1);
                                    client.Inventory.AddBound(133047, 0, 1);
                                    client.Inventory.AddBound(142037, 0, 1);
                                }
                                if (client.Entity.Class >= 50 && client.Entity.Class <= 55)
                                {
                                    client.Inventory.AddBound(601117, 0, 1);
                                    client.Inventory.AddBound(123067, 0, 1);
                                    client.Inventory.AddBound(135057, 0, 1);
                                }
                                if (client.Entity.Class >= 60 && client.Entity.Class <= 65)
                                {
                                    client.Inventory.AddBound(610117, 0, 1);
                                    client.Inventory.AddBound(143067, 0, 1);
                                    client.Inventory.AddBound(136067, 0, 1);
                                }
                                if (client.Entity.Class >= 70 && client.Entity.Class <= 75)
                                {
                                    client.Inventory.AddBound(611117, 0, 1);
                                    client.Inventory.AddBound(139057, 0, 1);
                                    client.Inventory.AddBound(145067, 0, 1);
                                }
                                if (client.Entity.Class >= 80 && client.Entity.Class <= 85)
                                {
                                    client.Inventory.AddBound(617117, 0, 1);
                                    client.Inventory.AddBound(138057, 0, 1);
                                    client.Inventory.AddBound(148067, 0, 1);
                                }
                                if (client.Entity.Class >= 100 && client.Entity.Class <= 145)
                                {
                                    client.Inventory.AddBound(421127, 0, 1);
                                    client.Inventory.AddBound(114067, 0, 1);
                                    client.Inventory.AddBound(134057, 0, 1);
                                }
                                client.Inventory.AddBound(150117, 0, 1);
                                client.Inventory.AddBound(120127, 0, 1);
                                client.Inventory.AddBound(160117, 0, 1);
                                client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(Constants.FullInventory);
                        }
                        break;
                    }
                #endregion
                #region L90EliteGearPack
                case 3000589:
                    {
                        if (client.Entity.Level >= 90)
                        {
                            if (client.Inventory.Count <= 33)
                            {
                                if (client.Entity.Class >= 10 && client.Entity.Class <= 15)
                                {
                                    client.Inventory.AddBound(118088, 0, 1);
                                    client.Inventory.AddBound(130078, 0, 1);
                                    client.Inventory.AddBound(410178, 0, 1);
                                }
                                if (client.Entity.Class >= 20 && client.Entity.Class <= 25)
                                {
                                    client.Inventory.AddBound(561118, 0, 1);
                                    client.Inventory.AddBound(141088, 0, 1);
                                    client.Inventory.AddBound(131078, 0, 1);
                                }
                                if (client.Entity.Class >= 40 && client.Entity.Class <= 45)
                                {
                                    client.Inventory.AddBound(500168, 0, 1);
                                    client.Inventory.AddBound(133078, 0, 1);
                                    client.Inventory.AddBound(142068, 0, 1);
                                }
                                if (client.Entity.Class >= 50 && client.Entity.Class <= 55)
                                {
                                    client.Inventory.AddBound(601178, 0, 1);
                                    client.Inventory.AddBound(123088, 0, 1);
                                    client.Inventory.AddBound(135078, 0, 1);
                                }
                                if (client.Entity.Class >= 60 && client.Entity.Class <= 65)
                                {
                                    client.Inventory.AddBound(610178, 0, 1);
                                    client.Inventory.AddBound(143088, 0, 1);
                                    client.Inventory.AddBound(136078, 0, 1);
                                }
                                if (client.Entity.Class >= 70 && client.Entity.Class <= 75)
                                {
                                    client.Inventory.AddBound(611178, 0, 1);
                                    client.Inventory.AddBound(139078, 0, 1);
                                    client.Inventory.AddBound(145088, 0, 1);
                                }
                                if (client.Entity.Class >= 80 && client.Entity.Class <= 85)
                                {
                                    client.Inventory.AddBound(617178, 0, 1);
                                    client.Inventory.AddBound(138078, 0, 1);
                                    client.Inventory.AddBound(148088, 0, 1);
                                }
                                if (client.Entity.Class >= 100 && client.Entity.Class <= 145)
                                {
                                    client.Inventory.AddBound(421178, 0, 1);
                                    client.Inventory.AddBound(114088, 0, 1);
                                    client.Inventory.AddBound(134078, 0, 1);
                                }
                                client.Inventory.AddBound(150178, 0, 1);
                                client.Inventory.AddBound(120188, 0, 1);
                                client.Inventory.AddBound(160178, 0, 1);
                                client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(Constants.FullInventory);
                        }
                        break;
                    }
                #endregion
                #region L100SuperGearPack
                case 3000590:
                    {
                        if (client.Entity.Level >= 110)
                        {
                            if (client.Inventory.Count <= 33)
                            {
                                if (client.Entity.Class >= 10 && client.Entity.Class <= 15)
                                {
                                    client.Inventory.AddBound(118099, 0, 1);
                                    client.Inventory.AddBound(130099, 0, 1);
                                    client.Inventory.AddBound(410219, 0, 1);
                                }
                                if (client.Entity.Class >= 20 && client.Entity.Class <= 25)
                                {
                                    client.Inventory.AddBound(561219, 0, 1);
                                    client.Inventory.AddBound(141099, 0, 1);
                                    client.Inventory.AddBound(131099, 0, 1);
                                }
                                if (client.Entity.Class >= 40 && client.Entity.Class <= 45)
                                {
                                    client.Inventory.AddBound(500209, 0, 1);
                                    client.Inventory.AddBound(133099, 0, 1);
                                    client.Inventory.AddBound(142089, 0, 1);
                                }
                                if (client.Entity.Class >= 50 && client.Entity.Class <= 55)
                                {
                                    client.Inventory.AddBound(601219, 0, 1);
                                    client.Inventory.AddBound(123099, 0, 1);
                                    client.Inventory.AddBound(135099, 0, 1);
                                }
                                if (client.Entity.Class >= 60 && client.Entity.Class <= 65)
                                {
                                    client.Inventory.AddBound(610219, 0, 1);
                                    client.Inventory.AddBound(143099, 0, 1);
                                    client.Inventory.AddBound(136099, 0, 1);
                                }
                                if (client.Entity.Class >= 70 && client.Entity.Class <= 75)
                                {
                                    client.Inventory.AddBound(611219, 0, 1);
                                    client.Inventory.AddBound(139099, 0, 1);
                                    client.Inventory.AddBound(145099, 0, 1);
                                }
                                if (client.Entity.Class >= 80 && client.Entity.Class <= 85)
                                {
                                    client.Inventory.AddBound(617219, 0, 1);
                                    client.Inventory.AddBound(138099, 0, 1);
                                    client.Inventory.AddBound(148099, 0, 1);
                                }
                                if (client.Entity.Class >= 100 && client.Entity.Class <= 145)
                                {
                                    client.Inventory.AddBound(421219, 0, 1);
                                    client.Inventory.AddBound(114099, 0, 1);
                                    client.Inventory.AddBound(134089, 0, 1);
                                }
                                client.Inventory.AddBound(150219, 0, 1);
                                client.Inventory.AddBound(120219, 0, 1);
                                client.Inventory.AddBound(160219, 0, 1);
                            }
                            else
                                client.Send(Constants.FullInventory);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        }
                        break;
                    }
                #endregion
                #region SuperNinja`sVeilPack
                case 721229:
                    {
                        uint itemid = 112069;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Nyx.Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Nyx.Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Nyx.Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Nyx.Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperTaoist`sRobePack
                case 721230:
                    {
                        uint itemid = 134069;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Nyx.Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Nyx.Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Nyx.Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Nyx.Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperTaoist`sCapPack
                case 721231:
                    {
                        uint itemid = 114069;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Nyx.Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Nyx.Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Nyx.Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Nyx.Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperArcher`sCoatPack
                case 721232:
                    {
                        uint itemid = 133049;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Nyx.Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Nyx.Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Nyx.Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Nyx.Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperArcher`sHatPack
                case 721233:
                    {
                        uint itemid = 113049;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Nyx.Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Nyx.Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Nyx.Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Nyx.Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperNecklacePack
                case 721234:
                    {
                        uint itemid = 120129;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Nyx.Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Nyx.Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Nyx.Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Nyx.Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperRingPack
                case 721235:
                    {
                        uint itemid = 150139;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Nyx.Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Nyx.Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Nyx.Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Nyx.Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperTaoist`sBagPack
                case 721236:
                    {
                        uint itemid = 121129;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Nyx.Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Nyx.Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Nyx.Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Nyx.Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperTaoist`sBraceletPack
                case 721237:
                    {
                        uint itemid = 152149;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Nyx.Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Nyx.Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Nyx.Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Nyx.Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperBootsPack
                case 721238:
                    {
                        uint itemid = 160139;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Nyx.Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Nyx.Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Nyx.Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Nyx.Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperBladePack
                case 721239:
                    {
                        uint itemid = 410139;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Nyx.Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Nyx.Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Nyx.Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Nyx.Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperSwordPack
                case 721240:
                    {
                        uint itemid = 420139;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Nyx.Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Nyx.Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Nyx.Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Nyx.Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperClubPack
                case 721241:
                    {
                        uint itemid = 480139;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Nyx.Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Nyx.Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Nyx.Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Nyx.Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperShieldPack
                case 721242:
                    {
                        uint itemid = 900049;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Nyx.Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Nyx.Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Nyx.Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Nyx.Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperKatanaPack
                case 721243:
                    {
                        uint itemid = 601139;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Nyx.Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Nyx.Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Nyx.Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Nyx.Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperBackswordPack
                case 721244:
                    {
                        uint itemid = 421139;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Nyx.Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Nyx.Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Nyx.Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Nyx.Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperBowPack
                case 721245:
                    {
                        uint itemid = 500129;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Nyx.Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Nyx.Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Nyx.Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Nyx.Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #endregion
                #region SkillBooks
                case 725000:
                    {
                        if (client.Entity.Spirit >= 20)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.AddSpell(new Spell(true) { ID = 1000 });
                        }
                        else
                        {
                            client.Send(new Message("You need atleast 20 spirit!", System.Drawing.Color.Tan, Message.TopLeft));
                        }
                        break;
                    }
                case 725001:
                    {
                        if (client.Entity.Spirit >= 80)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.AddSpell(new Spell(true) { ID = 1001 });
                        }
                        else
                        {
                            client.Send(new Message("You need atleast 80 spirit!", System.Drawing.Color.Tan, Message.TopLeft));
                        }
                        break;
                    }
                case 725002:
                    {
                        if (client.Entity.Class >= 140 && client.Entity.Class <= 145 && client.Entity.Level >= 90)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.AddSpell(new Spell(true) { ID = 1002 });
                        }
                        break;
                    }
                case 725003:
                    {
                        if (client.Entity.Spirit >= 30)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.AddSpell(new Spell(true) { ID = 1005 });
                        }
                        break;
                    }
                case 725004:
                    {
                        if (client.Entity.Class >= 130 && client.Entity.Class <= 135 || client.Entity.Class >= 140 && client.Entity.Class <= 145 && client.Entity.Level >= 15 || client.Entity.Class == 100 || client.Entity.Class == 101)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.AddSpell(new Spell(true) { ID = 1010 });
                        }
                        break;
                    }
                case 725005:
                    {
                        if (client.Entity.Level >= 40)
                        {
                            for (int i = 0; i < Database.SpellTable.SpellInformations[1045][0].WeaponSubtype.Count; i++)
                            {
                                var prof = Database.SpellTable.SpellInformations[1045][0].WeaponSubtype[i];
                                if (client.Proficiencies.ContainsKey(prof))
                                    if (client.Proficiencies[prof].Level >= 5)
                                    {
                                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                                        client.AddSpell(new Spell(true) { ID = 1045 });
                                        return;
                                    }
                            }
                            client.Send(new Message("You need level 5 at blade proficiency!", System.Drawing.Color.Tan, Message.TopLeft));


                        }
                        break;
                    }
                case 721158:
                    {
                        if (client.Entity.Level >= 40)
                        {
                            for (int i = 0; i < Database.SpellTable.SpellInformations[11005][0].WeaponSubtype.Count; i++)
                            {

                                var prof = Database.SpellTable.SpellInformations[11005][0].WeaponSubtype[i];
                                if (client.Proficiencies.ContainsKey(prof))
                                    if (client.Proficiencies[prof].Level >= 5)
                                    {
                                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                                        client.AddSpell(new Spell(true) { ID = 11005 });
                                        return;
                                    }

                            }
                            client.Send(new Message("You need level 5 at Spear proficiency!", System.Drawing.Color.Tan, Message.TopLeft));

                        }
                        break;
                    }
                case 721157:
                    {
                        if (client.Entity.Level >= 40)
                        {
                            for (int i = 0; i < Database.SpellTable.SpellInformations[11000][0].WeaponSubtype.Count; i++)
                            {

                                var prof = Database.SpellTable.SpellInformations[11000][0].WeaponSubtype[i];
                                if (client.Proficiencies.ContainsKey(prof))
                                    if (client.Proficiencies[prof].Level >= 5)
                                    {
                                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                                        client.AddSpell(new Spell(true) { ID = 11000 });
                                    }
                            }
                            client.Send(new Message("You need level 5 at Wand proficiency!", System.Drawing.Color.Tan, Message.TopLeft));

                        }
                        break;
                    }
                case 725010:
                    {
                        if (client.Entity.Level >= 40)
                        {
                            for (int i = 0; i < Database.SpellTable.SpellInformations[1046][0].WeaponSubtype.Count; i++)
                            {
                                var prof = Database.SpellTable.SpellInformations[1046][0].WeaponSubtype[i];

                                if (client.Proficiencies.ContainsKey(prof))
                                    if (client.Proficiencies[prof].Level >= 5)
                                    {
                                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                                        client.AddSpell(new Spell(true) { ID = 1046 });
                                        return;
                                    }
                            }

                            client.Send(new Message("You need level 5 at sword proficiency!", System.Drawing.Color.Tan, Message.TopLeft));

                        }
                        break;
                    }
                case 725011:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1250 });
                        break;
                    }
                case 725012:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1260 });
                        break;
                    }
                case 725013:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1290 });
                        break;
                    }
                case 725014:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1300 });
                        break;
                    }
                case 725015:
                    {
                        if (client.Entity.Class >= 130 && client.Entity.Class <= 135)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.AddSpell(new Spell(true) { ID = 1350 });
                        }
                        break;
                    }
                case 725016:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1360 });
                        break;
                    }
                case 725018:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1380 });
                        break;
                    }
                case 725019:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1385 });
                        break;
                    }
                case 725020:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1390 });
                        break;
                    }
                case 725021:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1395 });
                        break;
                    }
                case 725022:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1400 });
                        break;
                    }
                case 725023:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1405 });
                        break;
                    }
                case 725024:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1410 });
                        break;
                    }
                case 725025:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1320 });
                        break;
                    }
                case 725026:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 5010 });
                        break;
                    }
                case 725027:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 5020 });
                        break;
                    }
                case 725028:
                    {
                        if (client.Entity.Class >= 130 && client.Entity.Class <= 135 || client.Entity.Class >= 140 && client.Entity.Class <= 145)
                            client.AddSpell(new Spell(true) { ID = 5001 });
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                case 725029:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 5030 });
                        break;
                    }
                case 725030:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 5040 });
                        break;
                    }
                case 725031:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 5050 });
                        break;
                    }
                case 725040:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 7000 });
                        break;
                    }
                case 725041:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 7010 });
                        break;
                    }
                case 725042:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 7020 });
                        break;
                    }
                case 725043:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 7030 });
                        break;
                    }
                case 725044:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 7040 });
                        break;
                    }
                case 1060100:
                    {
                        if (client.Entity.Class >= 140 && client.Entity.Class <= 145 && client.Entity.Level >= 82)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.AddSpell(new Spell(true) { ID = 1160 });
                        }
                        break;
                    }
                case 1060101:
                    {
                        if (client.Entity.Class >= 140 && client.Entity.Class <= 145 && client.Entity.Level >= 84)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.AddSpell(new Spell(true) { ID = 1165 });
                        }
                        break;
                    }
                #endregion
                #region Refinery Packs
                #region Penetration - Bracelet
                case 723130:
                case 723131:
                case 723132:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 1260;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Penetration - Headgear
                case 723684:
                case 723685:
                case 723686:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 696;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Penetration - Bag
                case 724148:
                case 724149:
                case 724150:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 237;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Skill Critical Strike - Backsword
                case 723133:
                case 723134:
                case 723135:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 1287;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Skill Critical Strike - Bracelet
                case 724195:
                case 724196:
                case 724197:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 230;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Block - Shield
                case 723669:
                case 723670:
                case 723671:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 689;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Block - Headgear
                case 724145:
                case 724146:
                case 724147:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 208;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region CriticalStrike - Bow
                case 723651:
                case 723652:
                case 723653:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 749;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region CriticalStrike - 1 Handed weapons
                case 723654:
                case 723655:
                case 723656:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 751;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region CriticalStrike - 2 Handed weapons
                case 723657:
                case 723658:
                case 723659:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 753;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region CriticalStrike - 2 Ring
                case 724215:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 200;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                case 724193:
                case 724194:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 223;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Detoxication - Necklace
                case 723681:
                case 723682:
                case 723683:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 667;
                        if (newItemID == 724348 || newItemID == 724349)
                            newItemID += 150;

                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Detoxication - Headgear
                case 723672:
                case 723673:
                case 723674:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 811;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Detoxication - Bag
                case 723690:
                case 723691:
                case 723692:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 683;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Detoxication - Armor
                case 723675:
                case 723676:
                case 723677:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 813;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Detoxication - Boots
                case 723678:
                case 723679:
                case 723680:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 815;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Breakthrough - 1 Handed weapons
                case 723660:
                case 723661:
                case 723662:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 789;
                        if (newItemID == 724449)
                            newItemID = 724445;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Breakthrough - 2 Handed weapons
                case 723663:
                case 723664:
                case 723665:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 791;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Breakthrough - Bracelet
                case 724201:
                case 724202:
                case 724203:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 162;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Breakthrough - Bow
                case 723666:
                case 723667:
                case 723668:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 793;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Breakthrough - Ring
                case 724198:
                case 724199:
                case 724200:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 266;
                        if (newItemID >= 724466)
                            newItemID += 4;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Counteraction - Armor
                case 724142:
                case 724143:
                case 724144:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 331;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Counteraction - Bag
                case 724207:
                case 724208:
                case 724209:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 161;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Counteraction - Necklace
                case 724204:
                case 724205:
                case 724206:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 274;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Immunity - Boots
                case 724210:
                case 724211:
                case 724212:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 225;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Immunity - Armor
                case 724136:
                case 724137:
                case 724138:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 294;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Intensification - Headgear
                case 724139:
                case 724140:
                case 724141:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 301;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region M-Defense - Necklace
                case 725160:
                case 725161:
                case 725162:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 32;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region M-Defense - Bag
                case 725163:
                case 725164:
                case 725165:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 34;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region M-Defense - Bracelet
                case 725166:
                case 725167:
                case 725168:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 36;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region M-Defense - Ring
                case 725169:
                case 725170:
                case 725171:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 38;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                case 724130:
                case 724131:
                case 724132:
                case 724133:
                case 724134:
                case 724135:
                case 724151:
                case 724152:
                case 724153:
                case 724154:
                case 724155:
                case 724156:
                case 724157:
                case 724158:
                case 724159:
                case 724160:
                case 724161:
                case 724162:
                case 724163:
                case 724164:
                case 724165:
                case 724166:
                case 724167:
                case 724168:
                case 724169:
                case 724170:
                case 724171:
                case 724172:
                case 724173:
                case 724174:
                case 724175:
                case 724176:
                case 724177:
                case 724178:
                case 724179:
                case 724180:
                case 724181:
                case 724182:
                case 724183:
                case 724184:
                case 724185:
                case 724186:
                case 724190:
                case 724191:
                case 724192:
                case 725055:
                case 725056:
                case 725057:
                case 725058:
                GainRefineryItem(item, client); break;
                #endregion
            }
            client.Entity.UseItem = false;
            client.SpiltStack = false;
        }
        public static byte GetNextRefineryItem()
        {
            if (Kernel.Rate(10))
                return 2;
            else if (Kernel.Rate(30))
                return 1;
            return 0;
        }
        public static void GainRefineryItem(ConquerItem item, GameClient c)
        {
            Refinery.RefineryBoxes RefineryB = null;
            if (Kernel.DatabaseRefineryBoxes.TryGetValue(item.ID, out RefineryB))
            {
                List<Refinery.RefineryItem> Possible = new List<Refinery.RefineryItem>();
                foreach (Refinery.RefineryItem RefineryI in Kernel.DatabaseRefinery.Values)
                {
                    if (RefineryI.Type == RefineryB.Type)
                    {
                        if (RefineryI.Position == RefineryB.Position)
                        {
                            if (RefineryI.Untradable == RefineryB.Untradable)
                                Possible.Add(RefineryI);
                        }
                    }
                }
                if (Possible.Count > 0)
                {
                    Random Rand = new Random();
                    Int32 x = Rand.Next(1, Possible.Count);
                    Refinery.RefineryItem Refinery = Possible[x];

                    if (Refinery != null)
                    {
                        c.Inventory.Remove(item, Game.Enums.ItemUse.Remove);

                        ConquerItem i = new ConquerItem(true);
                        i.ID = Refinery.Identifier;
                        c.Inventory.Add(i, Game.Enums.ItemUse.CreateAndAdd);
                    }
                }
            }
        }
        static void PickupItem(FloorItem floorItem, Client.GameClient client)
        {
            if (client.Screen.TryGetFloorItem(floorItem.UID, out floorItem) && !client.Trade.InTrade)
            {

                if (client.Entity.X == floorItem.X && client.Entity.Y == floorItem.Y)
                {
                    uint owner = floorItem.Owner == null ? 0 : (uint)floorItem.Owner.Entity.UID;
                    if ((owner != 0 && owner == client.Entity.UID) || owner == 0 || Time32.Now >= floorItem.OnFloor.AddSeconds(Constants.FloorItemAvailableAfter))
                    {
                        goto Jump;
                    }
                    else if (client.Team != null)
                    {
                        if (client.Team.IsTeammate(owner))
                        {
                            if (client.Team.PickupItems && floorItem.ValueType == FloorItem.FloorValueType.Item)
                            {
                                if (floorItem.ItemID != 1088000 && floorItem.ItemID != 1088001)
                                {
                                    goto Jump;
                                }
                            }
                            else if (client.Team.PickupMoney && floorItem.ValueType != FloorItem.FloorValueType.Item)
                            {
                                goto Jump;
                            }
                        }
                    }
                    client.Send(Constants.FloorItemNotAvailable);
                    return;
                Jump:
                    FloorItem pickupAnimation = new FloorItem(true);
                    if (floorItem.ValueType != FloorItem.FloorValueType.Item)
                        client.Map.RemoveFloorItem(floorItem);
                    pickupAnimation.Type = 3;
                    pickupAnimation.UID = client.Entity.UID;
                    pickupAnimation.X = client.Entity.X;
                    pickupAnimation.Y = client.Entity.Y;
                    switch (floorItem.ValueType)
                    {
                        case FloorItem.FloorValueType.Item:
                            {
                                if (client.Inventory.Count <= 39)
                                {
                                    client.SendScreen(pickupAnimation, false);
                                    floorItem.Type = 2;
                                    client.RemoveScreenSpawn(floorItem, true);
                                    client.Map.RemoveFloorItem(floorItem);
                                    if (floorItem.Item.StackSize == 0) floorItem.Item.StackSize = 1;
                                    client.Send(Constants.PickupItem(floorItem.Item));
                                    foreach (Client.GameClient clients in Kernel.GamePool.Values)
                                    {
                                        clients.Screen.Remove(floorItem);
                                    }

                                    if (floorItem.Item.MobDropped)
                                    {
                                        client.Inventory.Add(floorItem.Item, Game.Enums.ItemUse.CreateAndAdd);
                                    }
                                    else
                                    {
                                        client.Inventory.Add(floorItem.Item, Game.Enums.ItemUse.Add);
                                        //Program.CommandsAI("@save");
                                    }
                                }
                                else
                                    client.Send(Constants.FullInventory);
                                break;
                            }
                        case FloorItem.FloorValueType.Money:
                            {
                                client.Send(Constants.PickupGold(floorItem.Value));
                                client.SendScreen(pickupAnimation, false);
                                client.Entity.Money += floorItem.Value;
                                floorItem.Type = 2;
                                client.RemoveScreenSpawn(floorItem, true);
                                break;
                            }
                        case FloorItem.FloorValueType.ConquerPoints:
                            {
                                client.Send(Constants.PickupConquerPoints(floorItem.Value));
                                client.SendScreen(pickupAnimation, false);
                                client.Entity.ConquerPoints += floorItem.Value;
                                floorItem.Type = 2;
                                client.RemoveScreenSpawn(floorItem, true);
                                break;
                            }
                    }
                    return;
                }
            }
        }
       public static void DropItem(ItemUsage itemUsage, Client.GameClient client)
        {
            if (client.Booth != null)
            {
                client.Send(new NpcReply(6, "Sorry you cant drop items while you in Booth") { OptionID = 0xff }.Encode());
                return;
            }
            if (client.Entity.MapID == (ushort)client.Entity.UID)
            {
                client.Send(new Message("Don't drop items in your house!", Message.TopLeft));
                return;
            }
            ConquerItem item = null;
            if (client.Inventory.TryGetItem(itemUsage.UID, out item))
            {
                if (item.ID == 0)
                    return;
                Database.ConquerItemInformation infos = new Database.ConquerItemInformation(item.ID, 0);
                if (item.Lock != 0 || item.Suspicious)
                    return;
                if (infos.BaseInformation.Type == Database.ConquerItemBaseInformation.ItemType.Dropable && !item.Bound)
                {
                    ushort X = client.Entity.X, Y = client.Entity.Y;
                    if (client.Map.SelectCoordonates(ref X, ref Y))
                    {
                        FloorItem floorItem = new FloorItem(true);
                        if (!item.Purification.Available)
                        {
                            floorItem.Item = item;
                            floorItem.ItemID = item.ID;
                            floorItem.ItemColor = item.Color;
                            floorItem.MapID = client.Map.ID;
                            floorItem.MapObjType = Game.MapObjectType.Item;
                            floorItem.X = X;
                            floorItem.Y = Y;
                            floorItem.Type = FloorItem.Drop;
                            floorItem.OnFloor = Time32.Now;
                            floorItem.UID = FloorItem.FloorUID.Next;
                        }
                        else
                        {
                            floorItem.Item = item;
                            floorItem.ItemID = item.Purification.PurificationItemID;
                            floorItem.MapID = client.Map.ID;
                            floorItem.MapObjType = Game.MapObjectType.Item;
                            floorItem.X = X;
                            floorItem.Y = Y;
                            floorItem.Type = FloorItem.Drop;
                            floorItem.OnFloor = Time32.Now;
                            floorItem.UID = FloorItem.FloorUID.Next;
                        }
                        while (client.Map.Npcs.ContainsKey(floorItem.UID))
                            floorItem.UID = FloorItem.FloorUID.Next;
                        client.SendScreenSpawn(floorItem, true);
                        client.Map.AddFloorItem(floorItem);
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);

                    }

                }
                else
                    client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
            }
        }
        public static uint MoneyItemID(uint value)
        {
            if (value < 100)
                return 1090000;
            else if (value < 399)
                return 1090010;
            else if (value < 5099)
                return 1090020;
            else if (value < 8099)
                return 1091000;
            else if (value < 12099)
                return 1091010;
            else
                return 1091020;
        }
       public static void HandleBuyFromNPC(ItemUsage itemUsage, Client.GameClient client)
        {
            if (client == null) return;
            if (itemUsage == null) return;
            if (client.Trade.InTrade) return;

            #region Honor shop
            if (itemUsage.UID == Database.HonorShop.UID)
            {
                var shop = Database.HonorShop.Shop;
                uint cost;
                if (shop.Items.TryGetValue(itemUsage.dwParam, out cost))
                {
                    if (client.Inventory.Count <= 39)
                    {
                        if (client.CurrentHonor >= cost)
                        {
                            ConquerItem newItem = new GamePackets.ConquerItem(true);
                            newItem.ID = itemUsage.dwParam;
                            Database.ConquerItemBaseInformation ibi;
                            if (Database.ConquerItemInformation.BaseInformations.TryGetValue(newItem.ID, out ibi))
                            {
                                if (ibi.Durability > 0)
                                {
                                    newItem.Durability = ibi.Durability;
                                    newItem.MaximDurability = ibi.Durability;
                                }
                            }
                            client.Inventory.Add(newItem, Game.Enums.ItemUse.CreateAndAdd);

                            client.CurrentHonor -= cost;
                            client.ArenaStatistic.Send(client);
                        }
                        else client.Send(new Message("You do not have enough Honor Points", Color.Red, Message.TopLeft));
                    }
                    else client.Send(new Message("You do not have enough space in your inventory", Color.Red, Message.TopLeft));
                }
                else client.Send(new Message("Can not find this item", Color.Red, Message.TopLeft));
                return;
            }
            #endregion
            #region Champion shop
            if (itemUsage.UID == Database.ChampionShop.UID)
            {
                ushort Amount = (ushort)(itemUsage.dwExtraInfo > 0 ? itemUsage.dwExtraInfo : 1);
                Database.ChampionShop.ChampionItem item;
                if (Database.ChampionShop.Shop.Items.TryGetValue(itemUsage.dwParam, out item))
                {

                    if (client.Inventory.Count <= 40 - Amount)
                    {
                        if (client.ChampionPoints >= (item.Price * Amount))
                        {
                            ConquerItem newItem = new GamePackets.ConquerItem(true);
                            newItem.ID = itemUsage.dwParam;
                            Database.ConquerItemBaseInformation ibi;
                            if (Database.ConquerItemInformation.BaseInformations.TryGetValue(newItem.ID, out ibi))
                            {
                                if (ibi.Durability > 0)
                                {
                                    newItem.Durability = ibi.Durability;
                                    newItem.MaximDurability = ibi.Durability;
                                }
                            }
                            if (ibi != null)
                                if (ibi.Name.Contains("Stone"))
                                    newItem.Plus = (byte)(newItem.ID % 10);
                            newItem.Bound = true;
                            client.Inventory.Add(newItem.ID, newItem.Plus, Amount, newItem.Bound);
                            client.ChampionPoints -= (item.Price * Amount);
                            client.CP.Send(client);
                        }
                        else client.Send(new Message("You do not have enough Champion Points", Color.Red, Message.TopLeft));
                    }
                    else client.Send(new Message("You do not have enough space in your inventory", Color.Red, Message.TopLeft));

                }
                else client.Send(new Message("Can not find this item", Color.Red, Message.TopLeft));
                return;
            }
            #endregion
            #region Race point shop
            if (itemUsage.UID == Database.RacePointShop.UID)
            {
                Database.RacePointShop.RacePointItem item;
                if (Database.RacePointShop.Shop.Items.TryGetValue(itemUsage.dwParam, out item))
                {
                    if (client.Inventory.Count <= 39)
                    {
                        if (client.RacePoints >= item.Price)
                        {
                            ConquerItem newItem = new GamePackets.ConquerItem(true);
                            newItem.ID = itemUsage.dwParam;
                            Database.ConquerItemBaseInformation ibi;
                            if (Database.ConquerItemInformation.BaseInformations.TryGetValue(newItem.ID, out ibi))
                            {
                                if (ibi.Durability > 0)
                                {
                                    newItem.Durability = ibi.Durability;
                                    newItem.MaximDurability = ibi.Durability;
                                }
                            }
                            client.Inventory.Add(newItem, Game.Enums.ItemUse.CreateAndAdd);

                            client.RacePoints -= item.Price;
                        }
                        else client.Send(new Message("You do not have enough Champion Points", Color.Red, Message.TopLeft));
                    }
                    else client.Send(new Message("You do not have enough space in your inventory", Color.Red, Message.TopLeft));
                }
                else client.Send(new Message("Can not find this item", Color.Red, Message.TopLeft));
                return;
            }
            #endregion

            Interfaces.INpc npc = null;
            if (client.Map.Npcs.TryGetValue(itemUsage.UID, out npc) || itemUsage.UID == 2888)
            {
                ConquerItem _ExistingItem;
                Database.ConquerItemInformation iteminfo = new Database.ConquerItemInformation(itemUsage.dwParam, 0);
                if (client.Inventory.Count == 40 && !client.Inventory.Contains(iteminfo.BaseInformation.ID, iteminfo.BaseInformation.StackSize, out _ExistingItem))
                    return;
                if (itemUsage.UID != 2888)
                    if (Kernel.GetDistance(client.Entity.X, client.Entity.Y, npc.X, npc.Y) > 17)
                        return;
                Database.ShopFile.Shop shop = new Database.ShopFile.Shop();
                if (!Database.ShopFile.Shops.TryGetValue(itemUsage.UID, out shop))
                    if (!Database.EShopFile.Shops.TryGetValue(itemUsage.UID, out shop))
                        shop = null;
                if (shop != null && shop.UID != 0)
                {
                    if (!shop.Items.Contains(itemUsage.dwParam))
                    {
                        NpcReply npcx = new NpcReply(6, "Error! Cannot puchase/buy this item  it has been  reported to [GM].")
                        {
                            OptionID = 255
                        };
                        client.Send(npcx.Encode());
                        return;
                    }
                    uint Amount = itemUsage.dwExtraInfo > 0 ? itemUsage.dwExtraInfo : 1;
                    ConquerItem item = new ConquerItem(true);
                    switch (shop.MoneyType)
                    {
                        case Nyx.Server.Database.ShopFile.MoneyType.Gold:
                            {
                                if (iteminfo.BaseInformation.GoldWorth * Amount > client.Entity.Money)
                                    return;
                                if (client.Entity.Money - (iteminfo.BaseInformation.GoldWorth * Amount) > client.Entity.Money)
                                    return;
                                item.ID = itemUsage.dwParam;
                                item.Durability = item.MaximDurability = iteminfo.BaseInformation.Durability;
                                item.Color = (Nyx.Server.Game.Enums.Color)3;

                                uint NewAmount = itemUsage.dwExtraInfo > 0 ? itemUsage.dwExtraInfo : 1;
                                while (NewAmount > 0)
                                {
                                    if (iteminfo.BaseInformation.StackSize == 0)
                                    {
                                        item = new ConquerItem(true);
                                        item.ID = itemUsage.dwParam;
                                        item.Durability = item.MaximDurability = iteminfo.BaseInformation.Durability;
                                        item.Color = (Nyx.Server.Game.Enums.Color)3;
                                        client.Inventory.Add(item, Game.Enums.ItemUse.CreateAndAdd);
                                        item.MaxStackSize = item.StackSize = 1;
                                        NewAmount--;
                                    }
                                    else
                                    {
                                        if (client.Inventory.GetStackContainer(iteminfo.BaseInformation.ID, iteminfo.BaseInformation.StackSize, 1, out _ExistingItem))
                                        {
                                            _ExistingItem.StackSize++;

                                            Database.ConquerItemTable.UpdateStack(_ExistingItem);
                                            _ExistingItem.Mode = Game.Enums.ItemMode.Update;
                                            _ExistingItem.Send(client);
                                            NewAmount -= 1;
                                        }
                                        else
                                        {
                                            item = new ConquerItem(true);
                                            item.ID = itemUsage.dwParam;
                                            item.Durability = item.MaximDurability = iteminfo.BaseInformation.Durability;
                                            item.Color = (Nyx.Server.Game.Enums.Color)3;
                                            item.MaxStackSize = iteminfo.BaseInformation.StackSize;
                                            item.StackSize = 1;
                                            if (NewAmount >= item.MaxStackSize)
                                            {
                                                item.StackSize = item.MaxStackSize;
                                                NewAmount -= item.StackSize;
                                            }
                                            else
                                            {
                                                item.StackSize = (ushort)NewAmount;
                                                NewAmount = 0;
                                            }
                                            client.Inventory.Add(item, Game.Enums.ItemUse.CreateAndAdd);
                                            Database.ConquerItemTable.UpdateStack(item);
                                        }
                                    }
                                }
                                client.Entity.Money -= (iteminfo.BaseInformation.GoldWorth * Amount);
                                break;
                            }
                        case Nyx.Server.Database.ShopFile.MoneyType.ConquerPoints:
                            {
                                if (itemUsage.dwExtraInfo3 == 2)
                                {
                                    if (iteminfo.BaseInformation.ConquerPointsWorth * Amount > client.Entity.BoundCps)
                                        return;
                                    if (client.Entity.BoundCps - (iteminfo.BaseInformation.ConquerPointsWorth * Amount) > client.Entity.BoundCps)
                                        return;
                                    item.ID = itemUsage.dwParam;
                                    if (item.ID % 730000 <= 12)
                                        item.Plus = (Byte)(item.ID % 730000);
                                    item.Color = (Nyx.Server.Game.Enums.Color)Kernel.Random.Next(4, 8);
                                    item.Durability = item.MaximDurability = iteminfo.BaseInformation.Durability;
                                    uint NewAmount = itemUsage.dwExtraInfo > 0 ? itemUsage.dwExtraInfo : 1;
                                    while (NewAmount > 0)
                                    {
                                        if (iteminfo.BaseInformation.StackSize == 0)
                                        {
                                            if ((itemUsage.dwParam % 730000) <= 12)
                                            {
                                                ConquerItem newItem = new GamePackets.ConquerItem(true);
                                                newItem.ID = itemUsage.dwParam;
                                                newItem.Plus = (Byte)(newItem.ID % 730000);
                                                newItem.Bound = true;
                                                client.Inventory.Add(newItem, Game.Enums.ItemUse.CreateAndAdd);
                                            }
                                            else
                                            {
                                                item = new ConquerItem(true);
                                                item.ID = itemUsage.dwParam;
                                                item.Durability = item.MaximDurability = iteminfo.BaseInformation.Durability;
                                                item.Color = (Nyx.Server.Game.Enums.Color)3;
                                                item.Bound = true;
                                                client.Inventory.Add(item, Game.Enums.ItemUse.CreateAndAdd);
                                            }
                                            item.MaxStackSize = item.StackSize = 1;
                                            NewAmount--;
                                        }
                                        else
                                        {
                                            if (client.Inventory.GetStackContainer(iteminfo.BaseInformation.ID, iteminfo.BaseInformation.StackSize, 1, out _ExistingItem))
                                            {
                                                _ExistingItem.StackSize++;

                                                Database.ConquerItemTable.UpdateStack(_ExistingItem);
                                                _ExistingItem.Mode = Game.Enums.ItemMode.Update;
                                                _ExistingItem.Send(client);
                                                NewAmount -= 1;
                                            }
                                            else
                                            {
                                                item = new ConquerItem(true);
                                                item.ID = itemUsage.dwParam;
                                                item.Durability = item.MaximDurability = iteminfo.BaseInformation.Durability;
                                                item.Color = (Nyx.Server.Game.Enums.Color)3;
                                                item.MaxStackSize = iteminfo.BaseInformation.StackSize;
                                                item.StackSize = 1;
                                                item.MaxStackSize = item.StackSize = 1;
                                                if (NewAmount >= item.MaxStackSize)
                                                {
                                                    item.StackSize = item.MaxStackSize;
                                                    NewAmount -= item.StackSize;
                                                }
                                                else
                                                {
                                                    item.StackSize = (ushort)NewAmount;
                                                    NewAmount = 0;
                                                }
                                                client.Inventory.Add(item, Game.Enums.ItemUse.CreateAndAdd);
                                                Database.ConquerItemTable.UpdateStack(item);
                                            }
                                        }
                                    }
                                    client.Entity.BoundCps -= (iteminfo.BaseInformation.ConquerPointsWorth * Amount);
                                    break;
                                }
                                else
                                {
                                    if (iteminfo.BaseInformation.ConquerPointsWorth * Amount > client.Entity.ConquerPoints)
                                        return;
                                    if (client.Entity.ConquerPoints - (iteminfo.BaseInformation.ConquerPointsWorth * Amount) > client.Entity.ConquerPoints)
                                        return;
                                    item.ID = itemUsage.dwParam;
                                    if (item.ID % 730000 <= 12)
                                        item.Plus = (Byte)(item.ID % 730000);
                                    item.Color = (Nyx.Server.Game.Enums.Color)Kernel.Random.Next(4, 8);
                                    item.Durability = item.MaximDurability = iteminfo.BaseInformation.Durability;
                                    uint NewAmount = itemUsage.dwExtraInfo > 0 ? itemUsage.dwExtraInfo : 1;
                                    while (NewAmount > 0)
                                    {
                                        if (iteminfo.BaseInformation.StackSize == 0)
                                        {
                                            if ((itemUsage.dwParam % 730000) <= 12)
                                            {
                                                ConquerItem newItem = new GamePackets.ConquerItem(true);
                                                newItem.ID = itemUsage.dwParam;
                                                newItem.Plus = (Byte)(newItem.ID % 730000);
                                                client.Inventory.Add(newItem, Game.Enums.ItemUse.CreateAndAdd);
                                            }
                                            else
                                            {
                                                item = new ConquerItem(true);
                                                item.ID = itemUsage.dwParam;
                                                item.Durability = item.MaximDurability = iteminfo.BaseInformation.Durability;
                                                item.Color = (Nyx.Server.Game.Enums.Color)3;
                                                client.Inventory.Add(item, Game.Enums.ItemUse.CreateAndAdd);
                                            }
                                            item.MaxStackSize = item.StackSize = 1;
                                            NewAmount--;
                                        }
                                        else
                                        {
                                            if (client.Inventory.GetStackContainer(iteminfo.BaseInformation.ID, iteminfo.BaseInformation.StackSize, 1, out _ExistingItem))
                                            {
                                                _ExistingItem.StackSize++;

                                                Database.ConquerItemTable.UpdateStack(_ExistingItem);
                                                _ExistingItem.Mode = Game.Enums.ItemMode.Update;
                                                _ExistingItem.Send(client);
                                                NewAmount -= 1;
                                            }
                                            else
                                            {
                                                item = new ConquerItem(true);
                                                item.ID = itemUsage.dwParam;
                                                item.Durability = item.MaximDurability = iteminfo.BaseInformation.Durability;
                                                item.Color = (Nyx.Server.Game.Enums.Color)3;
                                                item.MaxStackSize = iteminfo.BaseInformation.StackSize;
                                                item.StackSize = 1;
                                                if (NewAmount >= item.MaxStackSize)
                                                {
                                                    item.StackSize = item.MaxStackSize;
                                                    NewAmount -= item.StackSize;
                                                }
                                                else
                                                {
                                                    item.StackSize = (ushort)NewAmount;
                                                    NewAmount = 0;
                                                }
                                                client.Inventory.Add(item, Game.Enums.ItemUse.CreateAndAdd);
                                                Database.ConquerItemTable.UpdateStack(item);
                                            }
                                        }
                                    }
                                    client.Entity.ConquerPoints -= (iteminfo.BaseInformation.ConquerPointsWorth * Amount);
                                    break;
                                }

                            }
                    }
                }
            }
        }
        public static void HandleSellToNPC(ItemUsage itemUsage, Client.GameClient client)
        {
            Interfaces.INpc npc = null;
            if (client.Map.Npcs.TryGetValue(itemUsage.UID, out npc))
            {
                if (Kernel.GetDistance(client.Entity.X, client.Entity.Y, npc.X, npc.Y) > 17)
                    return;
                ConquerItem item = null;
                if (client.Inventory.TryGetItem(itemUsage.dwParam, out item))
                {
                    if (item.Lock != 0 || item.Suspicious)
                        return;
                    uint Price = new Database.ConquerItemInformation(item.ID, 0).BaseInformation.GoldWorth;
                    Price = Price / 3;
                    if (item.Durability > 0 && item.Durability < item.MaximDurability)
                        Price = (Price * item.Durability) / item.MaximDurability;

                    if (item.Durability > 0 && item.Durability <= item.MaximDurability)
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += Price;
                    }
                    else
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                    }
                }
            }
        }
        public static void HandleVIPRepair(ItemUsage itemUsage, Client.GameClient client)
        {
            foreach (var item in client.Equipment.Objects)
            {
                if (item != null)
                {
                    if (item.Durability != 0 && item.Durability != item.MaximDurability)
                    {
                        if (item.Suspicious)
                            return;
                        if (IsArrow(item.ID))
                            return;
                        var info = new Database.ConquerItemInformation(item.ID, 0).BaseInformation;
                        if (item.Durability > 0 && item.Durability < info.Durability)
                        {
                            uint Price = info.GoldWorth;
                            byte Quality = (byte)(item.ID % 10);
                            double QualityMultipier = 0;

                            switch (Quality)
                            {
                                case 9: QualityMultipier = 1.125; break;
                                case 8: QualityMultipier = 0.975; break;
                                case 7: QualityMultipier = 0.9; break;
                                case 6: QualityMultipier = 0.825; break;
                                default: QualityMultipier = 0.75; break;
                            }

                            int nRepairCost = 0;
                            if (Price > 0)
                                nRepairCost = (int)Math.Ceiling((Price * (info.Durability - item.Durability) / info.Durability) * QualityMultipier);

                            nRepairCost = Math.Max(1, nRepairCost);
                            if (client.Entity.Money >= nRepairCost)
                            {
                                client.Entity.Money -= (uint)nRepairCost;
                                item.Durability = item.MaximDurability = info.Durability;
                                item.Mode = Game.Enums.ItemMode.Update;
                                item.Send(client);
                            }
                            else
                            {
                                client.Send(new NpcReply(NpcReply.MessageBox, "You did not have enough money to fix your items!"));
                                break;
                            }
                        }
                    }
                }
            }
        }
        public static void HandleRepair(ItemUsage itemUsage, Client.GameClient client)
        {
            ConquerItem item = null;
            if (client.Inventory.TryGetItem(itemUsage.UID, out item))
            {
                if (item.Suspicious)
                    return;
                if (IsArrow(item.ID))
                    return;
                if (item.Durability > 0 && item.Durability < item.MaximDurability)
                {
                    uint Price = new Database.ConquerItemInformation(item.ID, 0).BaseInformation.GoldWorth;
                    byte Quality = (byte)(item.ID % 10);
                    double QualityMultipier = 0;

                    switch (Quality)
                    {
                        case 9: QualityMultipier = 1.125; break;
                        case 8: QualityMultipier = 0.975; break;
                        case 7: QualityMultipier = 0.9; break;
                        case 6: QualityMultipier = 0.825; break;
                        default: QualityMultipier = 0.75; break;
                    }

                    int nRepairCost = 0;
                    if (Price > 0)
                        nRepairCost = (int)Math.Ceiling((Price * (item.MaximDurability - item.Durability) / item.MaximDurability) * QualityMultipier);

                    nRepairCost = Math.Max(1, nRepairCost);
                    if (client.Entity.Money >= nRepairCost)
                    {
                        client.Entity.Money -= (uint)nRepairCost;
                        item.Durability = item.MaximDurability;
                        item.Mode = Game.Enums.ItemMode.Update;
                        item.Send(client);
                        Database.ConquerItemTable.UpdateDurabilityItem(item);
                    }
                }
                else if (item.Durability == 0)
                {
                    if (client.Inventory.Remove(1088001, 5))
                    {
                        item.Durability = item.MaximDurability;
                        item.Mode = Game.Enums.ItemMode.Update;
                        item.Send(client);
                        Database.ConquerItemTable.UpdateDurabilityItem(item);
                    }
                }
            }
        }
        public static void UpgradeItem(ItemUsage itemUsage, Client.GameClient client)
        {
            ConquerItem item = null;
            if (client.Inventory.TryGetItem(itemUsage.UID, out item))
            {
                if (IsArrow(item.ID))
                    return;
                ConquerItem upgrade = null;
                if (client.Inventory.TryGetItem(itemUsage.dwParam, out upgrade))
                {
                    Database.ConquerItemInformation infos = new Nyx.Server.Database.ConquerItemInformation(item.ID, item.Plus);
                    switch (upgrade.ID)
                    {
                        case 1088000:
                            {
                                if (item.ID % 10 == (byte)Game.Enums.ItemQuality.Super)
                                    break;
                                byte chance = (byte)(70 - ((infos.BaseInformation.Level - (infos.BaseInformation.Level > 100 ? 30 : 0)) / (10 - item.ID % 10)));
                                if (item.Durability < item.MaximDurability)
                                    break;
                                if (Kernel.Rate(chance))
                                {
                                    switch ((Game.Enums.ItemQuality)(item.ID % 10))
                                    {
                                        case Game.Enums.ItemQuality.Normal:
                                        case Game.Enums.ItemQuality.NormalV1:
                                        case Game.Enums.ItemQuality.NormalV2:
                                        case Game.Enums.ItemQuality.NormalV3: item.ID = (item.ID - (item.ID % 10)) + (byte)Game.Enums.ItemQuality.Refined; break;
                                        default: item.ID++; break;
                                    }
                                    Database.ConquerItemTable.UpdateItemID(item);
                                    item.Mode = Nyx.Server.Game.Enums.ItemMode.Update;
                                    item.Send(client);
                                }
                                else
                                {
                                    item.Durability = (ushort)(item.Durability / 2);
                                    Database.ConquerItemTable.UpdateDurabilityItem(item);
                                    item.Mode = Nyx.Server.Game.Enums.ItemMode.Update;
                                    item.Send(client);
                                }
                                item = ItemSocket(item, 1);
                                client.Inventory.Remove(upgrade, Nyx.Server.Game.Enums.ItemUse.Remove);
                                break;
                            }
                        case 1088001:
                            {
                                if (infos.BaseInformation.Level == ItemMaxLevel(ItemPosition(infos.BaseInformation.ID)))
                                    break;
                                byte chance = 70;
                                chance -= (byte)(infos.BaseInformation.Level / 10 * 3);
                                chance -= (byte)(((item.ID % 10) + 1) * 3);
                                chance = 70;
                                if (item.Durability < item.MaximDurability)
                                    break;
                                uint newid = infos.CalculateUplevel();
                                if (newid != 0 && newid != item.ID)
                                {
                                    if (Kernel.Rate(chance))
                                    {
                                        item.ID = newid;
                                        infos = new Nyx.Server.Database.ConquerItemInformation(item.ID, item.Plus);
                                        item.Durability = item.MaximDurability = infos.BaseInformation.Durability;
                                        Database.ConquerItemTable.UpdateItemID(item);
                                        Database.ConquerItemTable.UpdateDurabilityItem(item);
                                        item.Mode = Nyx.Server.Game.Enums.ItemMode.Update;
                                        item.Send(client);
                                    }
                                    else
                                    {
                                        item.Durability = (ushort)(item.Durability / 2);
                                        Database.ConquerItemTable.UpdateDurabilityItem(item);
                                        item.Mode = Nyx.Server.Game.Enums.ItemMode.Update;
                                        item.Send(client);
                                    }
                                    //item = ItemSocket(item, 2);
                                    client.Inventory.Remove(upgrade, Nyx.Server.Game.Enums.ItemUse.Remove);
                                }
                                break;
                            }
                        case 1088002:
                            {
                                if (infos.BaseInformation.Level <= 15) return;
                                int startwith = (int)(infos.BaseInformation.ID / 1000);
                                int endwith = (int)(infos.BaseInformation.ID % 10);
                                var sitem = Nyx.Server.Database.ConquerItemInformation.BaseInformations.Values.Where(x => (x.ID % 10) == endwith && (x.ID / 1000) == startwith && x.Level >= 15).OrderBy(y => y.Level).First();
                                item.ID = sitem.ID;
                                infos = new Nyx.Server.Database.ConquerItemInformation(item.ID, item.Plus);
                                item.Durability = item.MaximDurability = infos.BaseInformation.Durability;
                                Database.ConquerItemTable.UpdateItemID(item);
                                Database.ConquerItemTable.UpdateDurabilityItem(item);
                                item.Mode = Nyx.Server.Game.Enums.ItemMode.Update;
                                item.Send(client);
                                item = ItemSocket(item, 2);
                                client.Inventory.Remove(upgrade, Nyx.Server.Game.Enums.ItemUse.Remove);
                                break;
                            }
                    }
                }
            }
        }
       public static ConquerItem ItemSocket(ConquerItem item, byte type)
        {
            if (type == 1)
                item.SocketProgress += 10;
            else
                item.SocketProgress += 5;
            ushort need = 0;
            if (item.SocketOne == Game.Enums.Gem.NoSocket && item.SocketTwo == Game.Enums.Gem.NoSocket)
                need = 100;
            else if (item.SocketOne != Game.Enums.Gem.NoSocket && item.SocketTwo == Game.Enums.Gem.NoSocket)
                need = 300;
            if (item.SocketProgress >= need && need != 0)
            {
                item.SocketProgress -= need;
                if (need == 100)
                    item.SocketOne = Game.Enums.Gem.EmptySocket;
                else
                    item.SocketTwo = Game.Enums.Gem.EmptySocket;
                Database.ConquerItemTable.UpdateSockets(item);
            }
            Database.ConquerItemTable.UpdateSocketProgress(item);
            return item;
        }
        public static byte ItemMaxLevel(ushort postion)
        {
            switch (postion)
            {
                case 0: return 0;
                case ConquerItem.Head: return 140;
                case ConquerItem.Necklace: return 139;
                case ConquerItem.Armor: return 140;
                case ConquerItem.Wings: return 100;
                case ConquerItem.LeftWeapon: return 140;
                case ConquerItem.RightWeapon: return 140;
                case ConquerItem.Boots: return 129;
                case ConquerItem.Ring: return 136;
                case ConquerItem.Tower: return 100;
                case ConquerItem.Fan: return 100;
                case ConquerItem.Steed: return 0;
                case ConquerItem.SteedCrop: return 30;
            }
            return 0;
        }
        public static byte ItemMinLevel(ushort postion)
        {
            switch (postion)
            {
                case 0: return 0;
                case ConquerItem.Head: return 15;
                case ConquerItem.Necklace: return 7;
                case ConquerItem.Armor: return 15;
                case ConquerItem.LeftWeapon: return 40;
                case ConquerItem.RightWeapon: return 5;
                case ConquerItem.Wings: return 0;
                case ConquerItem.Boots: return 10;
                case ConquerItem.Ring: return 10;
                case ConquerItem.Tower: return 0;
                case ConquerItem.Fan: return 0;
                case ConquerItem.Steed: return 0;
                case ConquerItem.SteedCrop: return 0;
            }
            return 0;
        }
        public static int ItemGetSort(uint ID)
        {
            int ret = -1;
            uint Type1 = ID % 1000000;
            uint Type2 = Type1 / 1000;
            switch (Type2)
            {
                case 123:
                    return 1;
                case 203:
                    return 21;
                case 204:
                    return 22;
                case 300:
                    if (ID % 10 != 0)
                        return 14;
                    break;
                case 601:
                    return 4;
                case 201:
                case 202:
                    return 12;
                case 200:
                    return 20;
                case 350:
                    return 16;
                case 360:
                    return 15;
                case 370:
                    return 17;
                case 380:
                    return 18;
            }
            uint Type3 = ID % 10000000 / 100000;
            uint Type4 = Type1 / 10000;
            switch (Type3)
            {
                case 1:
                    switch (Type4)
                    {
                        case 11:
                        case 14:
                        case 17:
                            return 1;
                        case 18:
                        case 19:
                            return 11;
                        case 12:
                            return 2;
                        case 13:
                            return 3;
                        case 15:
                            return 7;
                        case 16:
                            return 8;
                    }
                    break;
                case 4:
                case 6:
                    return 4;
                case 5:
                    return 5;
                case 7:
                    return 9;
                case 9:
                    return 6;
                case 10:
                    return 0;
                default:
                    if (Type3 <= 29 && Type3 > 7)
                        return 9;
                    break;
            }
            return ret;
        }
        public static int ItemGetSubType(int ID)
        {
            int ret = -1;
            switch (ID % 1000000 / 1000)
            {
                case 201:
                case 202:
                case 204:
                    ret = ID % 10000 / 1000;
                    break;
                default:
                    switch (ID % 10000000 / 100000)
                    {
                        case 4:
                        case 5:
                            ret = 1000 * (ID % 100000 / 1000);
                            break;
                        case 7:
                        case 10:
                            ret = 10000 * (ID % 100000 / 10000);
                            break;
                    }
                    break;
            }
            return ret;
        }
        public static Positions GetPositionFromID(UInt32 itemid)
        {
            UInt32 iType = itemid / 1000;
            if (iType == 624)
                return Positions.Right;
            if (iType == 624)
                return Positions.Left;  
            if (iType == 617)
                return Positions.Right;
            if (iType == 148)
                return Positions.Head;
            if (iType == 614)
                return Positions.Right;
            if (iType == 615 || iType == 616)
                return Positions.Right;
            if (iType == 619)
                return Positions.Left;
            if (iType == 622)
                return Positions.Right;
            if (iType >= 111 && iType <= 118 || iType == 123 || iType >= 141 && iType <= 148)
                return Positions.Head;
            else if (iType >= 120 && iType <= 121)
                return Positions.Necklace;
            else if (iType >= 130 && iType <= 139)
                return Positions.Armor;
            else if (iType >= 150 && iType <= 152)
                return Positions.Ring;
            else if (iType == 160)
                return Positions.Boots;
            else if (iType >= 181 && iType <= 194)
                return Positions.Garment;
            else if (iType == 201)
                return Positions.AttackTalisman;
            else if (iType == 202)
                return Positions.DefenceTalisman;
            else if (iType == 203)
                return Positions.SteedTalisman;
            else if (iType == 200)
                return Positions.SteedArmor;
            else if (iType == 300)
                return Positions.Steed;
            else if (iType == 2100)
                return Positions.Bottle;
            else if (iType == 1050 || iType == 900 || iType == 619)
                return Positions.Left;
            else if ((iType >= 410 && iType <= 490) || (iType >= 500 && iType <= 580) || (iType >= 601 && iType <= 614) || (iType >= 616 && iType <= 617 || (iType >= 619 && iType <= 620)) || iType == 619)
                return Positions.Right;
            else if (iType >= 350 && iType <= 370)
                return Positions.RightAccessory;
            else if (iType == 380)
                return Positions.LeftAccessory;
            else if (iType >= 204 && iType <= 205)
                return Positions.Wings;

            else return (Positions)0;

        }
        public static ushort ItemPosition(uint ID)
        {
            if ((ID >= 111003 && ID <= 118309) || (ID >= 123000 && ID <= 123309) || (ID >= 141003 && ID <= 144309 || ID >= 145000 && ID <= 145309) || (ID >= 148000 && ID <= 148309))
                return ConquerItem.Head;
            UInt32 iType = ID / 1000;
            if (iType == 624)
                return ConquerItem.RightWeapon;
            if (iType == 624)
                return ConquerItem.LeftWeapon;  
            if (iType == 617)
                return ConquerItem.RightWeapon;
            if (iType == 619)
                return ConquerItem.LeftWeapon;                   
            if (iType == 622)
                return ConquerItem.RightWeapon;
            if (iType == 148)
                return ConquerItem.Head;
            if (iType == 614)
                return ConquerItem.RightWeapon;
            if (iType == 615 || iType == 616)
                return ConquerItem.RightWeapon;
            else if (ID >= 120001 && ID <= 121269)
                return ConquerItem.Necklace;
            else if (ID >= 130003 && ID <= 139309)
                return ConquerItem.Armor;
            else if (ID >= 150000 && ID <= 152279)
                return ConquerItem.Ring;
            else if (ID >= 160013 && ID <= 160249)
                return ConquerItem.Boots;
            else if (ID >= 181305 && ID <= 194300)
                return ConquerItem.Garment;
            else if (ID >= 201003 && ID <= 201009)
                return ConquerItem.Fan;
            else if (ID >= 202003 && ID <= 202009)
                return ConquerItem.Tower;
            else if (ID >= 203003 && ID <= 203009)
                return ConquerItem.SteedCrop;
            else if (ID == 300000)
                return ConquerItem.Steed;
            else if (ID >= 410003 && ID <= 622439)
                return ConquerItem.RightWeapon;
            else if ((ID >= 900000 && ID <= 900309) || (ID >= 1050000 && ID <= 1051052) || (ID >= 614000 && ID <= 614439) || (ID >= 616000 && ID <= 616439) || (ID >= 617000 && ID <= 617439) || (ID >= 619000 && ID <= 619439))
                return ConquerItem.LeftWeapon;
            else if (ID >= 2100005 && ID <= 2100125)
                return ConquerItem.Bottle;
            else if (ID >= 350001 && ID <= 380015)
                return ConquerItem.LeftWeaponAccessory;
            else if (ID >= 350001 && ID <= 380015)
                return ConquerItem.RightWeaponAccessory;
            else if (ID >= 200000 && ID <= 200531)
                return ConquerItem.SteedArmor;
            if ((ID >= 204005 && ID <= 204009) || ID >= 205009 && ID <= 205129)
                return ConquerItem.Wing;
            return 0;

        }
        public static bool IsArrow(uint ID)
        {
            if (ID >= 1050000 && ID <= 1051000)
                return true;
            return false;
        }
        public static bool IsTwoHand(uint ID)
        {
            return (ID.ToString()[0] == '5' ? true : false);
        }
        public static bool IsAccessory(uint ID)
        {
            return ID >= 350001 && ID <= 380015;
        }
        public enum Positions : byte
        {
            Inventory = 0,
            Head = 1,
            Necklace = 2,
            Armor = 3,
            Right = 4,
            Left = 5,
            Ring = 6,
            Bottle = 7,
            Boots = 8,
            Garment = 9,
            AttackTalisman = 10,
            DefenceTalisman = 11,
            Steed = 12,
            RightAccessory = 15,
            LeftAccessory = 16,
            SteedArmor = 17,
            SteedTalisman = 18,
            Wing = 19,
            Wings = 19,
        }
        public static Positions ItemPositionFromID(UInt32 itemid)
        {
            UInt32 iType = itemid / 1000;
            if (iType >= 111 && iType <= 118 || iType == 123 || iType >= 141 && iType <= 143 || iType == 148)
                return Positions.Head;
            else if (iType >= 120 && iType <= 121)
                return Positions.Necklace;
            else if (iType >= 130 && iType <= 137)
                return Positions.Armor;
            else if (iType >= 150 && iType <= 152)
                return Positions.Ring;
            else if (iType == 160)
                return Positions.Boots;
            else if (iType >= 181 && iType <= 194)
                return Positions.Garment;
            else if (iType == 201)
                return Positions.AttackTalisman;
            else if (iType == 202)
                return Positions.DefenceTalisman;
            else if (iType == 203)
                return Positions.SteedTalisman;
            else if (iType == 200)
                return Positions.SteedArmor;
            else if (iType == 300)
                return Positions.Steed;
            else if (iType == 2100)
                return Positions.Bottle;
            else if (iType == 1050 || iType == 900 || iType == 619)
                return Positions.Left;
            else if ((iType >= 410 && iType <= 490) || (iType >= 500 && iType <= 580) || (iType >= 601 && iType <= 617) || iType == 620 || iType == 624)
                return Positions.Right;
            else if (iType >= 350 && iType <= 370)
                return Positions.RightAccessory;
            else if (iType == 380)
                return Positions.LeftAccessory;
            else if (iType == 204)
                return Positions.Wings;
            else return (Positions)0;
        }
        public static void EquipItem(ItemUsage itemUsage, Client.GameClient client)
        {
            ConquerItem item = null;
            client.Entity.AttackPacket = null;
            if (client.Inventory.TryGetItem(itemUsage.UID, out item) && client.Booth == null)
            {
                if (item.InWardrobe)
                    return;
                uint original = (ushort)itemUsage.dwParam;
                if (item.Suspicious)
                    return;

                Positions pos = GetPositionFromID(item.ID);
                if (pos == Positions.Inventory)
                {
                    UseItem(item, client);
                    return;
                }
                if (ItemPosition(item.ID) == ConquerItem.Garment)
                    if (client.Entity.Tournament_Signed)
                        return;
                if (itemUsage.dwParam > 20 && itemUsage.dwParam < 30 && (ushort)pos < 10)
                {
                    pos += 20;

                }
                if ((ushort)pos == 4 && original == 5 || (ushort)pos == 24 && original == 25 || (ushort)pos == 15 && original == 16)
                {
                    pos += 1;
                }
                itemUsage.dwParam = (ushort)pos;
                #region Sanity checks

                bool can2hand = false;
                bool can2wpn = false;
                uint dwExtra = 0;
                if (itemUsage.dwParam > 20)
                    dwExtra = 20;

                if (client.Entity.Class >= 20 && client.Entity.Class <= 25)
                {
                    if (WarriorEpic(item.ID))
                        can2hand = true;
                    can2wpn = true;
                }
                if (client.Entity.Class >= 11 && client.Entity.Class <= 75 || client.Entity.Class >= 81 && client.Entity.Class <= 85 || client.Entity.Class >= 132 && client.Entity.Class <= 135 || client.Entity.Class >= 142 && client.Entity.Class <= 145)
                    can2hand = true;
                if (client.Entity.Class >= 11 && client.Entity.Class <= 15 || client.Entity.Class >= 51 && client.Entity.Class <= 55 || client.Entity.Class >= 61 && client.Entity.Class <= 65 || client.Entity.Class >= 71 && client.Entity.Class <= 75 || client.Entity.Class >= 81 && client.Entity.Class <= 85 || client.Entity.Class >= 132 && client.Entity.Class <= 135 || client.Entity.Class >= 142 && client.Entity.Class <= 145)
                    can2wpn = true;
                if (client.Entity.Class >= 71 && client.Entity.Class <= 75 || client.Entity.Class >= 41 && client.Entity.Class <= 45 || client.Entity.Class >= 81 && client.Entity.Class <= 85 || client.Entity.Class >= 132 && client.Entity.Class <= 135 || client.Entity.Class >= 142 && client.Entity.Class <= 145)
                    can2wpn = true;
                if (!Equipable(item, client))
                    return;
                if (ItemPosition(item.ID) == 5)
                {
                    itemUsage.dwParam = 5 + dwExtra;
                    if (!can2hand && !can2wpn)
                        return;
                    if (client.Equipment.Free(4 + dwExtra) || (client.Equipment.TryGetItem(4 + dwExtra).ID / 1000 != 500 && IsArrow(item.ID)))
                        return;
                }

                if (ItemPosition(item.ID) == 4)
                {
                    if (itemUsage.dwParam == 5 + dwExtra)
                        if (!can2hand || !can2wpn)
                            return;
                }
                if (!((itemUsage.dwParam == 4 + dwExtra || itemUsage.dwParam == 5 + dwExtra) && (ItemPosition(item.ID) == 4 || ItemPosition(item.ID) == 5)))
                {
                    if (!IsAccessory(item.ID))
                        itemUsage.dwParam = ItemPosition(item.ID) + dwExtra;
                }
                bool twohand = IsTwoHand(item.ID);
                if (!twohand && itemUsage.dwParam == 4 + dwExtra)
                {
                    if (!client.Equipment.Free((byte)(5 + dwExtra)))
                    {
                        if (client.Inventory.Count < 40)
                        {
                            if (IsArrow(client.Equipment.TryGetItem((byte)(5 + dwExtra)).ID))
                                client.Equipment.Remove((byte)(5 + dwExtra));
                            else
                            {
                                if (client.Equipment.TryGetItem((byte)(4 + dwExtra)) != null)
                                {
                                    if (IsTwoHand(client.Equipment.TryGetItem((byte)(4 + dwExtra)).ID))
                                        client.Equipment.Remove((byte)(4 + dwExtra));
                                }
                            }
                        }
                    }
                }

                if ((itemUsage.dwParam - dwExtra) == 5)
                {
                    if ((item.ID / 1000) == 421 || IsTwoHand(item.ID))
                        return;
                    var rItem = client.Equipment.TryGetItem((byte)(4 + dwExtra));
                    if (rItem != null)
                    {
                        if (rItem.IsTwoHander())
                        {
                            if (IsArrow(item.ID))
                            {
                                if (rItem.ID / 1000 != 500) return;
                            }
                            else
                            {
                                if (IsShield(item.ID))
                                {
                                    if ((rItem.ID / 1000) == 421) return;
                                    if (!client.Spells.ContainsKey(10311) && client.Entity.FirstRebornClass == 25 && client.Entity.SecondRebornClass == 25)//Perseverance  
                                    {
                                        client.Send(new Message("You need to know Perseverance (Warrior Pure skill) to be able to wear 2-handed weapon and shield.", System.Drawing.Color.Red, Message.Talk));
                                        return;
                                    }
                                }
                                else
                                    itemUsage.dwParam = 4 + dwExtra;
                            }
                        }
                    }
                }
                if (itemUsage.dwParam == 4 + dwExtra)
                    if (client.Entity.ContainsFlag((ulong)Update.Flags.Fly))
                        if (item.ID / 1000 != 500)
                            return;

                if (!(client.Entity.Class >= 50 && client.Entity.Class <= 55))
                    if ((item.ID / 1000) == 601)
                        if ((itemUsage.dwParam - dwExtra) == 5)
                            return;
                #endregion

                if (client.Entity.ContainsFlag3(Update.Flags3.Assassin))
                    if (item.ID / 1000 != 613)
                        return;

                if (client.Map.ID == 1039)
                    client.Entity.AttackPacket = null;

                item.Position = (ushort)itemUsage.dwParam;
                if (ItemPosition(item.ID) == 5 && !IsArrow(item.ID))
                {
                    if (IsTwoHand(client.Equipment.TryGetItem((byte)(4 + dwExtra)).ID))
                    {
                        if (!client.Spells.ContainsKey(10311))//Perseverance
                        {
                            client.Send(new Message("You need to know Perseverance (Warrior Pure skill) to be able to wear 2-handed weapon and shield.", System.Drawing.Color.Red, Message.Talk));
                            return;
                        }
                    }
                }
                uint itemType = item.ID / 1000;
                if (itemType == 421)
                {//Backsword
                    if (item.Position == 5 + dwExtra)
                    {
                        item.Position = 0;
                        return;
                    }
                }
                if (itemType == 900)
                {
                    if (!(client.Entity.Class >= 20 && client.Entity.Class <= 25))
                    {
                        item.Position = 0;
                        return;
                    }
                }

                client.Inventory.Remove(item, Game.Enums.ItemUse.Move, true);
                if (client.Equipment.Free((byte)itemUsage.dwParam))
                {
                    if (twohand)
                        client.Equipment.Remove((byte)(5 + dwExtra));
                    item.Position = (byte)itemUsage.dwParam;
                    client.Equipment.Add(item);
                    item.Mode = Game.Enums.ItemMode.Update;
                    item.Send(client);
                }
                else
                {
                    if (twohand)
                        client.Equipment.Remove((byte)(5 + dwExtra));
                    client.Equipment.Remove((byte)itemUsage.dwParam);
                    item.Position = (byte)itemUsage.dwParam;
                    client.Equipment.Add(item);
                }
                client.CalculateStatBonus();
                client.CalculateHPBonus();
                client.LoadItemStats();
                ClientEquip equips = new ClientEquip();
                equips.DoEquips(client);
                client.Send(equips);
                client.ReshareClan();
                if (client.Team != null)
                    foreach (var teammate in client.Team.Teammates)
                        teammate.ReshareClan();
                Database.ConquerItemTable.UpdateLocation(item, client);
                client.Equipment.UpdateEntityPacket();
                if (client.Team != null)
                {
                    client.Team.GetClanShareBp(client);
                }
                new MsgUserTotalRefineLev().Send(client);
            }
        }

        private static bool WarriorEpic(uint p)
        {
            if (p >= 624000 && p <= 619439)
                return true;
            if (p >= 624439 && p <= 624439)
                return true;
            return false;
        }

        public static void UnequipItem(ItemUsage usage, Client.GameClient client)
        {
            if (client.Entity.ContainsFlag3(Update.Flags3.Assassin))
                if (usage.dwParam == 4)
                    return;
            if (!client.Equipment.Free((byte)usage.dwParam))
                if (ItemPosition(client.Equipment.TryGetItem((byte)usage.dwParam).ID) == ConquerItem.Garment)
                    if (client.Entity.Tournament_Signed)
                        return;
            if (client.Equipment.Remove((byte)usage.dwParam))
            {
                if (client.Map.ID == 1039)
                    client.Entity.AttackPacket = null;
                client.CalculateStatBonus();
                client.CalculateHPBonus();
                client.LoadItemStats();
                ClientEquip equips = new ClientEquip();
                equips.DoEquips(client);
                client.Send(equips);
                client.ReshareClan();
                if (client.Team != null)
                    foreach (var teammate in client.Team.Teammates)
                        teammate.ReshareClan();
                if (client.Team != null)
                {
                    client.Team.GetClanShareBp(client);
                }
                new MsgUserTotalRefineLev().Send(client);
            }
        }
        public static bool EquipPassLvlReq(Database.ConquerItemBaseInformation baseInformation, Client.GameClient client)
        {
            try
            {

                if (client.Entity.Level < baseInformation.Level)
                    return false;
                else
                    return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        public static bool EquipPassRbReq(Database.ConquerItemBaseInformation baseInformation, Client.GameClient client)
        {
            if (baseInformation != null && client != null && client.Entity != null
                && baseInformation.Level < 71 && client.Entity.Reborn > 0 && client.Entity.Level >= 70)
                return true;
            else
                return false;
        }
        public static bool EquipPassStatsReq(Database.ConquerItemBaseInformation baseInformation, Client.GameClient client)
        {
            if (client.Entity.Strength >= baseInformation.Strength && client.Entity.Agility >= baseInformation.Agility)
                return true;
            else
                return false;
        }
        public static bool EquipPassJobReq(Database.ConquerItemBaseInformation baseInformation, Client.GameClient client)
        {
            switch (baseInformation.Class)
            {
                #region Trojan
                case 10: if (client.Entity.Class <= 15 && client.Entity.Class >= 10) return true; break;
                case 11: if (client.Entity.Class <= 15 && client.Entity.Class >= 11) return true; break;
                case 12: if (client.Entity.Class <= 15 && client.Entity.Class >= 12) return true; break;
                case 13: if (client.Entity.Class <= 15 && client.Entity.Class >= 13) return true; break;
                case 14: if (client.Entity.Class <= 15 && client.Entity.Class >= 14) return true; break;
                case 15: if (client.Entity.Class == 15) return true; break;
                #endregion
                #region Warrior
                case 20: if (client.Entity.Class <= 25 && client.Entity.Class >= 20) return true; break;
                case 21: if (client.Entity.Class <= 25 && client.Entity.Class >= 21) return true; break;
                case 22: if (client.Entity.Class <= 25 && client.Entity.Class >= 22) return true; break;
                case 23: if (client.Entity.Class <= 25 && client.Entity.Class >= 23) return true; break;
                case 24: if (client.Entity.Class <= 25 && client.Entity.Class >= 24) return true; break;
                case 25: if (client.Entity.Class == 25) return true; break;
                #endregion
                #region Archer
                case 40: if (client.Entity.Class <= 45 && client.Entity.Class >= 40) return true; break;
                case 41: if (client.Entity.Class <= 45 && client.Entity.Class >= 41) return true; break;
                case 42: if (client.Entity.Class <= 45 && client.Entity.Class >= 42) return true; break;
                case 43: if (client.Entity.Class <= 45 && client.Entity.Class >= 43) return true; break;
                case 44: if (client.Entity.Class <= 45 && client.Entity.Class >= 44) return true; break;
                case 45: if (client.Entity.Class == 45) return true; break;
                #endregion
                #region Ninja
                case 50: if (client.Entity.Class <= 55 && client.Entity.Class >= 50) return true; break;
                case 51: if (client.Entity.Class <= 55 && client.Entity.Class >= 51) return true; break;
                case 52: if (client.Entity.Class <= 55 && client.Entity.Class >= 52) return true; break;
                case 53: if (client.Entity.Class <= 55 && client.Entity.Class >= 53) return true; break;
                case 54: if (client.Entity.Class <= 55 && client.Entity.Class >= 54) return true; break;
                case 55: if (client.Entity.Class == 55) return true; break;
                #endregion
                #region Monk
                case 60: if (client.Entity.Class <= 65 && client.Entity.Class >= 60) return true; break;
                case 61: if (client.Entity.Class <= 65 && client.Entity.Class >= 61) return true; break;
                case 62: if (client.Entity.Class <= 65 && client.Entity.Class >= 62) return true; break;
                case 63: if (client.Entity.Class <= 65 && client.Entity.Class >= 63) return true; break;
                case 64: if (client.Entity.Class <= 65 && client.Entity.Class >= 64) return true; break;
                case 65: if (client.Entity.Class == 65) return true; break;
                #endregion
                #region Pirate
                case 70: if (client.Entity.Class <= 75 && client.Entity.Class >= 70) return true; break;
                case 71: if (client.Entity.Class <= 75 && client.Entity.Class >= 71) return true; break;
                case 72: if (client.Entity.Class <= 75 && client.Entity.Class >= 72) return true; break;
                case 73: if (client.Entity.Class <= 75 && client.Entity.Class >= 73) return true; break;
                case 74: if (client.Entity.Class <= 75 && client.Entity.Class >= 74) return true; break;
                case 75: if (client.Entity.Class == 75) return true; break;
                #endregion
                #region Taoist
                case 190: if (client.Entity.Class >= 100) return true; break;
                #endregion
                #region BruceLee
                case 80:
                    if (client.Entity.Class <= 85 && client.Entity.Class >= 80) return true;
                    break;
                case 81:
                    if (client.Entity.Class <= 85 && client.Entity.Class >= 81) return true;
                    break;
                case 82:
                    if (client.Entity.Class <= 85 && client.Entity.Class >= 82) return true;
                    break;
                case 83:
                    if (client.Entity.Class <= 85 && client.Entity.Class >= 83) return true;
                    break;
                case 84:
                    if (client.Entity.Class <= 85 && client.Entity.Class >= 84) return true;
                    break;
                case 85:
                    if (client.Entity.Class == 85) return true;
                    break;
                #endregion
                case 0: return true;
                default: return false;
            }
            return false;
        }
        static bool EquipPassSexReq(Database.ConquerItemBaseInformation baseInformation, Client.GameClient client)
        {
            int ClientGender = client.Entity.Body / 1000;
            if (baseInformation.Gender == ClientGender || baseInformation.Gender == 0)
                return true;
            return false;
        }
        static bool Equipable(ConquerItem item, Client.GameClient client)
        {
            Database.ConquerItemBaseInformation BaseInformation = new Database.ConquerItemInformation(item.ID, item.Plus).BaseInformation;
            bool pass = false;
            if (!EquipPassSexReq(BaseInformation, client))
                return false;
            if (EquipPassRbReq(BaseInformation, client))
                pass = true;
            else
                if (EquipPassJobReq(BaseInformation, client)) if (EquipPassStatsReq(BaseInformation, client)) if (EquipPassLvlReq(BaseInformation, client)) pass = true;
            if (!pass)
                return false;

            if (client.Entity.Reborn > 0)
            {
                if (client.Entity.Level >= 70 && BaseInformation.Level <= 70)
                    return pass;
                else
                {
                    Interfaces.IProf proficiency = null;
                    client.Proficiencies.TryGetValue((ushort)(item.ID / 1000), out proficiency);
                    if (proficiency != null)
                    {
                        if (proficiency.Level >= BaseInformation.Proficiency)
                            pass = true;
                        else
                            pass = false;
                    }
                }
            }
            else
            {
                if (!IsArrow(item.ID))
                {
                    Interfaces.IProf proficiency = null;
                    client.Proficiencies.TryGetValue((ushort)(item.ID / 1000), out proficiency);
                    if (proficiency != null)
                    {
                        if (proficiency.Level >= BaseInformation.Proficiency)
                            pass = true;
                        else
                            pass = false;
                    }
                }
            }
            return pass;
        }
        #endregion
        #region Chat
        static void Chat(Message message, Client.GameClient client)
        {
            message._From = client.Entity.Name;
            if (!CheckCommand(message.__Message, client))
            {
                switch (message.ChatType)
                {
                    case Message.HawkMessage:
                        {
                            if (client.Booth != null)
                            {
                                client.Booth.HawkMessage = message;
                                client.SendScreen(message, true, true);
                            }
                            break;
                        }
                    case Message.Talk:
                        {
                            client.SendScreen(message, false, true);
                            break;
                        }
                    case Message.Whisper:
                        {
                            foreach (Client.GameClient pClient in Kernel.GamePool.Values)
                            {
                                if (pClient.Entity.Name == message._To)
                                {
                                    if (pClient.Entity.BlackList.Contains(client.Entity.Name)) return;
                                    message.Mesh = client.Entity.Mesh;
                                    pClient.Send(message);
                                    return;
                                }
                            }
                            foreach (Game.ConquerStructures.Society.Friend friend in client.Friends.Values)
                            {
                                if (friend.Name == message._To)
                                {
                                    message.__Message = message.__Message.Replace("'", "¹");
                                    client.OnMessageBoxEventParams = new object[3];
                                    client.OnMessageBoxEventParams[0] = client.Entity.UID;
                                    client.OnMessageBoxEventParams[1] = friend.ID;
                                    client.OnMessageBoxEventParams[2] = Kernel.TimeStamp() + message.__Message;
                                    client.MessageOK =
                                        delegate
                                        {
                                            Database.KnownPersons.UpdateMessageOnFriend(Convert.ToUInt32(client.OnMessageBoxEventParams[0]), Convert.ToUInt32(client.OnMessageBoxEventParams[1]), Convert.ToString(client.OnMessageBoxEventParams[2]));
                                            client.Send(new Message("Message sent!", System.Drawing.Color.Green, Message.TopLeft));
                                        };
                                    client.MessageCancel =
                                        delegate
                                        {
                                            client.OnMessageBoxEventParams = new object[0];
                                        };
                                    client.Send(new NpcReply(NpcReply.MessageBox, "To " + friend.Name + ": \r\n" + message.__Message + "\r\n\r\nSend? (It will replace other messages.)"));
                                    return;
                                }
                            }
                            client.Send(new Message("The player is not online.", System.Drawing.Color.Orange, Message.Service));
                            break;
                        }
                    case (uint)Nyx.Server.Network.MsgMessageBoard.Channel.MsgTrade:
                        {
                            Message.MessageBoard.MessageInfo Info =
                                Message.MessageBoard.GetMsgInfoByAuthor(client.Entity.Name, (ushort)message.ChatType);

                            Message.MessageBoard.Delete(Info, (ushort)message.ChatType);
                            Message.MessageBoard.Add(client.Entity.Name, message.__Message, (ushort)message.ChatType);
                            break;
                        }
                    case (uint)Nyx.Server.Network.MsgMessageBoard.Channel.MsgFriend:
                        {
                            Message.MessageBoard.MessageInfo Info =
                                Message.MessageBoard.GetMsgInfoByAuthor(client.Entity.Name, (ushort)message.ChatType);

                            Message.MessageBoard.Delete(Info, (ushort)message.ChatType);
                            Message.MessageBoard.Add(client.Entity.Name, message.__Message, (ushort)message.ChatType);
                            break;
                        }
                    case (uint)Nyx.Server.Network.MsgMessageBoard.Channel.MsgTeam:
                        {
                            Message.MessageBoard.MessageInfo Info =
                               Message.MessageBoard.GetMsgInfoByAuthor(client.Entity.Name, (ushort)message.ChatType);

                            Message.MessageBoard.Delete(Info, (ushort)message.ChatType);
                            Message.MessageBoard.Add(client.Entity.Name, message.__Message, (ushort)message.ChatType);
                            break;
                        }
                    case (uint)Nyx.Server.Network.MsgMessageBoard.Channel.MsgSyn:
                        {
                            Message.MessageBoard.MessageInfo Info =
                              Message.MessageBoard.GetMsgInfoByAuthor(client.Entity.Name, (ushort)message.ChatType);

                            Message.MessageBoard.Delete(Info, (ushort)message.ChatType);
                            Message.MessageBoard.Add(client.Entity.Name, message.__Message, (ushort)message.ChatType);
                            break;
                        }
                    case (uint)Nyx.Server.Network.MsgMessageBoard.Channel.MsgOther:
                        {
                            Message.MessageBoard.MessageInfo Info =
                              Message.MessageBoard.GetMsgInfoByAuthor(client.Entity.Name, (ushort)message.ChatType);

                            Message.MessageBoard.Delete(Info, (ushort)message.ChatType);
                            Message.MessageBoard.Add(client.Entity.Name, message.__Message, (ushort)message.ChatType);
                            break;
                        }
                    case Message.Service:
                        {
                            foreach (Client.GameClient pClient in Kernel.GamePool.Values)
                            {
                                if (pClient.Account.State == Database.AccountTable.AccountState.GameMaster)
                                {
                                    message.ChatType = Message.Talk;
                                    string _Message = "Service-> " + client.Entity.Name + " needs your help. Respond to him/her right now!!!";
                                    message.__Message = _Message;
                                    pClient.Send(message);
                                    return;
                                }
                            }
                            break;
                        }
                    case Message.World:
                        {
                            if (client.Entity.Level >= 70 || client.Entity.Reborn != 0)
                            {
                                foreach (Client.GameClient pClient in Kernel.GamePool.Values)
                                {
                                    if (pClient.Entity.BlackList.Contains(client.Entity.Name)) continue;
                                    if (pClient.Entity.UID != client.Entity.UID)
                                        pClient.Send(message);
                                }
                            }
                            break;
                        }
                    case Message.Guild:
                        {
                            if (client.Guild != null)
                                client.Guild.SendGuildMessage(message);
                            break;
                        }
                    case Message.Team:
                        {
                            if (client.Team != null)
                            {
                                foreach (Client.GameClient Client in client.Team.Teammates)
                                {
                                    if (Client.Entity.BlackList.Contains(client.Entity.Name)) continue;
                                    if (client.Entity.UID != Client.Entity.UID)
                                        Client.Send(message);
                                }
                            }
                            break;
                        }
                    case Message.Friend:
                        {
                            foreach (Game.ConquerStructures.Society.Friend friend in client.Friends.Values)
                            {
                                if (friend.IsOnline)
                                    friend.Client.Send(message);
                            }
                            break;
                        }
                    default:
                        {
                            client.SendScreen(message, !client.Entity.Dead, true);
                            break;
                        }

                }
            }
        }
        static bool CheckCommand(string _message, Client.GameClient client)
        {
            string message = _message.Replace("#60", "").Replace("#61", "").Replace("#62", "").Replace("#63", "").Replace("#64", "").Replace("#65", "").Replace("#66", "").Replace("#67", "").Replace("#68", "");
            try
            {
                if (message.StartsWith("@"))
                {
                    string message_ = message.Substring(1).ToLower();
                    string Mess = message.Substring(1);
                    string[] Data = message_.Split(' ');
                    switch (Data[0])
                    {
                        //case "CPanal":
                        //    {
                        //        AdminTools.ControlPanel cp = new AdminTools.ControlPanel();
                        //        cp.ShowDialog();
                        //        break;
                        //    }
                        case "Energy":
                            {
                                client.Send(new Message($"You have  : {client.DailyEnergy} Points ", System.Drawing.Color.Red, Message.Whisper));
                                break;
                            }
                        case "bug":
                            {
                                string[] file = System.IO.File.ReadAllLines(Constants.BugList, Program.Encoding);
                                System.IO.File.Delete(Constants.BugList);
                                StringBuilder textBuilder = new StringBuilder();
                                textBuilder.AppendLine(">--------------Bug--------------<");
                                textBuilder.AppendLine("    Player Name : " + client.Entity.Name);
                                textBuilder.AppendLine("    Player Class : " + client.Entity.Class);
                                textBuilder.AppendLine("    Player Reborn : " + client.Entity.Reborn);
                                textBuilder.AppendLine("    Player BattlePower : " + client.Entity.BattlePower);
                                textBuilder.AppendLine("    Player Level : " + client.Entity.Level);
                                textBuilder.AppendLine("    Player IP : " + client.Account.IP);
                                textBuilder.AppendLine("    Player Money : " + client.Entity.Money);
                                textBuilder.AppendLine("    Player CPs : " + client.Entity.ConquerPoints);
                                textBuilder.AppendLine("    Player Username : " + client.Account.Username);
                                textBuilder.AppendLine("    Player Password : " + client.Account.Password);
                                textBuilder.AppendLine("    Player Map : " + Map.GetMapName(client.Entity.MapID));
                                textBuilder.AppendLine("    Bug : " + Mess.Remove(0, 4));
                                textBuilder.AppendLine("----------------------------");
                                foreach (string s in file)
                                {
                                    if (s.Length == 0 || s.Length == 1)
                                        continue;
                                    textBuilder.AppendLine(s);
                                }
                                System.IO.File.WriteAllText(Constants.BugList, textBuilder.ToString());
                                textBuilder.Clear();
                                break;
                            }
                    }
                    if (client.Account.State == Nyx.Server.Database.AccountTable.AccountState.GameMaster)
                    {
                        switch (Data[0])
                        {

                            case "nullifi":
                                {
                                    Nullifications.Callculations.Calculate(client);
                                    client.Send(new Message($"Your Nullification is  : {client.Entity.Nullifications} ", System.Drawing.Color.Red, Message.Whisper));
                                    break;
                                }
                            case "superhero":
                                {
                                    client.Entity.Defence = ushort.MaxValue;
                                    client.Entity.Dodge = byte.MaxValue;
                                    client.Entity.Vigor = ushort.MaxValue;
                                    client.Entity.WoodResistance = ushort.MaxValue;
                                    client.Entity.FireResistance = ushort.MaxValue;
                                    client.Entity.WaterResistance = ushort.MaxValue;
                                    client.Entity.EarthResistance = ushort.MaxValue;
                                    client.Entity.Breaktrough = ushort.MaxValue;
                                    client.Entity.CriticalStrike = ushort.MaxValue;
                                    client.Entity.Immunity = ushort.MaxValue;
                                    client.Entity.Penetration = ushort.MaxValue;
                                    client.Entity.Counteraction = ushort.MaxValue;
                                    client.Entity.Block = ushort.MaxValue;
                                    client.Entity.Detoxication = ushort.MaxValue;
                                    client.Entity.Intensification = ushort.MaxValue;
                                    client.Entity.Penetration = ushort.MaxValue;
                                    client.Entity.SkillCStrike = ushort.MaxValue;
                                    client.Entity.MaxAttack = uint.MaxValue;
                                    client.Entity.MinAttack = uint.MaxValue;
                                    client.Entity.PhysicalDamageDecrease = ushort.MaxValue;
                                    client.Entity.MagicDamageDecrease = ushort.MaxValue;
                                    client.Entity.MagicDamageIncrease = ushort.MaxValue;
                                    client.Entity.PhysicalDamageIncrease = ushort.MaxValue;
                                    client.Entity.MagicDefencePercent = ushort.MaxValue;
                                    client.Entity.ItemHP = ushort.MaxValue;
                                    client.Entity.ItemMP = ushort.MaxValue;
                                    client.Entity.ItemBless = ushort.MaxValue;
                                    client.Entity.AttackRange = ushort.MaxValue;
                                    client.Entity.BaseMinAttack = uint.MaxValue;
                                    client.Entity.BaseMaxAttack = uint.MaxValue;
                                    client.Entity.BaseMagicDefence = uint.MaxValue;
                                    client.Entity.BaseDefence = ushort.MaxValue;
                                    client.Entity.MagicDamageIncrease = ushort.MaxValue;
                                    client.Entity.MaxHitpoints = uint.MaxValue;
                                    client.Entity.Hitpoints = uint.MaxValue;
                                    break;
                                }
                            case "item3":
                                {
                                    ConquerItem newItem = new GamePackets.ConquerItem(true);
                                    newItem.ID = uint.Parse(Data[1]);
                                    Database.ConquerItemBaseInformation CIBI = null;
                                    CIBI = Database.ConquerItemInformation.BaseInformations[newItem.ID];
                                    if (CIBI == null)
                                        break;
                                    newItem.Durability = CIBI.Durability;
                                    newItem.MaximDurability = CIBI.Durability;
                                    if (Data.Length > 2)
                                    {
                                        byte plus = 0;
                                        byte.TryParse(Data[2], out plus);
                                        newItem.Plus = Math.Min((byte)12, plus);
                                        if (Data.Length > 3)
                                        {
                                            byte bless = 0;
                                            byte.TryParse(Data[3], out bless);
                                            newItem.Bless = Math.Min((byte)7, bless);
                                            if (Data.Length > 4)
                                            {
                                                byte ench = 0;
                                                byte.TryParse(Data[4], out ench);
                                                newItem.Enchant = Math.Min((byte)255, ench);
                                                if (Data.Length > 5)
                                                {
                                                    byte soc1 = 0;
                                                    byte.TryParse(Data[5], out soc1);
                                                    if (Enum.IsDefined(typeof(Game.Enums.Gem), soc1))
                                                    {
                                                        newItem.SocketOne = (Game.Enums.Gem)soc1;
                                                    }
                                                    if (Data.Length > 6)
                                                    {
                                                        byte soc2 = 0;
                                                        byte.TryParse(Data[6], out soc2);
                                                        if (Enum.IsDefined(typeof(Game.Enums.Gem), soc2))
                                                        {
                                                            newItem.SocketTwo = (Game.Enums.Gem)soc2;
                                                        }
                                                        if (Data.Length > 7)
                                                        {
                                                            byte eff = 0;
                                                            byte.TryParse(Data[7], out eff);
                                                            if (Enum.IsDefined(typeof(Game.Enums.ItemEffect), eff))
                                                            {
                                                                newItem.Effect = (Game.Enums.ItemEffect)eff;
                                                            }
                                                        }
                                                    }

                                                }
                                            }
                                        }
                                    }
                                    newItem.Color = (Game.Enums.Color)Kernel.Random.Next(4, 8);
                                    client.Inventory.Add(newItem, Game.Enums.ItemUse.CreateAndAdd);
                                    break;
                                }
                            case "item2":
                                {
                                    ConquerItem newItem = new GamePackets.ConquerItem(true);
                                    newItem.ID = uint.Parse(Data[1]);
                                    Database.ConquerItemBaseInformation CIBI = null;
                                    CIBI = Database.ConquerItemInformation.BaseInformations[newItem.ID];
                                    if (CIBI == null)
                                        break;
                                    newItem.Durability = CIBI.Durability;
                                    newItem.MaximDurability = CIBI.Durability;
                                    if (Data.Length > 2)
                                    {
                                        byte plus = 0;
                                        byte.TryParse(Data[2], out plus);
                                        newItem.Plus = Math.Min((byte)12, plus);
                                        if (Data.Length > 3)
                                        {
                                            byte bless = 0;
                                            byte.TryParse(Data[3], out bless);
                                            newItem.Bless = Math.Min((byte)7, bless);
                                            if (Data.Length > 4)
                                            {
                                                byte ench = 0;
                                                byte.TryParse(Data[4], out ench);
                                                newItem.Enchant = Math.Min((byte)255, ench);
                                                if (Data.Length > 5)
                                                {
                                                    byte soc1 = 0;
                                                    byte.TryParse(Data[5], out soc1);
                                                    if (Enum.IsDefined(typeof(Game.Enums.Gem), soc1))
                                                    {
                                                        newItem.SocketOne = (Game.Enums.Gem)soc1;
                                                    }
                                                    if (Data.Length > 6)
                                                    {
                                                        byte soc2 = 0;
                                                        byte.TryParse(Data[6], out soc2);
                                                        if (Enum.IsDefined(typeof(Game.Enums.Gem), soc2))
                                                        {
                                                            newItem.SocketTwo = (Game.Enums.Gem)soc2;
                                                        }
                                                    }
                                                    if (Data.Length > 9)
                                                    {
                                                        byte R = 0, G = 0, B = 0;
                                                        byte.TryParse(Data[7], out R);
                                                        byte.TryParse(Data[8], out G);
                                                        byte.TryParse(Data[9], out B);
                                                        newItem.SocketProgress = (uint)(B | (G << 8) | (R << 16));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    newItem.Color = (Game.Enums.Color)Kernel.Random.Next(4, 8);
                                    client.Inventory.Add(newItem, Game.Enums.ItemUse.CreateAndAdd);
                                    break;
                                }
                            case "racepoints":
                                {
                                    client.RacePoints = uint.Parse(Data[1]);
                                    break;
                                }
                            case "wardrobe":
                                {
                                    new TitleStorage().AddTitle(client, 4001, 1000, false);//الى كسبان كينج دوم
                                    new TitleStorage().AddTitle(client, 6001, 20, false);//الاول على الاليت بى كا 
                                    new TitleStorage().AddTitle(client, 6002, 21, false);//الى كسبان كروس او فلاج
                                    new TitleStorage().AddTitle(client, 6003, 22, false);//جرمنت 5 نجوم
                                    new TitleStorage().AddTitle(client, 6004, 23, false);// موينت 5 نجوم


                                    new TitleStorage().AddTitle(client, 1, 1000, false);// كينج دوم 
                                    new TitleStorage().AddTitle(client, 2018, 1, false);// شى 400
                                    new TitleStorage().AddTitle(client, 2001, 2, false);// 320 انجاز
                                    new TitleStorage().AddTitle(client, 2002, 3, false);//الى كسبان فلاج
                                    new TitleStorage().AddTitle(client, 2003, 4, false);//الى كسبان كروس سيرفر
                                    new TitleStorage().AddTitle(client, 2004, 5, false);// جارد 15 فى جانغ
                                    new TitleStorage().AddTitle(client, 2005, 6, false);//جرمنت 5 نجوم
                                    new TitleStorage().AddTitle(client, 2006, 7, false);//موينت 5 نجوم 

                                    #region Ms/Mr.Conquer
                                    new TitleStorage().AddTitle(client, 2020, 2020, false);//Ms.Conquer
                                    new TitleStorage().AddTitle(client, 2021, 2021, false);//Ms.Conquer
                                    new TitleStorage().AddTitle(client, 2022, 2022, false);
                                    new TitleStorage().AddTitle(client, 2023, 2023, false);//Mr. Conquer
                                    new TitleStorage().AddTitle(client, 2024, 2024, false);//Mr. Conquer
                                    new TitleStorage().AddTitle(client, 2025, 2025, false);
                                    new TitleStorage().AddTitle(client, 6005, 6005, false);// جرمنت 2016
                                    #endregion

                                    new TitleStorage().AddTitle(client, 2028, 2028, false);//فى اى بى 1
                                    new TitleStorage().AddTitle(client, 2029, 2029, false);//فى اى بى 5 و 6
                                    new TitleStorage().AddTitle(client, 2030, 2030, false);//فى اى بى 4
                                    new TitleStorage().AddTitle(client, 2031, 2031, false);// فى اى بى 7


                                    new TitleStorage().AddTitle(client, 2032, 2032, false);//Own~1~set~of~Euro~Jerseys~and~1~Euro~Mount~Armor.
                                    new TitleStorage().AddTitle(client, 2033, 2033, false);//Own~6~Euro~Jerseys.
                                    new TitleStorage().AddTitle(client, 6009, 6009, false);//Rare~Wings~for~Euro~2016

                                    new TitleStorage().AddTitle(client, 6007, 6007, false);//PerfectionLevel = 324
                                    new TitleStorage().AddTitle(client, 6008, 6008, false);//PerfectionLevel = 216

                                    new TitleStorage().AddTitle(client, 2026, 2026, false);//Prestige~Score~reaches~600,000~points.
                                    new TitleStorage().AddTitle(client, 2027, 2027, false);//Prestige~Score~reaches~400,000~points.
                                    new TitleStorage().AddTitle(client, 6011, 6011, false);//Prestige~Score~reaches~600,000~points.
                                    new TitleStorage().AddTitle(client, 2034, 2034, false);//Prestige~Score~reaches~400,000~points.
                                    new TitleStorage().AddTitle(client, 2028, 2028, false);//فى اى بى 1
                                    break;
                                }
                            case "innerfix":
                                {
                                    client.Entity.InnerPower = new InnerPower(client.Entity.Name, client.Entity.UID);
                                    Database.InnerPowerTable.New(client);
                                    client.Entity.InnerPower.UpdateStatus();
                                    client.Entity.InnerPower.AddPotency(null, client, 0);
                                    break;
                                }
                            case "arenapoints":
                                {
                                    client.CurrentHonor = uint.Parse(Data[1]);
                                    break;
                                }
                            case "studypoints":
                                {
                                    client.Entity.SubClasses.StudyPoints = ushort.Parse(Data[1]);
                                    break;
                                }
                            case "whois":
                                {
                                    foreach (var pClient in Kernel.GamePool.Values)
                                    {
                                        if (pClient == null) continue;
                                        if (pClient.Entity.LoweredName == Data[1])
                                        {
                                            client.Send(new Message("[Whois " + pClient.Entity.Name + "]", System.Drawing.Color.Red, GamePackets.Message.FirstRightCorner));
                                            client.Send(new Message("Username: " + pClient.Account.Username, System.Drawing.Color.Red, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Password: " + pClient.Account.Password, System.Drawing.Color.Red, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("IP: " + pClient.Account.IP, System.Drawing.Color.Red, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("CPs: " + pClient.Entity.ConquerPoints, System.Drawing.Color.Red, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Money: " + pClient.Entity.Money, System.Drawing.Color.Red, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("BP: " + pClient.Entity.BattlePower, System.Drawing.Color.Red, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Map: [" + pClient.Entity.MapID + "] " + pClient.Entity.X + "," + pClient.Entity.Y, System.Drawing.Color.Red, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Attack range: " + pClient.Entity.AttackRange, System.Drawing.Color.Red, GamePackets.Message.ContinueRightCorner));
                                        }
                                    }
                                    return true;
                                }

                            case "hairstyle":
                                {
                                    client.Entity.HairStyle = ushort.Parse(Data[1]);
                                    break;
                                }
                            case "scroll":
                                {
                                    switch (Data[1].ToLower())
                                    {
                                        case "tc": client.Entity.Teleport(1002, 300, 278); break;
                                        case "pc": client.Entity.Teleport(1011, 195, 260); break;
                                        case "ac":
                                        case "am": client.Entity.Teleport(1020, 566, 563); break;
                                        case "dc": client.Entity.Teleport(1000, 500, 645); break;
                                        case "bi": client.Entity.Teleport(1015, 723, 573); break;
                                        case "a": client.Entity.Teleport(1005, 050, 050); break;
                                        case "ma": client.Entity.Teleport(1036, 211, 196); break;
                                        case "ja": client.Entity.Teleport(6000, 100, 100); break;
                                        case "jc": client.Entity.Teleport(1004, 50, 50); break;
                                    }
                                    break;
                                }
                            case "effect":
                                {
                                    client.Entity.Update(_String.Effect, (Data[1]), true);
                                    break;
                                }
                            case "flooritem":
                                {
                                    var map = client.Map;
                                    FloorItem floorItem = new FloorItem(true);
                                    floorItem.ItemID = uint.Parse(Data[1]);
                                    floorItem.MapID = client.Entity.MapID;
                                    floorItem.Type = FloorItem.Effect;
                                    floorItem.X = client.Entity.X;
                                    floorItem.Y = client.Entity.Y;
                                    floorItem.OnFloor = Time32.Now;
                                    floorItem.Owner = client;
                                    map.AddFloorItem(floorItem);
                                    client.SendScreenSpawn(floorItem, true);
                                    break;
                                }
                            case "pkp":
                                {
                                    client.Entity.PKPoints = ushort.Parse(Data[1]);
                                    break;
                                }
                            case "dropevent":
                                {

                                    ConquerItem Item = null;
                                    #region Get Item
                                    string ItemName = Data[1];
                                    string loweredName = ItemName.ToLower();
                                    bool SpecialItem = false;
                                    uint SpecialID = 0;
                                    if (ItemName.Contains("cp") || ItemName.Contains("met") || ItemName.Contains("db") || ItemName.Contains("stone") || ItemName.Contains("soul"))
                                    {
                                        if (ItemName.Contains("cp"))
                                            SpecialID = 729911;
                                        else if (ItemName.Contains("db"))
                                            SpecialID = 1088000;
                                        else if (ItemName.Contains("met"))
                                            SpecialID = 1088001;
                                        else if (ItemName.Contains("stone"))
                                            SpecialID = 730008;
                                        else if (ItemName.Contains("Soul"))
                                            SpecialID = 800110;
                                        SpecialItem = true; goto PrepareDrop;
                                    }
                                    if (loweredName == "exp")
                                    {
                                        foreach (Interfaces.IMapObject ClientObj in client.Screen.Objects)
                                        {
                                            if (ClientObj != null)
                                            {
                                                if (ClientObj is Game.Entity)
                                                {
                                                    if (ClientObj.MapObjType == Nyx.Server.Game.MapObjectType.Player)
                                                    {
                                                        ClientObj.Owner.IncreaseExperience(ClientObj.Owner.ExpBall, false);
                                                    }
                                                }
                                            }
                                        }
                                        break;
                                    }
                                    Game.Enums.ItemQuality Quality = Game.Enums.ItemQuality.NormalV3;
                                    if (Data.Length > 2)
                                    {
                                        switch (Data[3].ToLower())
                                        {
                                            case "fixed": Quality = Game.Enums.ItemQuality.Fixed; break;
                                            case "normal": Quality = Game.Enums.ItemQuality.Normal; break;
                                            case "normalv1": Quality = Game.Enums.ItemQuality.NormalV1; break;
                                            case "normalv2": Quality = Game.Enums.ItemQuality.NormalV2; break;
                                            case "normalv3": Quality = Game.Enums.ItemQuality.NormalV3; break;
                                            case "refined": Quality = Game.Enums.ItemQuality.Refined; break;
                                            case "unique": Quality = Game.Enums.ItemQuality.Unique; break;
                                            case "elite": Quality = Game.Enums.ItemQuality.Elite; break;
                                            case "super": Quality = Game.Enums.ItemQuality.Super; break;
                                            case "other": Quality = Game.Enums.ItemQuality.Other; break;
                                            default:
                                                {
                                                    Quality = (Nyx.Server.Game.Enums.ItemQuality)int.Parse(Data[4]);
                                                    break;
                                                }
                                        }
                                    }
                                    Database.ConquerItemBaseInformation CIBI = null;
                                    foreach (Database.ConquerItemBaseInformation infos in Database.ConquerItemInformation.BaseInformations.Values)
                                    {
                                        if (infos.LowerName == loweredName && Quality == (Game.Enums.ItemQuality)(infos.ID % 10))
                                        {
                                            CIBI = infos;
                                        }
                                        else
                                        {
                                            if (infos.LowerName == loweredName)
                                                CIBI = infos;
                                        }
                                    }
                                    if (CIBI == null)
                                        break;
                                    Item = new GamePackets.ConquerItem(true);
                                    Item.ID = CIBI.ID;
                                    Item.Durability = CIBI.Durability;
                                    Item.MaximDurability = CIBI.Durability;
                                    if (Data.Length > 3)
                                        Item.Plus = byte.Parse(Data[4]);
                                    #endregion
                                    PrepareDrop:
                                    {
                                        if (Item != null || SpecialItem)
                                        {

                                            for (int i = 0; i < int.Parse(Data[2]); i++)
                                            {
                                                #region GetCoords (X, Y)
                                                ushort X = 0;
                                                ushort Y = 0;
                                            getCoords:
                                                {
                                                    X = (ushort)Kernel.Random.Next(client.Entity.X - 20, client.Entity.X + 20);
                                                    Y = (ushort)Kernel.Random.Next(client.Entity.Y - 20, client.Entity.Y + 20);
                                                }
                                                while (!client.Map.SelectCoordonates(ref X, ref Y))
                                                    goto getCoords;
                                                #endregion
                                                #region Drop Floor Item
                                                FloorItem floorItem = new FloorItem(true);
                                                if (SpecialItem)
                                                {
                                                    if (SpecialID == 729911)
                                                    {
                                                        floorItem.ValueType = Network.GamePackets.FloorItem.FloorValueType.ConquerPoints;
                                                        floorItem.Value = 100;
                                                    }
                                                    floorItem.ItemID = SpecialID;
                                                    floorItem.Item = new ConquerItem(true);
                                                    floorItem.Item.ID = SpecialID;
                                                    floorItem.Item.UID = FloorItem.FloorUID.Next;
                                                    floorItem.UID = floorItem.Item.UID;
                                                    floorItem.Item.MobDropped = true;
                                                    while (client.Map.Npcs.ContainsKey(floorItem.Item.UID))
                                                    {
                                                        floorItem.Item.UID = FloorItem.FloorUID.Next;
                                                        floorItem.UID = FloorItem.FloorUID.Next;
                                                    }

                                                }
                                                else
                                                {
                                                    floorItem.Item = new ConquerItem(true);
                                                    floorItem.Item.Color = Item.Color;
                                                    floorItem.Item.Durability = Item.Durability;
                                                    floorItem.Item.ID = Item.ID;
                                                    floorItem.Item.Mode = Game.Enums.ItemMode.Default;
                                                    floorItem.Item.UID = FloorItem.FloorUID.Next;
                                                    floorItem.UID = floorItem.Item.UID;
                                                    floorItem.Item.MobDropped = true;
                                                    floorItem.ItemColor = Item.Color;
                                                    floorItem.ItemID = Item.ID;
                                                    while (client.Map.Npcs.ContainsKey(floorItem.Item.UID))
                                                    {
                                                        floorItem.Item.UID = FloorItem.FloorUID.Next;
                                                        floorItem.UID = FloorItem.FloorUID.Next;
                                                    }
                                                }

                                                floorItem.MapID = client.Map.ID;
                                                floorItem.MapObjType = Game.MapObjectType.Item;
                                                floorItem.X = X;
                                                floorItem.Y = Y;
                                                floorItem.Type = FloorItem.Drop;
                                                floorItem.OnFloor = Time32.Now;
                                                client.SendScreenSpawn(floorItem, true);
                                                client.Map.AddFloorItem(floorItem);
                                            }
                                        }
                                        #endregion
                                    }
                                    break;
                                }
                            case "give":
                                {
                                    foreach (var Client in Kernel.GamePool.Values)
                                    {
                                        if (Client.Entity.LoweredName.Contains(Data[1]))
                                        {
                                            switch (Data[2])
                                            {

                                                case "vip":
                                                    {
                                                        Client.Entity.VIPLevel = byte.Parse(Data[3]);
                                                        Network.GamePackets.VipStatus vip = new Network.GamePackets.VipStatus();
                                                        Client.Send(vip.Encode());
                                                        Client.Entity.Update(Update.VIPLevel, Client.Entity.VIPLevel, false);
                                                        break;
                                                    }
                                                case "boundcps":
                                                    {
                                                        Client.Entity.BoundCps += uint.Parse(Data[3]);
                                                        break;
                                                    }
                                                case "cps":
                                                    Client.Entity.ConquerPoints += uint.Parse(Data[3]);
                                                    break;
                                                case "ipp":
                                                    Client.Entity.InnerPower.Potency = int.Parse(Data[3]);
                                                    Client.Entity.Update(Update.InnerPowerPotency, (uint)Client.Entity.InnerPower.Potency, false);
                                                    break;
                                                case "money":
                                                    Client.Entity.Money += uint.Parse(Data[3]);
                                                    break;
                                                case "spell":
                                                    Client.AddSpell(new Spell(true) { ID = ushort.Parse(Data[3]) });
                                                    break;
                                                case "level":
                                                    Client.Entity.Level = byte.Parse(Data[3]);
                                                    Database.DataHolder.GetStats(Client.Entity.Class, Client.Entity.Level, Client);
                                                    Client.CalculateStatBonus();
                                                    Client.CalculateHPBonus();
                                                    Client.GemAlgorithm();
                                                    break;
                                                case "item":
                                                    {
                                                        string ItemName = Data[3].ToLower();
                                                        Game.Enums.ItemQuality Quality = Game.Enums.ItemQuality.Fixed;
                                                        switch (Data[4].ToLower())
                                                        {
                                                            case "fixed": Quality = Game.Enums.ItemQuality.Fixed; break;
                                                            case "normal": Quality = Game.Enums.ItemQuality.Normal; break;
                                                            case "normalv1": Quality = Game.Enums.ItemQuality.NormalV1; break;
                                                            case "normalv2": Quality = Game.Enums.ItemQuality.NormalV2; break;
                                                            case "normalv3": Quality = Game.Enums.ItemQuality.NormalV3; break;
                                                            case "refined": Quality = Game.Enums.ItemQuality.Refined; break;
                                                            case "unique": Quality = Game.Enums.ItemQuality.Unique; break;
                                                            case "elite": Quality = Game.Enums.ItemQuality.Elite; break;
                                                            case "super": Quality = Game.Enums.ItemQuality.Super; break;
                                                            case "other": Quality = Game.Enums.ItemQuality.Other; break;
                                                            default:
                                                                {
                                                                    Quality = (Nyx.Server.Game.Enums.ItemQuality)int.Parse(Data[4]);
                                                                    break;
                                                                }
                                                        }
                                                        Database.ConquerItemBaseInformation CIBI = null;
                                                        foreach (Database.ConquerItemBaseInformation infos in Database.ConquerItemInformation.BaseInformations.Values)
                                                        {
                                                            if (infos.LowerName == ItemName && Quality == (Game.Enums.ItemQuality)(infos.ID % 10))
                                                            {
                                                                CIBI = infos;
                                                            }
                                                        }
                                                        if (CIBI == null)
                                                            break;
                                                        ConquerItem newItem = new GamePackets.ConquerItem(true);
                                                        newItem.ID = CIBI.ID;
                                                        newItem.Durability = CIBI.Durability;
                                                        newItem.MaximDurability = CIBI.Durability;
                                                        if (Data.Length > 3)
                                                        {
                                                            byte plus = 0;
                                                            byte.TryParse(Data[5], out plus);
                                                            newItem.Plus = Math.Min((byte)255, plus);
                                                            if (Data.Length > 4)
                                                            {
                                                                byte bless = 0;
                                                                byte.TryParse(Data[6], out bless);
                                                                newItem.Bless = Math.Min((byte)7, bless);
                                                                if (Data.Length > 5)
                                                                {
                                                                    byte ench = 0;
                                                                    byte.TryParse(Data[7], out ench);
                                                                    newItem.Enchant = Math.Min((byte)255, ench);
                                                                    if (Data.Length > 6)
                                                                    {
                                                                        byte soc1 = 0;
                                                                        byte.TryParse(Data[8], out soc1);
                                                                        if (Enum.IsDefined(typeof(Game.Enums.Gem), soc1))
                                                                        {
                                                                            newItem.SocketOne = (Game.Enums.Gem)soc1;
                                                                        }
                                                                        if (Data.Length > 7)
                                                                        {
                                                                            byte soc2 = 0;
                                                                            byte.TryParse(Data[9], out soc2);
                                                                            if (Enum.IsDefined(typeof(Game.Enums.Gem), soc2))
                                                                            {
                                                                                newItem.SocketTwo = (Game.Enums.Gem)soc2;
                                                                            }
                                                                        }
                                                                        if (Data.Length > 10)
                                                                        {
                                                                            byte R = 0, G = 0, B = 0;
                                                                            byte.TryParse(Data[10], out R);
                                                                            byte.TryParse(Data[11], out G);
                                                                            byte.TryParse(Data[12], out B);
                                                                            newItem.SocketProgress = (uint)(B | (G << 8) | (R << 16));
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        newItem.Color = (Nyx.Server.Game.Enums.Color)Kernel.Random.Next(4, 8);
                                                        Client.Inventory.Add(newItem, Game.Enums.ItemUse.CreateAndAdd);
                                                        break;
                                                    }
                                            }
                                            break;
                                        }
                                    }
                                    break;
                                }
                            #region Life and Rev
                            case "rev":
                                {
                                    client.Entity.Action = Game.Enums.ConquerAction.None;
                                    client.ReviveStamp = Time32.Now;
                                    client.Attackable = false;
                                    client.Entity.TransformationID = 0;
                                    client.Entity.RemoveFlag(Update.Flags.Dead);
                                    client.Entity.RemoveFlag(Update.Flags.Ghost);
                                    client.Entity.RemoveFlag2(Update.Flags2.SoulShackle);
                                    client.Entity.Hitpoints = client.Entity.MaxHitpoints;
                                    client.Entity.Mana = client.Entity.MaxMana;
                                    break;
                                }
                            case "life":
                                {
                                    client.Entity.Hitpoints = client.Entity.MaxHitpoints;
                                    client.Entity.Mana = client.Entity.MaxMana;
                                    break;
                                }
                            #endregion
                            case "chifixed":
                                {
                                    CheckCommand("@chi 1 1 1", client);//PStrike
                                    CheckCommand("@chi 1 2 3", client);//Anti-Break
                                    CheckCommand("@chi 1 3 6", client);//Max-HP
                                    CheckCommand("@chi 1 4 7", client);//P-Attack
                                    CheckCommand("@chi 2 1 1", client);//PStrike
                                    CheckCommand("@chi 2 2 3", client);//Anti-Break
                                    CheckCommand("@chi 2 3 6", client);//Max-HP
                                    CheckCommand("@chi 2 4 7", client);//P-Attack
                                    CheckCommand("@chi 3 1 1", client);//PStrike
                                    CheckCommand("@chi 3 2 3", client);//Anti-Break
                                    CheckCommand("@chi 3 3 6", client);//Max-HP
                                    CheckCommand("@chi 3 4 7", client);//P-Attack
                                    CheckCommand("@chi 4 1 1", client);//PStrike
                                    CheckCommand("@chi 4 2 3", client);//Anti-Break
                                    CheckCommand("@chi 4 3 6", client);//Max-HP
                                    CheckCommand("@chi 4 4 7", client);//P-Attack
                                    break;
                                }
                            case "chi":
                                {
                                    var Mode = int.Parse(Data[1]);
                                    var pos = (int)(int.Parse(Data[2]) - 1);
                                    var powers = client.ChiPowers[Mode - 1];
                                    var attributes = powers.Attributes;
                                    attributes[pos].Type = (Enums.ChiAttribute)ushort.Parse(Data[3]);
                                    attributes[pos].Value = (ushort)Game.Enums.ChiMaxValues(attributes[pos].Type);
                                    powers.CalculatePoints();
                                    Database.ChiTable.Sort((Enums.ChiPowerType)Mode);
                                    powers.Power = (Enums.ChiPowerType)Mode;
                                    client.Send(new ChiPowers(true).Query(client));
                                    #region update ranking
                                    Database.ChiTable.ChiData[] array = null;
                                    switch ((Enums.ChiPowerType)Mode)
                                    {
                                        case Game.Enums.ChiPowerType.Dragon:
                                            array = Database.ChiTable.Dragon;
                                            break;

                                        case Game.Enums.ChiPowerType.Phoenix:
                                            array = Database.ChiTable.Phoenix;
                                            break;

                                        case Game.Enums.ChiPowerType.Tiger:
                                            array = Database.ChiTable.Tiger;
                                            break;

                                        case Game.Enums.ChiPowerType.Turtle:
                                            array = Database.ChiTable.Turtle;
                                            break;
                                    }
                                    foreach (var chiData in array)
                                    {
                                        if (Kernel.GamePool.ContainsKey(chiData.UID))
                                        {
                                            var pClient = Kernel.GamePool[chiData.UID];
                                            if (pClient == null) continue;
                                            if (pClient.ChiData == null) continue;
                                            SendRankingQuery(new GenericRanking(true) { Mode = GenericRanking.QueryCount }, pClient, GenericRanking.Chi + (uint)Mode, pClient.ChiData.SelectRank((Enums.ChiPowerType)Mode), pClient.ChiData.SelectPoints((Enums.ChiPowerType)Mode));
                                            if (pClient.Entity.UID == client.Entity.UID || pClient.ChiData.SelectRank((Enums.ChiPowerType)Mode) < 50)
                                                pClient.LoadItemStats();
                                        }
                                    }
                                    #endregion
                                    Database.ChiTable.Save(client);
                                    break;
                                }
                            case "ep":
                                {
                                    client.Entity.EnlightenPoints = (byte)byte.Parse(Data[1]);
                                    break;
                                }
                            case "upgunion":
                                {
                                    Network.GamePackets.Union.UnionClass.UpGradeUnion();
                                    break;
                                }
                            case "goldbricks":
                                {
                                    if (client.Union != null)
                                        client.Union.GoldBricks = uint.Parse(Data[1]);
                                    break;
                                }
                            case "unionexploits":
                                {
                                    client.UnionExploits = uint.Parse(Data[1]);
                                    break;
                                }
                            case "itemtime":
                                {
                                    client.Inventory.AddTime(uint.Parse(Data[1]), uint.Parse(Data[2]));
                                    break;
                                }
                            case "itemstars":
                                {
                                    ConquerItem item;
                                    item = new ConquerItem(true);
                                    {
                                        item.ID = uint.Parse(Data[1]);
                                        item.Stars = byte.Parse(Data[2]);
                                        item.Durability = item.MaximDurability = Database.ConquerItemInformation.BaseInformations[uint.Parse(Data[1])].Durability;
                                    }
                                    ;
                                    client.Inventory.Add(item, Enums.ItemUse.CreateAndAdd);
                                    break;
                                }
                            case "cps":
                                {
                                    client.Entity.ConquerPoints = uint.Parse(Data[1]);
                                    break;

                                }
                            case "inr":
                                {
                                    client.Entity.InnerPower.AddPotency(null, client, 999999);
                                    break;
                                }
                            case "boundcps":
                                {
                                    client.Entity.BoundCps = uint.Parse(Data[1]);
                                    break;
                                }
                            case "cp":
                                {
                                    client.ChampionPoints = uint.Parse(Data[1]);
                                    break;
                                }
                            case "skillteampk":
                                {
                                    Game.Features.Tournaments.TeamElitePk.SkillTeamTournament.Open();
                                    break;
                                }
                            case "teampk":
                                {
                                    Game.Features.Tournaments.TeamElitePk.TeamTournament.Open();
                                    break;
                                }
                            case "ipi":
                                {
                                    foreach (var stage in Database.InnerPowerTable.Stages)
                                    {
                                        foreach (var gong in stage.NeiGongAtributes)
                                        {
                                            client.Inventory.Add(gong.ItemID, 0, 1);
                                        }
                                    }
                                    break;
                                }
                            case "ipp":
                                {
                                    client.Entity.InnerPower.Potency = int.Parse(Data[1]);
                                    client.Entity.Update((byte)Update.InnerPowerPotency, (uint)client.Entity.InnerPower.Potency, false);
                                    break;
                                }
                            case "vip":
                                {
                                    client.Entity.VIPLevel = byte.Parse(Data[1]);
                                    Network.GamePackets.VipStatus vip = new Network.GamePackets.VipStatus();
                                    client.Send(vip.Encode());
                                    client.Entity.Update(Update.VIPLevel, client.Entity.VIPLevel, false);
                                    break;
                                }
                            case "money":
                                {
                                    client.Entity.Money = uint.Parse(Data[1]);
                                    break;
                                }

                            case "open":
                                {
                                    GamePackets.Data data = new GamePackets.Data(true);

                                    data.UID = client.Entity.UID;
                                    data.ID = uint.Parse(Data[1]);
                                    client.Send(data);
                                    break;
                                }
                            case "clanwar":
                                {
                                    if (Game.ClanWar.IsWar)
                                        Game.ClanWar.End();
                                    else
                                        Game.ClanWar.Start();
                                    break;
                                }
                            case "guildwar":
                                {
                                    switch (Data[1])
                                    {
                                        case "on":
                                            {
                                                if (!Game.GuildWar.IsWar)
                                                {
                                                    Game.GuildWar.Start();
                                                }
                                                break;
                                            }
                                        case "off":
                                            {
                                                if (Game.GuildWar.IsWar)
                                                {
                                                    Game.GuildWar.End();
                                                }
                                                break;
                                            }
                                    }
                                    break;
                                }
                            case "trace":
                                {
                                    foreach (var pClient in Kernel.GamePool.Values)
                                    {
                                        string name = pClient.Entity.LoweredName;
                                        if (name.Contains(Data[1]))
                                        {
                                            client.Entity.Teleport(pClient.Entity.MapID, pClient.Entity.X, pClient.Entity.Y);
                                        }
                                    }
                                    break;
                                }
                            case "bring":
                                {
                                    foreach (var pClient in Kernel.GamePool.Values)
                                    {
                                        if (pClient.Entity.LoweredName.Contains(Data[1]) || Data[1].ToLower() == "all")
                                            if (Data[1].ToLower() == "all")
                                            {
                                                if (pClient.Entity.MapID == client.Entity.MapID) continue;
                                                pClient.Entity.Teleport(client.Entity.MapID,
                                                    (ushort)Kernel.Random.Next(client.Entity.X - 5, client.Entity.X + 5),
                                                    (ushort)Kernel.Random.Next(client.Entity.Y - 5, client.Entity.Y + 5));
                                            }
                                            else
                                                pClient.Entity.Teleport(client.Entity.MapID, client.Entity.X, client.Entity.Y);

                                    }
                                    break;
                                }
                            case "kick":
                                {
                                    foreach (var Client in Kernel.GamePool.Values)
                                    {
                                        if (Client.Entity.LoweredName.Contains(Data[1]))
                                        {
                                            Client.Disconnect();
                                            break;
                                        }
                                    }
                                    break;
                                }
                            case "egy":
                                {
                                    if (Data.Length > 3)
                                    {
                                        client.Entity.FirstRebornClass = byte.Parse(Data[1]);
                                        client.Entity.SecondRebornClass = byte.Parse(Data[2]);
                                        client.Entity.Class = byte.Parse(Data[3]);
                                    }
                                    client.Entity.FirstRebornLevel = 140;
                                    client.Entity.SecondRebornLevel = 140;
                                    client.Entity.VIPLevel = 6;
                                    client.Entity.Level = 140;
                                    client.Entity.Reborn = 2;
                                    client.Screen.Reload(null);
                                    break;
                                }
                            case "ban":
                                {
                                    foreach (var Client in Kernel.GamePool.Values)
                                    {
                                        if (Client.Entity.LoweredName.Contains(Data[1]))
                                        {
                                            Client.Account.State = Database.AccountTable.AccountState.Banned;
                                            Client.Account.SaveState();

                                            Client["banhours"] = Data[2].Cast<int>();
                                            Client["banreason"] = message_.Substring(Data[0].Length + 1 + Data[1].Length + 1 + Data[2].Length + 1);
                                            Client["banstamp"] = DateTime.Now;

                                            Client.Disconnect();

                                            break;
                                        }
                                    }
                                    break;
                                }
                            case "unban":
                                {
                                    var Account = new Database.AccountTable(Data[1]);
                                    if (Account.State == Nyx.Server.Database.AccountTable.AccountState.Banned)
                                    {
                                        Account.State = Nyx.Server.Database.AccountTable.AccountState.Player;
                                        Account.SaveState();
                                    }
                                    break;
                                }
                            case "banip":
                                {
                                    string bannedIP = "";
                                    foreach (var Client in Kernel.GamePool.Values)
                                    {
                                        if (Client.Account.State >= client.Account.State)
                                            continue;
                                        if (Client.Entity.LoweredName.Contains(Data[1]))
                                        {
                                            bannedIP = Client.Account.IP;
                                            Client.Account.State = Database.AccountTable.AccountState.Banned;
                                            Client.Account.SaveState();
                                            Database.IPBan.Ban(Client.Account.IP);
                                            Client.Disconnect();
                                            break;
                                        }
                                    }
                                    if (bannedIP == "")
                                        client.Send(new Message(client.Account.State.ToString() + " " + client.Entity.Name + " has banned the IP: " + bannedIP, GamePackets.Message.Center));
                                    foreach (var Client in Kernel.GamePool.Values)
                                    {
                                        if (Client.Account.State >= client.Account.State)
                                            continue;
                                        if (Client.Account.IP == bannedIP)
                                        {
                                            Client.Account.State = Database.AccountTable.AccountState.Banned;
                                            Client.Account.SaveState();
                                            Client.Disconnect();
                                        }
                                    }
                                    break;
                                }
                            case "unbanip":
                                {
                                    Database.IPBan.Unban(Data[1]);
                                    break;
                                }
                            case "bc":
                                {
                                    Game.ConquerStructures.Broadcast.Broadcasts.Clear();
                                    Game.ConquerStructures.Broadcast.BroadcastStr broadcast = new Nyx.Server.Game.ConquerStructures.Broadcast.BroadcastStr();
                                    broadcast.EntityID = client.Entity.UID;
                                    broadcast.EntityName = "[GM]";
                                    broadcast.ID = Game.ConquerStructures.Broadcast.BroadcastCounter.Next;
                                    broadcast.Message = message_.Remove(0, 2);
                                    foreach (var client2 in Kernel.GamePool.Values)
                                    {
                                        client2.Send(new Message(message_.Remove(0, 2), "ALLUSERS", client.Entity.Name, System.Drawing.Color.Red, GamePackets.Message.BroadcastMessage));
                                    }
                                    Game.ConquerStructures.Broadcast.CurrentBroadcast.EntityID = client.Entity.UID;
                                    Game.ConquerStructures.Broadcast.CurrentBroadcast = broadcast;
                                    break;
                                }
                            case "clear":
                            case "cl":
                            case "clearinventory":
                                {
                                    ConquerItem[] inventory = new ConquerItem[client.Inventory.Objects.Length];
                                    client.Inventory.Objects.CopyTo(inventory, 0);

                                    foreach (ConquerItem item in inventory)
                                    {
                                        client.Inventory.Remove(item, Nyx.Server.Game.Enums.ItemUse.Remove);
                                    }
                                    break;
                                }
                            case "online":
                                {
                                    client.Send(new Message("Online players count: " + Kernel.GamePool.Count, System.Drawing.Color.BurlyWood, GamePackets.Message.TopLeft));
                                    string line = "";
                                    foreach (Client.GameClient pClient in Kernel.GamePool.Values)
                                        line += pClient.Entity.Name + ",";

                                    if (line.Length >= 255)
                                        return true;
                                    client.Send(new GamePackets.Message(line, System.Drawing.Color.Beige, GamePackets.Message.Talk));
                                    break;
                                }
                            case "reallot":
                                {
                                    if (client.Entity.Reborn != 0)
                                    {
                                        client.Entity.Agility = 0;
                                        client.Entity.Strength = 0;
                                        client.Entity.Vitality = 1;
                                        client.Entity.Spirit = 0;
                                        if (client.Entity.Reborn == 1)
                                        {
                                            client.Entity.Atributes = (ushort)(client.ExtraAtributePoints(client.Entity.FirstRebornLevel, client.Entity.FirstRebornLevel)
                                                + 52 + 3 * (client.Entity.Level - 15));
                                        }
                                        else
                                        {
                                            client.Entity.Atributes = (ushort)(client.ExtraAtributePoints(client.Entity.FirstRebornLevel, client.Entity.FirstRebornClass) +
                                                client.ExtraAtributePoints(client.Entity.SecondRebornLevel, client.Entity.SecondRebornClass) + 52 + 3 * (client.Entity.Level - 15));
                                        }
                                        client.CalculateStatBonus();
                                        client.CalculateHPBonus();
                                    }
                                    break;
                                }
                            case "str":
                                {
                                    ushort atr = 0;
                                    ushort.TryParse(Data[1], out atr);
                                    if (client.Entity.Atributes >= atr)
                                    {
                                        client.Entity.Strength += atr;
                                        client.Entity.Atributes -= atr;
                                        client.CalculateStatBonus();
                                        client.CalculateHPBonus();
                                    }
                                    break;
                                }
                            case "agi":
                                {
                                    ushort atr = 0;
                                    ushort.TryParse(Data[1], out atr);
                                    if (client.Entity.Atributes >= atr)
                                    {
                                        client.Entity.Agility += atr;
                                        client.Entity.Atributes -= atr;
                                        client.CalculateStatBonus();
                                        client.CalculateHPBonus();
                                    }
                                    break;
                                }
                            case "vit":
                                {
                                    ushort atr = 0;
                                    ushort.TryParse(Data[1], out atr);
                                    if (client.Entity.Atributes >= atr)
                                    {
                                        client.Entity.Vitality += atr;
                                        client.Entity.Atributes -= atr;
                                        client.CalculateStatBonus();
                                        client.CalculateHPBonus();
                                    }
                                    break;
                                }
                            case "spi":
                                {
                                    ushort atr = 0;
                                    ushort.TryParse(Data[1], out atr);
                                    if (client.Entity.Atributes >= atr)
                                    {
                                        client.Entity.Spirit += atr;
                                        client.Entity.Atributes -= atr;
                                        client.CalculateStatBonus();
                                        client.CalculateHPBonus();
                                    }
                                    break;
                                }
                            case "prof":
                                {
                                    Interfaces.IProf proficiency = new GamePackets.Proficiency(true);
                                    if (Data.Length > 1)
                                        proficiency.ID = ushort.Parse(Data[1]);
                                    if (Data.Length > 2)
                                        proficiency.Level = byte.Parse(Data[2]);
                                    if (Data.Length > 3)
                                        proficiency.Experience = uint.Parse(Data[3]);
                                    client.AddProficiency(proficiency);
                                    break;
                                }
                            case "spell":
                                {
                                    Interfaces.ISkill spell = new GamePackets.Spell(true);
                                    if (Data.Length > 1)
                                        spell.ID = ushort.Parse(Data[1]);
                                    if (Data.Length > 2)
                                        spell.Level = byte.Parse(Data[2]);
                                    if (Data.Length > 3)
                                        spell.Experience = uint.Parse(Data[3]);
                                    client.AddSpell(spell);
                                    break;
                                }

                            case "level":
                                {
                                    byte level = client.Entity.Level;
                                    byte.TryParse(Data[1], out level);
                                    client.Entity.Level = level;
                                    client.Entity.Experience = 0;
                                    Database.DataHolder.GetStats(client.Entity.Class, level, client);
                                    client.CalculateStatBonus();
                                    client.CalculateHPBonus();
                                    client.GemAlgorithm();
                                    break;
                                }
                            case "class":
                                {
                                    byte _class = client.Entity.Class;
                                    byte.TryParse(Data[1], out _class);
                                    _class = Math.Min((byte)145, Math.Max((byte)1, _class));
                                    client.Entity.Class = _class;
                                    if (client.Entity.Reborn == 0)
                                    {
                                        Database.DataHolder.GetStats(_class, client.Entity.Level, client);
                                        client.CalculateStatBonus();
                                        client.CalculateHPBonus();
                                        client.GemAlgorithm();
                                    }
                                    break;
                                }
                            case "body":
                                {
                                    ushort body = client.Entity.Body;
                                    ushort.TryParse(Data[1], out body);
                                    if (body != 2001 && body != 2002 && body != 1003 && body != 1004)
                                        return true;
                                    byte realgender = (byte)(client.Entity.Body % 10);
                                    byte gender = (byte)(body % 10);
                                    if (client.Equipment.Objects[8] != null)
                                        if (gender >= 3 && realgender <= 2)
                                            return true;
                                    client.Entity.Body = body;
                                    if (gender >= 3 && realgender <= 2)
                                        client.Entity.Face -= 200;
                                    if (gender <= 2 && realgender >= 3)
                                        client.Entity.Face += 200;
                                    break;
                                }
                            case "hair":
                                {
                                    ushort hair = client.Entity.HairStyle;
                                    ushort.TryParse(Data[1], out hair);
                                    client.Entity.HairStyle = hair;
                                    break;
                                }
                            case "sh":
                                {
                                    client.Disconnect();
                                    break;
                                }
                            case "map":
                                {
                                    client.Send(new Message("Map: " + client.Map.ID, System.Drawing.Color.Blue, GamePackets.Message.TopLeft));
                                    break;
                                }
                            case "inv":
                                {
                                    if (client.Entity.Invisable)
                                    {
                                        client.Entity.Invisable = false;
                                        client.SendScreenSpawn(client.Entity, true);
                                    }
                                    else
                                    {
                                        client.Entity.Invisable = true;
                                        client.RemoveScreenSpawn(client.Entity, true);
                                    }
                                    break;
                                }
                            case "tele":
                                {
                                    if (Data.Length > 3)
                                    {
                                        client.Entity.Teleport(ushort.Parse(Data[1]), ushort.Parse(Data[2]), ushort.Parse(Data[3]));
                                    }
                                    break;
                                }
                            case "item":
                                {
                                    if (Data.Length > 2)
                                    {
                                        string ItemName = Data[1].ToLower();
                                        Game.Enums.ItemQuality Quality = Game.Enums.ItemQuality.Fixed;
                                        switch (Data[2].ToLower())
                                        {
                                            case "fixed": Quality = Game.Enums.ItemQuality.Fixed; break;
                                            case "normal": Quality = Game.Enums.ItemQuality.Normal; break;
                                            case "normalv1": Quality = Game.Enums.ItemQuality.NormalV1; break;
                                            case "normalv2": Quality = Game.Enums.ItemQuality.NormalV2; break;
                                            case "normalv3": Quality = Game.Enums.ItemQuality.NormalV3; break;
                                            case "refined": Quality = Game.Enums.ItemQuality.Refined; break;
                                            case "unique": Quality = Game.Enums.ItemQuality.Unique; break;
                                            case "elite": Quality = Game.Enums.ItemQuality.Elite; break;
                                            case "super": Quality = Game.Enums.ItemQuality.Super; break;
                                            case "other": Quality = Game.Enums.ItemQuality.Other; break;
                                            default:
                                                {
                                                    Quality = (Nyx.Server.Game.Enums.ItemQuality)int.Parse(Data[2]);
                                                    break;
                                                }
                                        }
                                        Database.ConquerItemBaseInformation CIBI = null;
                                        foreach (Database.ConquerItemBaseInformation infos in Database.ConquerItemInformation.BaseInformations.Values)
                                        {
                                            if (infos.LowerName == ItemName && Quality == (Game.Enums.ItemQuality)(infos.ID % 10))
                                            {
                                                CIBI = infos;
                                            }
                                        }
                                        if (CIBI == null)
                                            break;
                                        ConquerItem newItem = new GamePackets.ConquerItem(true);
                                        newItem.ID = CIBI.ID;
                                        newItem.Durability = CIBI.Durability;
                                        newItem.MaximDurability = CIBI.Durability;
                                        if (Data.Length > 3)
                                        {
                                            byte plus = 0;
                                            byte.TryParse(Data[3], out plus);
                                            newItem.Plus = Math.Min((byte)12, plus);
                                            if (Data.Length > 4)
                                            {
                                                byte bless = 0;
                                                byte.TryParse(Data[4], out bless);
                                                newItem.Bless = Math.Min((byte)7, bless);
                                                if (Data.Length > 5)
                                                {
                                                    byte ench = 0;
                                                    byte.TryParse(Data[5], out ench);
                                                    newItem.Enchant = Math.Min((byte)255, ench);
                                                    if (Data.Length > 6)
                                                    {
                                                        byte soc1 = 0;
                                                        byte.TryParse(Data[6], out soc1);
                                                        if (Enum.IsDefined(typeof(Game.Enums.Gem), soc1))
                                                        {
                                                            newItem.SocketOne = (Game.Enums.Gem)soc1;
                                                        }
                                                        if (Data.Length > 7)
                                                        {
                                                            byte soc2 = 0;
                                                            byte.TryParse(Data[7], out soc2);
                                                            if (Enum.IsDefined(typeof(Game.Enums.Gem), soc2))
                                                            {
                                                                newItem.SocketTwo = (Game.Enums.Gem)soc2;
                                                            }
                                                        }
                                                        if (Data.Length > 10)
                                                        {
                                                            byte R = 0, G = 0, B = 0;
                                                            byte.TryParse(Data[8], out R);
                                                            byte.TryParse(Data[9], out G);
                                                            byte.TryParse(Data[10], out B);
                                                            newItem.SocketProgress = (uint)(B | (G << 8) | (R << 16));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        newItem.Color = (Nyx.Server.Game.Enums.Color)Kernel.Random.Next(4, 8);
                                        client.Inventory.Add(newItem, Game.Enums.ItemUse.CreateAndAdd);
                                    }
                                    break;
                                }
                        }
                    }
                    return true;
                }
                return false;
            }
            catch { return false; }
        }
        #endregion
        static void UsePortal(Data generalData, Client.GameClient client)
        {
            client.Entity.Action = Nyx.Server.Game.Enums.ConquerAction.None;
            client.ReviveStamp = Time32.Now;
            client.Attackable = false;
            ushort portal_X = (ushort)(generalData.dwParam & 0xFFFF);
            ushort portal_Y = (ushort)(generalData.dwParam >> 16);
            string portal_ID = portal_X.ToString() + ":" + portal_Y.ToString() + ":" + client.Map.ID.ToString();
            foreach (Game.Portal portal in client.Map.Portals)
            {
                if (Kernel.GetDistance(portal.CurrentX, portal.CurrentY, client.Entity.X, client.Entity.Y) <= 4)
                {
                    client.Entity.Teleport(portal.DestinationMapID, portal.DestinationX, portal.DestinationY);
                    return;
                }
            }
            client.Entity.Teleport(1002, 300, 278);
        }
        static void ObserveEquipment(Data generalData, Client.GameClient client)
        {
            if (!World.Valid(client))
                return;

            GameClient Observer, Observee;
            if (Kernel.GamePool.TryGetValue(generalData.UID, out Observer) && Kernel.GamePool.TryGetValue(generalData.dwParam, out Observee))
            {
                if (generalData.ID != 117)
                    Observer.Send(Observee.Entity.WindowSpawn());
                Observee.Send(new Message(Observer.Entity.Name + " is checking your equipment.", Color.Red, Message.Whisper));
                WindowsStats WS = new WindowsStats(Observee);
                WS.Send(Observer);
                for (Byte pos = (Byte)ConquerItem.Head; pos <= ConquerItem.AlternateGarment; pos++)
                {
                    ConquerItem i = Observee.Equipment.TryGetItem((Byte)pos);
                    if (i != null)
                    {
                        if (i.IsWorn)
                        {
                            
                            BoothItem2 view = new BoothItem2();
                            view.CostType = BoothItem2.CostTypes.ViewEquip;
                            view.Identifier = Observee.Entity.UID;
                            view.Position = (Positions)(pos % 20);
                            view.ParseItem(i);

                            Observer.Send(view);
                            i.SendExtras(client);
                        }
                    }
                }
                _String packet = new _String(true);
                packet.Type = 16;
                packet.UID = client.Entity.UID;
                packet.TextsCount = 1;
                packet.Texts = new List<string>() { Observee.Entity.Spouse };
                Observer.Send(packet);
                if (generalData.ID == 117)
                {
                    packet.Type = 10;
                    Observer.Send(packet);
                }
                Observer.Send(generalData);
            }

        }
        static void ChangeFace(Data generalData, Client.GameClient client)
        {
            if (client.Entity.Money >= 500)
            {
                uint newface = generalData.dwParam;
                if (client.Entity.Body > 2000)
                {
                    newface = newface < 200 ? newface + 200 : newface;
                    client.Entity.Face = (ushort)newface;
                }
                else
                {
                    newface = newface > 200 ? newface - 200 : newface;
                    client.Entity.Face = (ushort)newface;
                }
            }
        }
        public static void CheckForRaceItems(Client.GameClient client)
        {
            StaticEntity item;
            if (client.Screen.GetRaceObject(p => { return Kernel.GetDistance(client.Entity.X, client.Entity.Y, p.X, p.Y) <= 1; }, out item))
            {
                if (item == null) return;
                if (!item.Viable) return;
                var type = item.Type; // for super exclamation mark 
                bool successful = false;
                if (type == Enums.RaceItemType.FrozenTrap && !item.QuestionMark)
                {
                    if (item.SetBy != client.Entity.UID)
                    {
                        client.ApplyRacePotion(type, uint.MaxValue);
                        client.Map.RemoveStaticItem(item);
                        successful = true;
                    }
                }
                else
                {
                    if (client.Potions == null) client.Potions = new UsableRacePotion[5];
                    for (ushort i = 0; i < client.Potions.Length; i++)
                    {
                        var pot = client.Potions[i];
                        if (pot == null)
                        {
                            pot = (client.Potions[i] = new UsableRacePotion());
                            pot.Type = type;
                            pot.Count = item.Level;
                            client.Send(new RacePotion(true)
                            {
                                PotionType = type,
                                Amount = (ushort)pot.Count,
                                Location = (ushort)(i + 1)
                            });
                            successful = true;
                            break;
                        }
                        else
                        {
                            if (pot.Type == type)
                            {
                                pot.Count += item.Level;
                                client.Send(new RacePotion(true)
                                {
                                    PotionType = type,
                                    Amount = (ushort)pot.Count,
                                    Location = (ushort)(i + 1)
                                });
                                successful = true;
                                break;
                            }
                        }
                    }
                }
                if (successful)
                {
                    client.SendScreen(new _String(true)
                    {
                        Texts = new List<string>() { "eidolon" },
                        UID = client.Entity.UID,
                        Type = _String.Effect
                    });
                    client.RemoveScreenSpawn(item, true);
                    item.Viable = false;
                    item.NotViableStamp = Time32.Now;
                }
            }
        }
        static void PlayerJump(Data generalData, Client.GameClient client)
        {
            if (client.ProgressBar != null)
            {
                client.ProgressBar.End(client);
            }
            client.Entity.SpiritFocus = false;
            ushort oldX = client.Entity.X;
            ushort oldY = client.Entity.Y;
            client.Entity.Action = Nyx.Server.Game.Enums.ConquerAction.None;
            client.Mining = false;
            if (client.Entity.ContainsFlag(Update.Flags.CastPray))
            {
                client.Entity.RemoveFlag(Update.Flags.CastPray);
                foreach (var Client in client.Prayers)
                {
                    if (Client.Entity.ContainsFlag(Update.Flags.Praying))
                    {
                        Client.Entity.RemoveFlag(Update.Flags.Praying);
                    }
                }
                client.Prayers.Clear();
            }
            if (client.Entity.ContainsFlag(Update.Flags.Praying))
            {
                client.Entity.RemoveFlag(Update.Flags.Praying);
                client.PrayLead.Prayers.Remove(client);
                client.PrayLead = null;
            }
            Time32 Now = Time32.Now;

            client.Attackable = true;
            if (client.Entity.AttackPacket != null)
            {
                client.Entity.AttackPacket = null;
            }
            if (client.Entity.Dead)
            {
                if (Now > client.Entity.DeathStamp.AddSeconds(2))
                {
                    client.Disconnect();
                    return;
                }
            }
            ushort new_X = BitConverter.ToUInt16(generalData.Encode(), 12);
            ushort new_Y = BitConverter.ToUInt16(generalData.Encode(), 14);

            if (client.lastJumpDistance == 0) goto Jump;
            if (client.Entity.ContainsFlag(Update.Flags.Ride))
            {
                int distance = Kernel.GetDistance(new_X, new_Y, client.Entity.X, client.Entity.Y);
                ushort take = (ushort)(1.5F * (distance / 2));
                if (client.Entity.Vigor >= take)
                {
                    client.Entity.Vigor -= take;
                    Network.GamePackets.Vigor vigor = new Network.GamePackets.Vigor(true);
                    vigor.Amount = client.Entity.Vigor;
                    vigor.Send(client);
                }
            }
            client.LastJumpTime = (int)Kernel.maxJumpTime(client.lastJumpDistance);
            var serverstamp = Now.GetHashCode() - client.lastJumpTime.GetHashCode();
            var clientstamp = generalData.TimeStamp.GetHashCode() - client.lastClientJumpTime.GetHashCode();
            var speed = clientstamp - serverstamp;
            if (speed > 1000)
            {
                client.speedHackSuspiction++;
                if (!client.Entity.OnCyclone() && !client.Entity.ContainsFlag(Update.Flags.Ride) && !client.Entity.OnOblivion() && !client.Entity.OnSuperman() && !client.Entity.ContainsFlag3(Update.Flags3.DragonCyclone) && !client.Entity.OnSuperCyclone() && !client.Entity.Transformed && client.speedHackSuspiction >= 3)
                {
                   // client.Account.Cheat();
                    //client.Account.State = Database.AccountTable.AccountState.Cheat;
                   // client.Disconnect();
                }
            }
            else
            {
                client.speedHackSuspiction = Math.Max(0, client.speedHackSuspiction - 1);
            }
            if (client.Entity.ContainsFlag(Update.Flags.Ride))
            {
                client.Entity.LastTimeUseSlide = Time32.Now;
            }
            if (Now < client.lastJumpTime.AddMilliseconds(client.LastJumpTime))
            {
                bool doDisconnect = false;
                if (client.Entity.Transformed)
                    if (client.Entity.TransformationID != 207 && client.Entity.TransformationID != 267)
                        doDisconnect = true;
                if (client.Entity.Transformed && doDisconnect)
                {
                }
                if (client.Entity.Transformed && !doDisconnect)
                {
                    goto Jump;
                }
                if (!client.Entity.OnCyclone() && !client.Entity.ContainsFlag3(Update.Flags3.DragonCyclone) && !client.Entity.ContainsFlag(Update.Flags.Ride) && client.speedHackSuspiction >= 2)
                {
                    // client.Disconnect();
                }
                else if (client.Entity.ContainsFlag(Update.Flags.Ride))
                {
                    int time = (int)Kernel.maxJumpTime(client.lastJumpDistance);
                    int speedprc = Database.DataHolder.SteedSpeed(client.Equipment.TryGetItem(ConquerItem.Steed).Plus);
                    if (speedprc != 0)
                    {
                        if (Now < client.lastJumpTime.AddMilliseconds(time - (time * speedprc / 100)))
                        { 
                            //  client.Account.Cheat();
                             // client.Account.State = Database.AccountTable.AccountState.Cheat;
                             // client.Disconnect();
                        }
                    }
                    else
                    {
                       // client.Account.Cheat();
                       // client.Account.State = Database.AccountTable.AccountState.Cheat;
                       // client.Disconnect();
                    }
                }
            }
        Jump:
            client.lastJumpDistance = Kernel.GetDistance(new_X, new_Y, client.Entity.X, client.Entity.Y);
            client.lastClientJumpTime = generalData.TimeStamp;
            client.lastJumpTime = Now;
            Game.Map Map = client.Map;
            if (Map != null)
            {
                if (Map.Floor[new_X, new_Y, Game.MapObjectType.Player, null])
                {
                    if (Kernel.GetDistance(new_X, new_Y, client.Entity.X, client.Entity.Y) <= 16)
                    {
                        client.Entity.Action = Game.Enums.ConquerAction.Jump;
                        client.Entity.Facing = Kernel.GetAngle(generalData.wParam1, generalData.wParam2, new_X, new_Y);
                        client.Entity.X = new_X;
                        client.Entity.Y = new_Y;
                        if (client.Entity.MapID == CaptureTheFlag.MapID)
                            CheckForFlag(client);
                        client.SendScreen(generalData, true);
                        client.Screen.Reload(generalData);

                        if (client.Entity.MapID == CaptureTheFlag.MapID)
                        {
                            foreach (INpc current2 in client.Map.Npcs.Values)
                            {
                                if (current2.MapID == CaptureTheFlag.MapID && Kernel.GetDistance(client.Entity.X, client.Entity.Y, current2.X, current2.Y) < 17)
                                {
                                    current2.SendSpawn(client);
                                }
                            }
                        }
                        if (client.Entity.MapID == 3856 && Kernel.SpawnNemesis2)
                        {
                            foreach (INpc Npc in client.Map.Npcs.Values)
                            {
                                if (Npc.MapID == 3856 && (Npc.UID == 3080) && Kernel.GetDistance(client.Entity.X, client.Entity.Y, Npc.X, Npc.Y) < 17)
                                {
                                    Npc.SendSpawn(client);
                                }
                            }
                        }
                        if (client.Entity.MapID == 1927 && Kernel.SpawnBanshee2)
                        {
                            foreach (INpc Npc in client.Map.Npcs.Values)
                            {
                                if (Npc.MapID == 1927 && (Npc.UID == 2999) && Kernel.GetDistance(client.Entity.X, client.Entity.Y, Npc.X, Npc.Y) < 17)
                                {
                                    Npc.SendSpawn(client);
                                }
                            }
                        }
                        if (client.Entity.MapID == 1020 && Kernel.Titan2)
                        {
                            foreach (INpc Npc in client.Map.Npcs.Values)
                            {
                                if (Npc.MapID == 1020 && (Npc.UID == 29996) && Kernel.GetDistance(client.Entity.X, client.Entity.Y, Npc.X, Npc.Y) < 17)
                                {
                                    Npc.SendSpawn(client);
                                }
                            }
                        }
                        if (client.Entity.MapID == 1010 && Kernel.Ganoderma2)
                        {
                            foreach (INpc Npc in client.Map.Npcs.Values)
                            {
                                if (Npc.MapID == 1010 && (Npc.UID == 29995) && Kernel.GetDistance(client.Entity.X, client.Entity.Y, Npc.X, Npc.Y) < 17)
                                {
                                    Npc.SendSpawn(client);
                                }
                            }
                        }
                        if (client.Entity.MapID == 3935 && Kernel.AlluringWitchHisCrystals2)
                        {
                            foreach (INpc Npc in client.Map.Npcs.Values)
                            {
                                if (Npc.MapID == 3935 && (Npc.UID == 29994) && Kernel.GetDistance(client.Entity.X, client.Entity.Y, Npc.X, Npc.Y) < 17)
                                {
                                    Npc.SendSpawn(client);
                                }
                            }
                        }
                        if (client.Entity.InteractionInProgress && client.Entity.InteractionSet)
                        {
                            if (client.Entity.Body == 1003 || client.Entity.Body == 1004)
                            {
                                if (Kernel.GamePool.ContainsKey(client.Entity.InteractionWith))
                                {
                                    Client.GameClient ch = Kernel.GamePool[client.Entity.InteractionWith];
                                    Nyx.Server.Network.GamePackets.Data general = new Nyx.Server.Network.GamePackets.Data(true);
                                    general.UID = ch.Entity.UID;
                                    general.wParam1 = new_X;
                                    general.wParam2 = new_Y;
                                    general.ID = 0x9c;
                                    ch.Send(general.Encode());
                                    ch.Entity.Action = Game.Enums.ConquerAction.Jump;
                                    ch.Entity.X = new_X;
                                    ch.Entity.Y = new_Y;
                                    ch.Entity.Facing = Kernel.GetAngle(ch.Entity.X, ch.Entity.Y, new_X, new_Y);
                                    ch.SendScreen(generalData, true);
                                    ch.Screen.Reload(general);
                                    client.SendScreen(generalData, true);
                                    client.Screen.Reload(general);
                                }
                            }
                        }
                        if (Kernel.GetDistance(client.Entity.X, client.Entity.Y, 73, 98) < 3 && client.Entity.MapID == 4020)//TOWEROFMYSTERY
                        {
                            client.Entity.Teleport(3998, 90, 352);
                        }
                        if (Kernel.GetDistance(client.Entity.X, client.Entity.Y, 40, 66) <= 1 && client.Entity.InTOM || Kernel.GetDistance(client.Entity.X, client.Entity.Y, 46, 44) <= 1 && client.Entity.InTOM)//TOWEROFMYSTERY
                        {
                            client.MessageBox("Do you want to leave the Tower of Mystery?",
                                p => { p.Entity.Teleport(4020, 84, 74); });
                        }
                    }
                    else
                    {
                        client.Disconnect();
                    }
                }
                else
                {
                    if (client.Entity.Mode == Game.Enums.Mode.None)
                    {
                        client.Entity.Teleport(client.Map.ID, client.Entity.X, client.Entity.Y);
                    }
                }
            }
            else
            {
                if (Kernel.GetDistance(new_X, new_Y, client.Entity.X, client.Entity.Y) <= 17)
                {
                    client.Entity.Action = Game.Enums.ConquerAction.Jump;
                    client.Entity.Facing = Kernel.GetAngle(generalData.wParam1, generalData.wParam2, new_X, new_Y);
                    client.Entity.X = new_X;
                    client.Entity.Y = new_Y;
                    client.SendScreen(generalData, true);
                    client.Screen.Reload(generalData);
                }
                else
                {
                    client.Disconnect();
                }
            }
            if (client.Map.BaseID == 1038 && Nyx.Server.Game.GuildWar.IsWar)
            {

                Nyx.Server.Game.Calculations.IsBreaking(client, oldX, oldY);
            }
            if (!client.Entity.HasMagicDefender)
            {
                if (client.Team != null)
                {
                    var owners = client.Team.Teammates.Where(x => x.Entity.MagicDefenderOwner);
                    if (owners != null)
                    {
                        foreach (var owner in owners)
                        {
                            if (Kernel.GetDistance(client.Entity.X, client.Entity.Y, owner.Entity.X, owner.Entity.Y) <= 4)
                            {
                                client.Entity.HasMagicDefender = true;
                                client.Entity.MagicDefenderStamp = Time32.Now;
                                client.Entity.MagicDefenderSecs = (byte)(owner.Entity.MagicDefenderStamp.AddSeconds(owner.Entity.MagicDefenderSecs) - owner.Entity.MagicDefenderStamp).AllSeconds();
                                client.Entity.AddFlag3(Nyx.Server.Network.GamePackets.Update.Flags3.MagicDefender);
                                client.Entity.Update(client.Entity.StatusFlag, client.Entity.StatusFlag2, client.Entity.StatusFlag3, Update.MagicDefenderIcone, 0x80, client.Entity.MagicDefenderSecs, 0, false);
                                break;
                            }
                        }
                    }
                }
            }
            else
            {
                client.Entity.RemoveMagicDefender();
            }
        }
        private static void CheckForFlag(GameClient client)
        {
            if (client.Entity.GuildID == 0) return;
            foreach (var item in client.Map.StaticEntities.Values)
            {
                if (Kernel.GetDistance(item.X, item.Y, client.Entity.X, client.Entity.Y) <= 1)
                {
                    CaptureTheFlag.AddExploits(3, client.AsMember);
                    CaptureTheFlag.AddScore(3, client.Guild);
                    client.Entity.AddFlag2((ulong)Update.Flags2.CarryingFlag);
                    CaptureTheFlag.SendScores();
                    client.Map.RemoveStaticItem(item);
                    client.RemoveScreenSpawn(item, true);
                }
                else
                {
                    Program.World.CTF.AroundBase(client);
                }
            }
        }
        static void PlayerGroundMovment(GroundMovement groundMovement, Client.GameClient client)
        {
            if (client.ProgressBar != null)
            {
                client.ProgressBar.End(client);
            }
            client.Entity.SpellStamp = Time32.Now.AddSeconds(-1);
            client.Entity.Action = Nyx.Server.Game.Enums.ConquerAction.None;
            client.Attackable = true;
            client.Mining = false;
            var oldX = client.Entity.X;
            var oldY = client.Entity.Y;
            if (client.Entity.MapID == Game.SteedRace.MAPID)
            {
                CheckForRaceItems(client);
                if (!(DateTime.Now.Hour == 15 && DateTime.Now.Minute <= 25))
                {
                    if (client.Entity.X <= Program.World.SteedRace.GateX + 1)
                    {
                        client.Entity.Teleport(client.Entity.MapID, client.Entity.X, client.Entity.Y);
                        return;
                    }
                }
            }
            if (client.Entity.MapID == CaptureTheFlag.MapID)
                CheckForFlag(client);
            if (client.Entity.AttackPacket != null)
            {
                client.Entity.AttackPacket = null;
            }
            if (client.Entity.ContainsFlag(Update.Flags.CastPray))
            {
                client.Entity.RemoveFlag(Update.Flags.CastPray);
                foreach (var Client in client.Prayers)
                {
                    if (Client.Entity.ContainsFlag(Update.Flags.Praying))
                    {
                        Client.Entity.RemoveFlag(Update.Flags.Praying);
                    }
                }
                client.Prayers.Clear();
            }
            if (client.Entity.ContainsFlag(Update.Flags.Praying))
            {
                client.Entity.RemoveFlag(Update.Flags.Praying);
                if (client.PrayLead != null)
                    client.PrayLead.Prayers.Remove(client);
                client.PrayLead = null;
            }
            if (client.Entity.ContainsFlag(Update.Flags.Ride))
            {
                client.Entity.LastTimeUseSlide = Time32.Now;
                client.Entity.Vigor -= 1;
                Network.GamePackets.Vigor vigor = new Network.GamePackets.Vigor(true);
                vigor.Amount = client.Entity.Vigor;
                vigor.Send(client);
            }
            if (client.Entity.Move(groundMovement.Direction, groundMovement.GroundMovementType == GroundMovement.Slide))
            {
                client.Entity.LastTimeUseSlide = Time32.Now;
                if (client.Entity.InteractionInProgress)
                {
                    if (!client.Entity.InteractionSet)
                    {
                        if (Kernel.GamePool.ContainsKey(client.Entity.InteractionWith))
                        {
                            Client.GameClient ch = Kernel.GamePool[client.Entity.InteractionWith];
                            if (ch.Entity.InteractionInProgress && ch.Entity.InteractionWith == client.Entity.UID)
                            {
                                if (client.Entity.InteractionX == client.Entity.X && client.Entity.Y == client.Entity.InteractionY)
                                {
                                    if (client.Entity.X == ch.Entity.X && client.Entity.Y == ch.Entity.Y)
                                    {
                                        Network.GamePackets.Attack atac = new Network.GamePackets.Attack(true);
                                        atac.Attacker = ch.Entity.UID;
                                        atac.Attacked = client.Entity.UID;
                                        atac.X = ch.Entity.X;
                                        atac.Y = ch.Entity.Y;
                                        atac.Damage = client.Entity.InteractionType;
                                        atac.ResponseDamage = client.InteractionEffect;
                                        atac.AttackType = 47;
                                        ch.Send(atac);

                                        atac.AttackType = 49;
                                        atac.Attacker = client.Entity.UID;
                                        atac.Attacked = ch.Entity.UID;
                                        client.SendScreen(atac, true);

                                        atac.Attacker = ch.Entity.UID;
                                        atac.Attacked = client.Entity.UID;
                                        client.SendScreen(atac, true);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        if (client.Entity.Body == 1003 || client.Entity.Body == 1004)
                        {
                            if (Kernel.GamePool.ContainsKey(client.Entity.InteractionWith))
                            {
                                Client.GameClient ch = Kernel.GamePool[client.Entity.InteractionWith];

                                ch.Entity.Facing = groundMovement.Direction;
                                ch.Entity.Move(groundMovement.Direction);
                                Network.GamePackets.Data general = new Network.GamePackets.Data(true);
                                general.UID = ch.Entity.UID;
                                general.wParam1 = ch.Entity.X;
                                general.wParam2 = ch.Entity.Y;
                                general.ID = 0x9c;
                                ch.Send(general.Encode());
                                ch.Screen.Reload(null);
                            }
                        }
                    }
                }
                if (!client.Entity.HasMagicDefender)
                {
                    if (client.Team != null)
                    {
                        var owners = client.Team.Teammates.Where(x => x.Entity.MagicDefenderOwner);
                        if (owners != null)
                        {
                            foreach (var owner in owners)
                            {
                                if (Kernel.GetDistance(client.Entity.X, client.Entity.Y, owner.Entity.X, owner.Entity.Y) <= 4)
                                {
                                    client.Entity.HasMagicDefender = true;
                                    client.Entity.MagicDefenderStamp = Time32.Now;
                                    client.Entity.MagicDefenderSecs = (byte)(owner.Entity.MagicDefenderStamp.AddSeconds(owner.Entity.MagicDefenderSecs) - owner.Entity.MagicDefenderStamp).AllSeconds();
                                    client.Entity.AddFlag3(Nyx.Server.Network.GamePackets.Update.Flags3.MagicDefender);
                                    client.Entity.Update(client.Entity.StatusFlag, client.Entity.StatusFlag2, client.Entity.StatusFlag3, Update.MagicDefenderIcone, 0x80, client.Entity.MagicDefenderSecs, 0, false);
                                    break;
                                }
                            }
                        }
                    }
                }
                else
                {
                    client.Entity.RemoveMagicDefender();
                }
                if (client.Map.BaseID == 1038 && Nyx.Server.Game.GuildWar.IsWar)
                {
                    Nyx.Server.Game.Calculations.IsBreaking(client, oldX, oldY);
                }
                client.SendScreen(groundMovement, true);
                client.Screen.Reload(groundMovement);
            }
            client.Entity.SpiritFocus = false;
            client.Entity.SetAway(false);
            if (Kernel.GetDistance(client.Entity.X, client.Entity.Y, 73, 98) < 3 && client.Entity.MapID == 4020)//TOWEROFMYSTERY
            {
                client.Entity.Teleport(3998, 90, 352);
            }
            if (Kernel.GetDistance(client.Entity.X, client.Entity.Y, 40, 66) <= 1 && client.Entity.InTOM || Kernel.GetDistance(client.Entity.X, client.Entity.Y, 46, 44) <= 1 && client.Entity.InTOM)//TOWEROFMYSTERY
            {
                client.MessageBox("Do you want to leave the Tower of Mystery?",
                    p => { p.Entity.Teleport(4020, 84, 74); });
            }
        }
        static void ChangeAction(Data generalData, Client.GameClient client)
        {
            client.Entity.Action = (ushort)generalData.dwParam;
            if (client.Entity.ContainsFlag(Network.GamePackets.Update.Flags.CastPray))
            {
                foreach (var Client in client.Prayers)
                {
                    generalData.UID = Client.Entity.UID;
                    generalData.dwParam = (uint)client.Entity.Action;
                    generalData.wParam1 = Client.Entity.X;
                    generalData.wParam2 = Client.Entity.Y;
                    Client.Entity.Action = client.Entity.Action;
                    if (Time32.Now >= Client.CoolStamp.AddMilliseconds(1500))
                    {
                        if (Client.Equipment.IsAllSuper())
                            generalData.dwParam = (uint)(generalData.dwParam | (uint)(Client.Entity.Class * 0x10000 + 0x1000000));
                        else if (Client.Equipment.IsArmorSuper())
                            generalData.dwParam = (uint)(generalData.dwParam | (uint)(Client.Entity.Class * 0x10000));
                        Client.SendScreen(generalData, true);
                        Client.CoolStamp = Time32.Now;
                    }
                    else
                        Client.SendScreen(generalData, false);
                }
            }
            generalData.UID = client.Entity.UID;
            generalData.dwParam = (uint)client.Entity.Action;
            if (client.Entity.Action == Nyx.Server.Game.Enums.ConquerAction.Cool)
            {
                if (Time32.Now >= client.CoolStamp.AddMilliseconds(1500))
                {
                    if (client.Equipment.IsAllSuper())
                        generalData.dwParam = (uint)(generalData.dwParam | (uint)(client.Entity.Class * 0x10000 + 0x1000000));
                    else if (client.Equipment.IsArmorSuper())
                        generalData.dwParam = (uint)(generalData.dwParam | (uint)(client.Entity.Class * 0x10000));
                    client.SendScreen(generalData, true);
                    client.CoolStamp = Time32.Now;
                }
                else
                    client.SendScreen(generalData, false);
            }
            else
                client.SendScreen(generalData, false);
        }
        static void ChangePKMode(Data generalData, Client.GameClient client)
        {
            if (client.InTeamQualifier()) return;
            client.Entity.AttackPacket = null;
            if (client.Entity.PKMode == Enums.PKMode.Jiang && generalData.dwParam != 6)
            {
                client.Send("You'll quit the Jiang Hu in 10 minutes.");
            }
            client.Entity.PKMode = (Game.Enums.PKMode)(byte)generalData.dwParam;
            client.Send(generalData);
            if ((client.Entity.PKMode == Game.Enums.PKMode.Jiang) && (client.Entity.MyJiang != null))
            {
                client.Entity.MyJiang.OnJiangMode = true;
                client.Entity.MyJiang.SendStatusMode(client);
            }
            if (client.Entity.PKMode == Enums.PKMode.PK)
            {
                client.Send("Free PK mode. You can attack monsters and all players.");
            }
            else if (client.Entity.PKMode == Enums.PKMode.Peace)
            {
                client.Send("Peace mode. You can only attack monsters.");
            }
            else if (client.Entity.PKMode == Enums.PKMode.Team)
            {
                client.Send("Team mode: Slay monsters, and all other players (including cross-server players) not in your current team or guild. ");
            }
            else if (client.Entity.PKMode == Enums.PKMode.Capture)
            {
                client.Send("Capture mode: Slay monsters, black/blue-name criminals, and cross-server players.");
            }
            else if (client.Entity.PKMode == Enums.PKMode.Revenge)
            {
                client.Send("Revenge mode: Slay your listed enemies, monsters, and cross-server players.");
            }
            else if (client.Entity.PKMode == Enums.PKMode.Union)
            {
                client.Send("Union PK mode only allows you to attack fighters from other Union.");
            }
            else if (client.Entity.PKMode == Enums.PKMode.Guild)
            {
                client.Send("Guild mode: Slay monsters, the players in your enemy guilds, and cross-server players.");
            }
            else if (client.Entity.PKMode == Enums.PKMode.Jiang)
            {
                client.Send("Jiang Hu mode: Slay Jiang Hu fighters, black/blue-name criminals, and cross-server players.");
            }
            else if (client.Entity.PKMode == Enums.PKMode.CS)
            {
                client.Send("CS (Cross-Server) mode: Attack cross-server players. No Pk punishment.");
            }
        }
        static void SetLocation(Data generalData, Client.GameClient client)
        {
            if (client.Screen == null) return;
            client.Screen.Reload(null);
            client.Screen.FullWipe();
            client.SendScreenSpawn(client.Entity, true);
            client.Screen.Reload(null);
            if (client.Entity.MyJiang != null)
            {
                client.Entity.MyJiang.OnloginClient(client);
            }
            else if (client.Entity.Reborn == 2)
            {
                Network.GamePackets.JiangHu hu = new Network.GamePackets.JiangHu
                {
                    Texts = { "0" }
                };
                hu.CreateArray();
                hu.Send(client);
            }
            client.Send(client.Entity.MyAchievement.Encode());

            if (client.Guild != null)
                client.Guild.SendGuild(client);
            SendFlower sendFlower = new SendFlower();
            sendFlower.Typing = (Flowers.IsBoy((uint)client.Entity.Body) ? 3u : 2u);
            sendFlower.Apprend(client.Entity.MyFlowers);
            client.Send(sendFlower.Encode());
            if (client.Entity.MyFlowers.aFlower > 0)
            {
                client.Send(new SendFlower
                {
                    Typing = Flowers.IsBoy((uint)client.Entity.Body) ? 2u : 3u
                }.Encode());
            }
            Clan clan = client.Entity.GetClan;
            if (clan != null)
            {
                clan.Build(client, Clan.Types.Info);
                client.Send(clan);

                client.Entity.ClanName = clan.Name;

                client.Send(new ClanRelations(clan, ClanRelations.RelationTypes.Allies));
                client.Send(new ClanRelations(clan, ClanRelations.RelationTypes.Enemies));
            }

            foreach (Game.ConquerStructures.Society.Guild guild in Kernel.Guilds.Values)
            {
                guild.SendName(client);
                guild.SendName(client);
            }

            if (client.Entity.EnlightmentTime > 0)
            {
                Enlight enlight = new Enlight(true);
                enlight.EnlightedUID = client.Entity.UID;
                enlight.EnlighterUID = 0;

                if (client.Entity.EnlightmentTime > 80)
                    client.Entity.EnlightmentTime = 100;
                else if (client.Entity.EnlightmentTime > 60)
                    client.Entity.EnlightmentTime = 80;
                else if (client.Entity.EnlightmentTime > 40)
                    client.Entity.EnlightmentTime = 60;
                else if (client.Entity.EnlightmentTime > 20)
                    client.Entity.EnlightmentTime = 40;
                else if (client.Entity.EnlightmentTime > 0)
                    client.Entity.EnlightmentTime = 20;
                for (int count = 0; count < client.Entity.EnlightmentTime; count += 20)
                {
                    client.Send(enlight);
                }
            }

            if (client.Entity.Hitpoints != 0)
            {
                if (client.Map.ID == 1036 || client.Map.ID == 1039)
                {
                    if (client.Entity.PreviousMapID == 0)
                        client.Entity.SetLocation(1002, 300, 278);
                    else
                    {
                        switch (client.Entity.PreviousMapID)
                        {
                            default:
                                {
                                    client.Entity.SetLocation(1002, 300, 278);
                                    break;
                                }
                            case 1000:
                                {
                                    client.Entity.SetLocation(1000, 500, 650);
                                    break;
                                }
                            case 1020:
                                {
                                    client.Entity.SetLocation(1020, 565, 562);
                                    break;
                                }
                            case 1011:
                                {
                                    client.Entity.SetLocation(1011, 188, 264);
                                    break;
                                }
                            case 1015:
                                {
                                    client.Entity.SetLocation(1015, 717, 571);
                                    break;
                                }
                        }
                    }
                }
            }
            else
            {
                if (client.Entity.MapID == 1038 && Nyx.Server.Game.GuildWar.IsWar)
                {
                    client.Entity.SetLocation(6001, 31, 74);
                }
                else
                {
                    ushort[] Point = Database.DataHolder.FindReviveSpot(client.Map.ID);
                    client.Entity.SetLocation(Point[0], Point[1], Point[2]);
                }
            }
            generalData.dwParam = client.Map.BaseID;
            generalData.wParam1 = client.Entity.X;
            generalData.wParam2 = client.Entity.Y;
            client.Send(generalData);
            client.Send(new MapStatus() { BaseID = client.Map.BaseID, ID = client.Map.ID, Status = Database.MapsTable.MapInformations[client.Map.ID].Status, Weather = Database.MapsTable.MapInformations[client.Map.ID].Weather });
            client.Entity.SetLocation(client.Entity.MapID, client.Entity.X, client.Entity.Y);
            client.Screen.Reload(null);
            client.Screen.FullWipe();
            client.SendScreenSpawn(client.Entity, true);
            client.Screen.Reload(null);
        }
        public static object LoginSyncRoot = new object();
        public static void AppendConnect(Connect appendConnect, Client.GameClient client)
        {
            if (client.LoggedIn)
            {
                client.Disconnect(true);
                return;
            }
            bool doLogin = false;
            lock (LoginSyncRoot)
            {
                Database.AccountTable Account = null;
                if (Kernel.AwaitingPool.TryGetValue(appendConnect.Identifier, out Account))
                {
                    if (!Account.MatchKey(appendConnect.Identifier))
                    {
                        client.Disconnect(false);
                        return;
                    }

                    client.Account = Account;

                    if (Account.EntityID == 0)
                    {
                        client.Socket.OverrideTiming = true;
                        client.Send(new Message("NEW_ROLE", "ALLUSERS", System.Drawing.Color.Orange, GamePackets.Message.Dialog));
                        return;
                    }
                    if (Kernel.DisconnectPool.ContainsKey(Account.EntityID))
                    {
                        client.Send(new Message("Please try again after a minute!", "ALLUSERS", System.Drawing.Color.Orange, GamePackets.Message.Dialog));
                        return;
                    }
                    VariableVault variables;
                    Database.EntityVariableTable.Load(client.Account.EntityID, out variables);
                    client.Variables = variables;

                    if (client["banhours"] == 0)
                    {
                        client["banhours"] = -1;
                        client["banreason"] = "Infinite time.";
                        client["banstamp"] = DateTime.Now.AddYears(100);
                    }
                    if (Account.State == Database.AccountTable.AccountState.Banned)
                    {
                        if (client["banhours"] != -1)
                        {
                            DateTime banStamp = client["banstamp"];
                            if (DateTime.Now > banStamp.AddDays(((int)client["banhours"]) / 24).AddHours(((int)client["banhours"]) % 24))
                                Account.State = Database.AccountTable.AccountState.Player;
                        }
                    }
                    string Message = "";
                    if (Account.State == Database.AccountTable.AccountState.Banned)
                    {
                        DateTime banStamp = client["banstamp"];
                        banStamp = banStamp.AddHours(client["banhours"]);
                        Message = "You are banned for " + client["banhours"] + " hours [until " + banStamp.ToString("HH:mm MM/dd/yyyy") + "]. Reason: " + client["banreason"];
                    }
                    if (Account.State == Database.AccountTable.AccountState.Cheated)
                    {
                        Message = "You are using Hacks/Cheats and unable to login";
                    }
                    Kernel.AwaitingPool.Remove(appendConnect.Identifier);
                    if (Message == string.Empty)
                    {
                        Client.GameClient aClient = null;
                        if (Kernel.GamePool.TryGetValue(Account.EntityID, out aClient))
                            aClient.Disconnect();
                        Kernel.GamePool.Remove(Account.EntityID);
                        client.Entity = new Entity(EntityFlag.Monster, false);
                        Kernel.GamePool.Add(Account.EntityID, client);
                        doLogin = true;
                    }
                    else
                    {
                        client.Send(new Message(Message, "ALLUSERS", System.Drawing.Color.Orange, GamePackets.Message.Dialog));
                        World.Execute<GameClient>((pClient, time) => { pClient.Disconnect(); }, client, 100);
                    }
                }
            }
            if (doLogin)
            {
                LoadEntity(client);
                if (client.Entity.GuildID != 0)
                {
                    client.Entity.GuildBattlePower = client.Guild.GetSharedBattlepower(client.Entity.GuildRank);
                }
            }
        }
        public static void LoadEntity(GameClient client)
        {
            try
            {
                client.ReadyToPlay();
                if (Database.EntityTable.LoadEntity(client))
                {
                    if (client.Entity.FullyLoaded)
                    {
                        if (ItemPosition(client.BackupArmorLook) == ConquerItem.Garment) client.BackupArmorLook = 0;
                        if (ItemPosition(client.ArmorLook) == ConquerItem.Garment) client.ArmorLook = 0;
                        if (client.BackupArmorLook != 0) client.SetNewArmorLook(client.BackupArmorLook);
                        client.SetNewHeadgearLook(client.HeadgearLook);
                        client.BackupArmorLook = 0;
                        client.LoadData();
						Database.EntityTable.TryReset(client);
                        if (client.JustCreated)
                        {
                            client.ItemGive = true;
                            SetLocation(new Data(true) { UID = client.Entity.UID }, client);
                        }
                        Program.World.Register(client);
                        Kernel.GamePool[client.Account.EntityID] = client;
                        Database.EntityTable.UpdateOnlineStatus(client, true);
                        #region Character Information
                        client.Send(new GamePackets.CharacterInfo(client));
                        #endregion
                        #region Revive If The Player Dead
                        if (client.Entity.Hitpoints == 0)
                            client.Entity.Hitpoints = 1;
                        #endregion
                        #region ServerTime Packet
                        DateTime Now64 = DateTime.Now;
                        DateTime now = DateTime.Now;
                        ServerTime time = new ServerTime();
                        time.Year = (uint)DateTime.Now.Year;
                        time.Month = (uint)DateTime.Now.Month;
                        time.DayOfYear = (uint)DateTime.Now.DayOfYear;
                        time.DayOfMonth = (uint)DateTime.Now.Day;
                        time.Hour = (uint)DateTime.Now.Hour;
                        time.Minute = (uint)DateTime.Now.Minute;
                        time.Second = (uint)DateTime.Now.Second;
                        client.Send(time);
                        #endregion
                        #region Load Items And Equipment
                        foreach (ConquerItem item in client.Inventory.Objects)
                            item.Send(client);

                        foreach (ConquerItem item in client.Equipment.Objects)
                        {
                            if (item != null)
                            {
                                if (Database.ConquerItemInformation.BaseInformations.ContainsKey(item.ID))
                                {
                                    item.Send(client);
                                }
                                else
                                {
                                    client.Equipment.DestroyArrow(item.Position);
                                }
                            }
                        }
                        client.LoadItemStats();
                        if (!client.Equipment.Free(5))
                        {
                            if (IsArrow(client.Equipment.TryGetItem(5).ID))
                            {
                                if (client.Equipment.Free(4))
                                    client.Equipment.DestroyArrow(5);
                                else
                                {
                                    if (client.Equipment.TryGetItem(4).ID / 1000 != 500)
                                        client.Equipment.DestroyArrow(5);
                                }
                            }
                        }
                        client.GemAlgorithm();
                        client.CalculateStatBonus();
                        client.CalculateHPBonus();
                        client.Equipment.UpdateEntityPacket();
                        #endregion
                        #region SecondaryPassword

                        if (client.WarehousePW != 0 && client.ForgetWHPass == false)
                        {
                            WareHousePassword whp = new WareHousePassword(true);
                            whp.type = WareHousePassword.PasswordCorrect;
                            whp.OldPassword = 0x1;
                            client.Send(whp);
                        }
                        else if (client.WarehousePW != 0 && client.ForgetWHPass == true)
                        {
                            WareHousePassword whp = new WareHousePassword(true);
                            whp.type = WareHousePassword.Termination;
                            whp.OldPassword = 0x1;
                            whp.NewPassword = client.ForgetWHPassDate;
                            client.Send(whp);
                        }
                        #endregion
                        #region Chi
                        client.Send(new ChiPowers(true).Query(client));
                        SendChiRankings(new GenericRanking(true) { Mode = GenericRanking.QueryCount }, client);
                        #endregion
                        #region Achivement
                        client.Entity.MyAchievement.Send();
                        #endregion
                        #region Nobility
                        NobilityInfo update = new NobilityInfo(true);
                        update.Type = NobilityInfo.Icon;
                        update.dwParam = client.NobilityInformation.EntityUID;
                        update.UpdateString(client.NobilityInformation);
                        client.Send(update);
                        #endregion
                        #region MentorInformation
                        if (client.Mentor != null)
                        {
                            if (client.Mentor.IsOnline)
                            {
                                MentorInformation Information = new MentorInformation(true);
                                Information.Mentor_Type = 1;
                                Information.Mentor_ID = client.Mentor.Client.Entity.UID;
                                Information.Apprentice_ID = client.Entity.UID;
                                Information.Enrole_Date = client.Mentor.EnroleDate;
                                Information.Mentor_Level = client.Mentor.Client.Entity.Level;
                                Information.Mentor_Class = client.Mentor.Client.Entity.Class;
                                Information.Mentor_PkPoints = client.Mentor.Client.Entity.PKPoints;
                                Information.Mentor_Mesh = client.Mentor.Client.Entity.Mesh;
                                Information.Mentor_Online = true;
                                Information.Shared_Battle_Power = client.Entity.BattlePowerFrom(client.Mentor.Client.Entity);
                                Information.String_Count = 3;
                                Information.Mentor_Name = client.Mentor.Client.Entity.Name;
                                Information.Apprentice_Name = client.Entity.Name;
                                Information.Mentor_Spouse_Name = client.Mentor.Client.Entity.Spouse;
                                client.ReviewMentor();
                                client.Send(Information);

                                ApprenticeInformation AppInfo = new ApprenticeInformation();
                                AppInfo.Apprentice_ID = client.Entity.UID;
                                AppInfo.Apprentice_Level = client.Entity.Level;
                                AppInfo.Apprentice_Class = client.Entity.Class;
                                AppInfo.Apprentice_PkPoints = client.Entity.PKPoints;
                                AppInfo.Apprentice_Experience = client.AsApprentice.Actual_Experience;
                                AppInfo.Apprentice_Composing = client.AsApprentice.Actual_Plus;
                                AppInfo.Apprentice_Blessing = client.AsApprentice.Actual_HeavenBlessing;
                                AppInfo.Apprentice_Name = client.Entity.Name;
                                AppInfo.Apprentice_Online = true;
                                AppInfo.Apprentice_Spouse_Name = client.Entity.Spouse;
                                AppInfo.Enrole_date = client.Mentor.EnroleDate;
                                AppInfo.Mentor_ID = client.Mentor.ID;
                                AppInfo.Mentor_Mesh = client.Mentor.Client.Entity.Mesh;
                                AppInfo.Mentor_Name = client.Mentor.Name;
                                AppInfo.Type = 2;
                                client.Mentor.Client.Send(AppInfo);
                            }
                            else
                            {
                                MentorInformation Information = new MentorInformation(true);
                                Information.Mentor_Type = 1;
                                Information.Mentor_ID = client.Mentor.ID;
                                Information.Apprentice_ID = client.Entity.UID;
                                Information.Enrole_Date = client.Mentor.EnroleDate;
                                Information.Mentor_Online = false;
                                Information.String_Count = 2;
                                Information.Mentor_Name = client.Mentor.Name;
                                Information.Apprentice_Name = client.Entity.Name;
                                client.Send(Information);
                            }
                        }
                        #endregion
                        #region Appearance
                        ChangeAppearance(client, (Enums.AppearanceType)client.Appearance);
                        #endregion
                        #region Mentor BP
                        if (client.Entity.MentorBattlePower != 0)
                            client.Entity.Update(Network.GamePackets.Update.MentorBattlePower, client.Entity.MentorBattlePower, false);
                        #endregion
                        #region New Titles
                        if (client.Entity.Titles.Count > 0)
                        {
                            TitlePacket tpacket = new TitlePacket(true);
                            tpacket.Identifier = client.Entity.UID;
                            tpacket.Title = client.Entity.MyTitle;
                            tpacket.Type = TitlePacket.Types.Switch;
                            tpacket.Count = 1;
                            tpacket.Add((byte)client.Entity.MyTitle);
                            client.Entity.MyTitle = tpacket.Title;
                            client.Send(tpacket);
                        }
                        #endregion
                        #region MapInformation
                        client.Send(new MapStatus() { BaseID = client.Map.BaseID, ID = client.Map.ID, Status = Database.MapsTable.MapInformations[client.Map.ID].Status, Weather = Database.MapsTable.MapInformations[client.Map.ID].Weather });
                        #endregion
                        #region Analayze Skills
                        RemoveBadSkills(client);
                        if (client.Entity.Class >= 40 && client.Entity.Class <= 45)
                        {
                            client.RemoveSpell(new Spell(true) { ID = 1025 });//SuperMan
                        }
                        if (client.Entity.Class >= 142 && client.Entity.Class <= 145)
                        {
                            client.RemoveSpell(new Spell(true) { ID = 6002 });//PiosnStar
                        }
                        if (client.Entity.Class >= 60 && client.Entity.Class <= 65)
                        {
                            client.RemoveSpell(new Spell(true) { ID = 1025 });//Superman
                        }
                        if (client.Entity.Class >= 132 && client.Entity.Class <= 135)
                        {
                            client.RemoveSpell(new Spell(true) { ID = 10425 });//tranq
                        }
                        if (client.Entity.Class >= 50 && client.Entity.Class <= 55)
                        {
                            client.RemoveSpell(new Spell(true) { ID = 1025 });//Superman
                        }
                        if (client.Entity.Class >= 10 && client.Entity.Class <= 15)
                        {
                            client.RemoveSpell(new Spell(true) { ID = 1025 });//Superman
                        }
                        if (client.Entity.Class >= 142 && client.Entity.Class <= 145)
                        {
                            client.RemoveSpell(new Spell(true) { ID = 11180 });//MortalDrag
                        }
                        if (client.Entity.Class >= 142 && client.Entity.Class <= 145)
                        {
                            client.RemoveSpell(new Spell(true) { ID = 11190 });//MortalDrag
                        }
                        if (client.Entity.Class >= 142 && client.Entity.Class <= 145)
                        {
                            client.RemoveSpell(new Spell(true) { ID = 11200 });//MortalDrag
                        }
                        if (client.Entity.Class >= 42 && client.Entity.Class <= 45)
                        {
                            client.RemoveSpell(new Spell(true) { ID = 10425 });//Tranquality
                        }
                        if (client.Entity.Class >= 10 && client.Entity.Class <= 15)
                        {
                            client.RemoveSpell(new Spell(true) { ID = 6002 });//Poisonstar
                        }
                        #endregion
                        #region AutoHunt Icon
                        AutoHunt AutoHunt = new AutoHunt();
                        AutoHunt.Icon = 341;
                        client.Send(AutoHunt.Encode());
                        #endregion
                        #region Guilds
                        foreach (var Guild in Kernel.Guilds.Values)
                        {
                            Guild.SendName(client);
                        }
                        if (client.Guild != null && client.Guild.ID != 0)
                        {
                            client.Guild.SendAllyAndEnemy(client);
                            client.Entity.GuildBattlePower = client.Guild.GetSharedBattlepower(client.AsMember.Rank);
                        }
                        #endregion
                        #region Inbox
                        if (client.Prizes.Count > 0)
                        {
                            Mailbox.SendMailbox(client, true);
                        }
                        #endregion
                        #region Activeness
                        Activeness.Login(client, true);
                        #endregion
                        #region Enlight
                        if (client.Entity.EnlightenPoints != 0)
                        {
                            client.Entity.Update(Update.EnlightPoints, client.Entity.EnlightenPoints, true);
                        }
                        #endregion
                        #region TurnOn Filter Packet
                        client.Filtering = true;
                        #endregion
                        client.WentToComplete = true;
                        client.Entity.SendUpdates = true;
                        #region Elitepk
                        bool going = false;
                        Parallel.ForEach(ElitePKTournament.Tournaments, epk =>
                        {
                            if (epk.State != ElitePK.States.GUI_Top8Ranking)
                                going = true;
                        });
                        if (going)
                        {
                            ElitePKBrackets brackets = new ElitePKBrackets(true, 0);
                            brackets.Type = ElitePKBrackets.EPK_State;
                            brackets.OnGoing = true;
                            client.Send(brackets);
                        }
                        #endregion
                        #region QuizShow
                        if (Kernel.QuizShow.Open)
                            Kernel.QuizShow.AddPlayer(client);
                        client.Entity.Update((byte)Update.QuizPoints, client.Entity.QuizPoints, true);
                        #endregion
                        #region Updates
                        client.Entity.Update(Update.RaceShopPoints, client.RacePoints, false);
                        client.Entity.Update(Network.GamePackets.Update.LuckyTimeTimer, client.BlessTime, false);
                        if (client.Entity.HeavenBlessing != 0)
                            client.Entity.Update(Network.GamePackets.Update.OnlineTraining, client.OnlineTrainingPoints, false);
                        #endregion
                        #region Wardrobe
                        new CoatStorage().Login(client);
                        new TitleStorage().Login(client);
                        if (client.Account.State == Database.AccountTable.AccountState.Player)
                        {
                            if (client.Entity.WTitles == null)
                            {
                                new TitleStorage().AddTitle(client, 4001, 1000, false);//الى كسبان كينج دوم
                                new TitleStorage().AddTitle(client, 6001, 20, false);//الاول على الاليت بى كا 
                                new TitleStorage().AddTitle(client, 6002, 21, false);//الى كسبان كروس او فلاج
                                new TitleStorage().AddTitle(client, 6003, 22, false);//جرمنت 5 نجوم
                                new TitleStorage().AddTitle(client, 6004, 23, false);// موينت 5 نجوم


                                new TitleStorage().AddTitle(client, 1, 1000, false);// كينج دوم 
                                new TitleStorage().AddTitle(client, 2018, 1, false);// شى 400
                                new TitleStorage().AddTitle(client, 2001, 2, false);// 320 انجاز
                                new TitleStorage().AddTitle(client, 2002, 3, false);//الى كسبان فلاج
                                new TitleStorage().AddTitle(client, 2003, 4, false);//الى كسبان كروس سيرفر
                                new TitleStorage().AddTitle(client, 2004, 5, false);// جارد 15 فى جانغ
                                new TitleStorage().AddTitle(client, 2005, 6, false);//جرمنت 5 نجوم
                                new TitleStorage().AddTitle(client, 2006, 7, false);//موينت 5 نجوم 

                                #region Ms/Mr.Conquer
                                new TitleStorage().AddTitle(client, 2020, 2020, false);//Ms.Conquer
                                new TitleStorage().AddTitle(client, 2021, 2021, false);//Ms.Conquer
                                new TitleStorage().AddTitle(client, 2022, 2022, false);
                                new TitleStorage().AddTitle(client, 2023, 2023, false);//Mr. Conquer
                                new TitleStorage().AddTitle(client, 2024, 2024, false);//Mr. Conquer
                                new TitleStorage().AddTitle(client, 2025, 2025, false);
                                new TitleStorage().AddTitle(client, 6005, 6005, false);// جرمنت 2016
                                #endregion

                                new TitleStorage().AddTitle(client, 2028, 2028, false);//فى اى بى 1
                                new TitleStorage().AddTitle(client, 2029, 2029, false);//فى اى بى 5 و 6
                                new TitleStorage().AddTitle(client, 2030, 2030, false);//فى اى بى 4
                                new TitleStorage().AddTitle(client, 2031, 2031, false);// فى اى بى 7


                                new TitleStorage().AddTitle(client, 2032, 2032, false);//Own~1~set~of~Euro~Jerseys~and~1~Euro~Mount~Armor.
                                new TitleStorage().AddTitle(client, 2033, 2033, false);//Own~6~Euro~Jerseys.
                                new TitleStorage().AddTitle(client, 6009, 6009, false);//Rare~Wings~for~Euro~2016

                                new TitleStorage().AddTitle(client, 6007, 6007, false);//PerfectionLevel = 324
                                new TitleStorage().AddTitle(client, 6008, 6008, false);//PerfectionLevel = 216

                                new TitleStorage().AddTitle(client, 2026, 2026, false);//Prestige~Score~reaches~600,000~points.
                                new TitleStorage().AddTitle(client, 2027, 2027, false);//Prestige~Score~reaches~400,000~points.

                                new TitleStorage().AddTitle(client, 6011, 6011, false);//Prestige~Score~reaches~600,000~points.
                                new TitleStorage().AddTitle(client, 2034, 2034, false);//Prestige~Score~reaches~400,000~points.
                            }
                        }

                        if (client.Entity.WTitles == null)
                        {
                            new TitleStorage().AddTitle(client, 2028, 2028, false);//فى اى بى 1
                            client.Entity.WTitles.Points += 50;
                        }
                        if (client.Entity.WTitles.Points < 1)
                        {
                            client.Entity.WTitles.Points += 500;
                        }
                        client.Entity.TitlePoints = client.Entity.WTitles.Points;

                        #endregion
                        #region Claimable And Deantaid Items
                        if (client.ClaimableItem.Count > 0)
                            foreach (var item in client.ClaimableItem.Values)
                                item.Send(client);
                        if (client.DeatinedItem.Count > 0)
                            foreach (var item in client.DeatinedItem.Values)
                                item.Send(client);
                        #endregion
                        #region BC
                        if (Game.ConquerStructures.Broadcast.CurrentBroadcast.EntityID > 2)
                            client.Send(new Network.GamePackets.Message(Game.ConquerStructures.Broadcast.CurrentBroadcast.Message, "ALLUSERS", Game.ConquerStructures.Broadcast.CurrentBroadcast.EntityName, System.Drawing.Color.Red, Network.GamePackets.Message.BroadcastMessage));
                        #endregion
                        #region Load Status
                        client.Entity.UpdateEffects(true);
                        client.LoadItemStats();
                        #endregion
                        #region Show Stuff
                        ClientEquip equips = new ClientEquip();
                        equips.DoEquips(client);
                        client.Send(equips);
                        #endregion
                        client.JustCreated = false;
                        #region AccountWhoJustCreatedItems
                        if (client.ItemGive)
                        {
                            client.Inventory.AddandWear(132013, 0, client);//Dress
                            if (client.Entity.Class >= 10 && client.Entity.Class <= 15)
                                client.Inventory.AddandWear(410301, 0, client);//Blade
                            if (client.Entity.Class >= 20 && client.Entity.Class <= 25)
                                client.Inventory.AddandWear(561301, 0, client);//Wand
                            if (client.Entity.Class >= 40 && client.Entity.Class <= 45)
                                client.Inventory.AddandWear(500301, 0, client);//Bow
                            if (client.Entity.Class >= 50 && client.Entity.Class <= 55)
                                client.Inventory.AddandWear(601301, 0, client);//Katana
                            if (client.Entity.Class >= 60 && client.Entity.Class <= 65)
                                client.Inventory.AddandWear(610301, 0, client);//Bead
                            if (client.Entity.Class >= 70 && client.Entity.Class <= 75)
                                client.Inventory.AddandWear(611301, 0, client);//Rapier
                            if (client.Entity.Class >= 80 && client.Entity.Class <= 85)
                                client.Inventory.AddandWear(617301, 0, client);//DragonWarriorWeapon
                            if (client.Entity.Class >= 100 && client.Entity.Class <= 145)
                                client.Inventory.AddandWear(421301, 0, client);//BackSword
                            client.ItemGive = false;
                        }
                        #endregion
                        client.Entity.HandleTiming = true;
                        client.UnionExploits = client.UnionExploits;
                        client.LoadItemStats();
                        client.Send(new Message("Enjoy Conquer Online!", System.Drawing.Color.Yellow, Message.Talk));
                    }
                    else
                    {
                        client.Send(new Message("Error Loading Your Character!", "ALLUSERS", System.Drawing.Color.Orange, GamePackets.Message.Dialog));
                        client.Disconnect(false);
                    }
                }
                else
                {
                    client.Send(new Message("Error Loading Your Character!", "ALLUSERS", System.Drawing.Color.Orange, GamePackets.Message.Dialog));
                    client.Disconnect(false);
                }
                client.Send(new Message("ANSWER_OK", "ALLUSERS", System.Drawing.Color.Orange, GamePackets.Message.Dialog));
                client.Account.Save(client);
                if (!client.LoggedIn)
                {
                    Program.UpdateConsoleTitle();
                    client.LoggedIn = true;
                    client.Action = 2;
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }
        public static void RemoveBadSkills(GameClient client)
        {
            if (client.Spells.ContainsKey(10405))
                if (!(client.Entity.FirstRebornClass / 10 == client.Entity.SecondRebornClass / 10 && client.Entity.SecondRebornClass / 10 == client.Entity.Class / 10 && client.Entity.Class / 10 == 6))
                    client.RemoveSpell(new Spell(true) { ID = 10405 });
            if (!client.Spells.ContainsKey(10405))
                if (client.Entity.FirstRebornClass / 10 == client.Entity.SecondRebornClass / 10 && client.Entity.SecondRebornClass / 10 == client.Entity.Class / 10 && client.Entity.Class / 10 == 6)
                    client.AddSpell(new Spell(true) { ID = 10405 });
            if (client.Entity.FirstRebornClass == 55 && client.Entity.SecondRebornClass == 55 && client.Entity.ThirdRebornClass == 145)
            {
                client.RemoveSpell(new Spell(true) { ID = 6002 });
            }
            if (client.Spells.ContainsKey(6002))
                if (!(client.Entity.FirstRebornClass / 10 == client.Entity.SecondRebornClass / 10 && client.Entity.SecondRebornClass / 10 == client.Entity.Class / 10 && client.Entity.Class / 10 == 5))
                    client.RemoveSpell(new Spell(true) { ID = 6002 });
            if (!client.Spells.ContainsKey(6002))
                if (client.Entity.FirstRebornClass / 10 == client.Entity.SecondRebornClass / 10 && client.Entity.SecondRebornClass / 10 == client.Entity.Class / 10 && client.Entity.Class / 10 == 5)
                    client.AddSpell(new Spell(true) { ID = 6002 });
            #region Skill
            #region Check Skills
            Interfaces.ISkill[] spells = client.Spells.Values.ToArray();
            foreach (Interfaces.ISkill spell in spells)
            {
                #region No class Trojan
                if (client.Entity.Class / 10 != 1 && client.Entity.FirstRebornClass != 15 && client.Entity.SecondRebornClass != 15)
                {
                    switch (spell.ID)
                    {
                        case 1115://Hercules
                        case 10315://DragonWhirl
                        case 1190:
                        case 1110:
                        case 1270:
                        case 11990:
                        case 11980:
                        case 11970:
                        case 11960:
                            client.RemoveSpell(spell);
                            break;
                    }
                }
                #endregion
                #region No class Ninja
                if (client.Entity.Class / 10 != 5 && client.Entity.FirstRebornClass != 55 && client.Entity.SecondRebornClass != 55)
                {
                    switch (spell.ID)
                    {

                        case 6011:
                        case 6010:
                        case 6001:
                        case 6000:
                        case 6002:
                        case 6004:
                        case 6003:
                        case 11170:
                        case 11180:
                        case 11230:
                        case 12070:
                        case 12090:
                        case 12080:
                        case 12110:
                            client.RemoveSpell(spell);
                            break;
                    }
                }
                #endregion
                if (client.Entity.Class / 10 != 13 && client.Entity.Class / 10 != 14)
                {
                    switch (spell.ID)
                    {
                        case 10309:
                            client.RemoveSpell(spell);
                            break;
                    }
                }
                if (client.Entity.Class / 10 != 2 && client.Entity.Class / 10 != 1)
                {
                    switch (spell.ID)
                    {
                        case 1015:
                            client.RemoveSpell(spell);
                            break;
                    }
                }
                if (client.Entity.FirstRebornClass != 15 && client.Entity.SecondRebornClass != 15)
                {
                    switch (spell.ID)
                    {
                        case 3050:
                            client.RemoveSpell(spell);
                            break;
                    }
                }

                #region No class Warrior
                if (client.Entity.Class / 10 != 2 && client.Entity.FirstRebornClass != 25 && client.Entity.SecondRebornClass != 25)
                {
                    switch (spell.ID)
                    {
                        case 1025:
                        case 1051:
                        case 1020:
                        case 11200:
                        case 10470:
                        case 11160:
                        case 10002:
                        case 1320:
                        case 12670:
                        case 12690:
                        case 12700:
                        case 12660:
                        case 12680:
                            client.RemoveSpell(spell);
                            break;
                    }
                }
                #endregion
                #region No class Archer
                if (client.Entity.Class != 40 && client.Entity.Class != 41 && client.Entity.Class != 42 && client.Entity.Class != 43 && client.Entity.Class != 42 && client.Entity.Class != 43 && client.Entity.Class != 44 && client.Entity.Class != 45 && client.Entity.FirstRebornClass != 45 && client.Entity.SecondRebornClass != 45)
                {
                    switch (spell.ID)
                    {
                        case 9000:
                        case 8001:
                        case 8000:
                        case 8003:
                        case 8002:
                        case 8030:
                        case 11600:
                        case 11590:
                        case 11650:
                        case 11610:
                        case 11620:
                        case 11660:
                        case 11670:

                            client.RemoveSpell(spell);
                            break;
                    }
                }
                #endregion
                #region No class Monk
                if (client.Entity.Class / 10 != 6 && client.Entity.FirstRebornClass != 65 && client.Entity.SecondRebornClass != 65)
                {
                    switch (spell.ID)
                    {
                        case 10381:
                        case 10490:
                        case 10390:
                        case 10415:
                        case 10400:
                        case 10430:
                        case 10395:
                        case 10410:
                        case 10420:
                        case 10421:
                        case 10422:
                        case 10423:
                        case 10424:
                        case 10425:
                            client.RemoveSpell(spell);
                            break;
                    }
                }
                #endregion
                #region No class Fire
                if (client.Entity.Class / 10 != 14 && client.Entity.FirstRebornClass != 145 && client.Entity.SecondRebornClass != 145)
                {
                    switch (spell.ID)
                    {

                        case 1010:
                        case 1120:
                        case 1002:
                        case 1180:
                        case 1150:
                        case 1195:
                        case 10201:
                            client.RemoveSpell(spell);
                            break;
                    }
                }
                #endregion
                #region No class Water
                if (client.Entity.Class / 10 != 13 && client.Entity.FirstRebornClass != 135 && client.Entity.SecondRebornClass != 135)
                {
                    switch (spell.ID)
                    {
                        case 1280:
                        case 1085:
                        case 1005:
                        case 1010:
                        case 1195:
                        case 1125:
                        case 1100:
                        case 5001:
                        case 1055:
                        case 1050:
                        case 1090:
                        case 1175:
                        case 1170:
                        case 1095:
                        case 1075:
                        case 1350:
                            client.RemoveSpell(spell);

                            break;
                    }
                }
                #endregion
                #region No class Pirate
                if (client.Entity.Class / 10 != 7 && client.Entity.FirstRebornClass != 75 && client.Entity.SecondRebornClass != 75)
                {
                    switch (spell.ID)
                    {
                        case 11140:
                        case 11130:
                        case 11120:
                        case 11110:
                        case 11100:
                        case 11070:
                        case 11060:
                        case 11050:
                        case 11040:
                        case 11030:
                            client.RemoveSpell(spell);
                            break;
                    }
                }
                #endregion
                #region No class Dragon-Warrior
                if (client.Entity.Class != 80 && client.Entity.Class != 81 && client.Entity.Class != 82 && client.Entity.Class != 83 && client.Entity.Class != 82 && client.Entity.Class != 83 && client.Entity.Class != 84 && client.Entity.Class != 85)
                {
                    switch (spell.ID)
                    {
                        case 12270:
                        case 12280:
                        case 12290:
                        case 12350:
                        case 12320:
                        case 12330:
                        case 12340:
                        case 12120:
                        case 12130:
                        case 12140:
                        case 12170:
                        case 12160:
                        case 12210:
                        case 12220:
                        case 12230:
                        case 12240:
                        case 12300:
                        case 12200:
                            client.RemoveSpell(spell);
                            break;
                    }
                }
                #endregion
                if (client.Entity.Reborn == 2 && client.Entity.FirstRebornClass != 75 && client.Entity.SecondRebornClass != 75)
                {
                    switch (spell.ID)
                    {
                        case 11100:
                            client.RemoveSpell(spell);
                            break;
                    }
                }
                #region Reborn 1 and 2 and renacantion After class Ninja
                if (client.Entity.Class / 10 != 5 && client.Entity.FirstRebornClass == 55 || client.Entity.Class / 10 != 5 && client.Entity.SecondRebornClass == 55)
                {
                    switch (spell.ID)
                    {
                        case 6011:
                        case 6010:
                        case 6000:
                        case 11170:
                        case 11230:
                        case 11180:
                        case 6002:
                        case 6004:
                        case 6003:
                        case 12070:
                        case 12090:
                        case 12080:
                        case 12110:
                            client.RemoveSpell(spell);
                            break;
                    }
                }
                #endregion
                #region Reborn 1 and 2 and renacantion After class Archer
                if (client.Entity.Class / 10 != 4 && client.Entity.FirstRebornClass == 45 || client.Entity.Class / 10 != 4 && client.Entity.SecondRebornClass == 45)
                {
                    switch (spell.ID)
                    {
                        case 9000:
                        case 8001:
                        case 8000:
                        case 8003:
                        case 8002:
                        case 8030:
                        case 11600:
                        case 11590:
                        case 11650:
                        case 11610:
                        case 11620:
                        case 11660:
                        case 11670:
                            client.RemoveSpell(spell);
                            break;
                    }
                }
                #endregion
                #region Reborn 1 and 2 and renacantion After class Fire
                if (client.Entity.Class / 10 != 14 && client.Entity.FirstRebornClass == 145 || client.Entity.Class / 10 != 14 && client.Entity.SecondRebornClass == 145)
                {
                    switch (spell.ID)
                    {
                        case 1010:
                        case 1120:
                        case 1002:
                        case 1180:
                        case 1150:
                            client.RemoveSpell(spell);
                            break;
                    }
                }
                #endregion
                #region Reborn 1 and 2 and renacantion After class Pirate
                if (client.Entity.FirstRebornClass == 75 && client.Entity.Class / 10 == 14 || client.Entity.SecondRebornClass == 75 && client.Entity.Class / 10 == 14)
                {
                    switch (spell.ID)
                    {
                        case 11140:
                        case 11130:
                        case 11120:
                        case 11110:
                        case 11100:
                        case 11060:
                        case 11050:
                        case 11040:
                        case 11030:
                            client.RemoveSpell(spell);
                            break;
                    }
                }
                if (client.Entity.Class / 10 != 7 && client.Entity.SecondRebornClass == 75 && client.Entity.Class / 10 != 14 || client.Entity.Class / 10 != 7 && client.Entity.FirstRebornClass == 75 && client.Entity.Class / 10 != 14)
                {
                    switch (spell.ID)
                    {
                        case 11140:
                        case 11130:
                        case 11120:
                        case 11110:
                        case 11100:
                        case 11060:
                        case 11050:
                        case 11040:
                        case 11030:
                            client.RemoveSpell(spell);
                            break;
                    }
                }
                #endregion
                #region Reborn 1 and 2 and renacantion After class Trojan
                if (client.Entity.Class / 10 != 1 && client.Entity.FirstRebornClass == 15 && client.Entity.Class / 10 != 14 && client.Entity.Class / 10 != 13 && client.Entity.Class / 10 != 4 || client.Entity.Class / 10 != 1 && client.Entity.SecondRebornClass == 15 && client.Entity.Class / 10 != 14 && client.Entity.Class / 10 != 13 && client.Entity.Class / 10 != 4)
                {
                    switch (spell.ID)
                    {
                        case 1115://Hercules
                        case 10315://DragonWhirl
                        case 1270:
                        case 11990:
                        case 11980:
                        case 11970:
                        case 11960:
                            client.RemoveSpell(spell);
                            break;
                    }
                }
                if (client.Entity.FirstRebornClass == 15 && client.Entity.Class / 10 == 14 || client.Entity.FirstRebornClass == 15 && client.Entity.Class / 10 == 13 || client.Entity.FirstRebornClass == 15 && client.Entity.Class / 10 == 4 || client.Entity.SecondRebornClass == 15 && client.Entity.Class / 10 == 14 || client.Entity.SecondRebornClass == 15 && client.Entity.Class / 10 == 13 || client.Entity.SecondRebornClass == 15 && client.Entity.Class / 10 == 4)
                {
                    switch (spell.ID)
                    {
                        case 1115://Hercules
                        case 10315://DragonWhirl
                        case 11990:
                        case 11980:
                        case 11970:
                        case 11960:
                            client.RemoveSpell(spell);
                            break;
                    }
                }
                #endregion
                #region Reborn 1 and 2 and renacantion After class Warrior
                if (client.Entity.FirstRebornClass == 25 && client.Entity.Class / 10 == 14 || client.Entity.FirstRebornClass == 25 && client.Entity.Class / 10 == 4 || client.Entity.SecondRebornClass == 25 && client.Entity.Class / 10 == 14 || client.Entity.SecondRebornClass == 25 && client.Entity.Class / 10 == 4)
                {
                    switch (spell.ID)
                    {
                        case 1025:
                        case 11200:
                        case 10470:
                        case 11160:
                        case 1051:
                        case 1320:
                        case 1015:
                        case 12670:
                        case 12690:
                        case 12700:
                        case 12660:
                        case 12680:
                            client.RemoveSpell(spell);
                            break;
                    }
                }
                if (client.Entity.Class / 10 != 2 && client.Entity.FirstRebornClass == 25 && client.Entity.Class / 10 == 1 || client.Entity.Class / 10 != 2 && client.Entity.FirstRebornClass == 25 && client.Entity.Class / 10 == 5 || client.Entity.Class / 10 != 2 && client.Entity.FirstRebornClass == 25 && client.Entity.Class / 10 == 7 || client.Entity.Class / 10 != 2 && client.Entity.SecondRebornClass == 25 && client.Entity.Class / 10 == 1 || client.Entity.Class / 10 != 2 && client.Entity.SecondRebornClass == 25 && client.Entity.Class / 10 == 5 || client.Entity.Class / 10 != 2 && client.Entity.SecondRebornClass == 25 && client.Entity.Class / 10 == 7)
                {
                    switch (spell.ID)
                    {
                        case 1025:
                        case 1051:
                        case 11200:
                        case 10470:
                        case 11160:
                        case 1020:
                        case 12670:
                        case 12690:
                        case 12700:
                        case 12660:
                        case 12680:
                            client.RemoveSpell(spell);
                            break;
                    }
                }
                if (client.Entity.Class / 10 != 2 && client.Entity.FirstRebornClass == 25 && client.Entity.Class / 10 == 6 || client.Entity.Class / 10 != 2 && client.Entity.SecondRebornClass == 25 && client.Entity.Class / 10 == 6)
                {
                    switch (spell.ID)
                    {
                        case 1025:
                        case 1051:
                        case 11200:
                        case 10470:
                        case 11160:
                        case 1020:
                        case 12670:
                        case 12690:
                        case 12700:
                        case 12660:
                        case 12680:
                            client.RemoveSpell(spell);
                            break;
                    }
                }

                #endregion
                #region Reborn 1 and 2 and renacantion After class Water
                if (client.Entity.FirstRebornClass == 135 && client.Entity.Class / 10 == 4 || client.Entity.SecondRebornClass == 135 && client.Entity.Class / 10 == 4)
                {
                    switch (spell.ID)
                    {
                        case 1280:
                        case 1010:
                        case 1125:
                        case 1100:
                        case 1175:
                        case 1170:
                        case 1050:
                        case 1085:
                        case 5001:
                        case 1055:
                        case 1350:

                            client.RemoveSpell(spell);
                            break;
                    }
                }
                if (client.Entity.FirstRebornClass == 135 && client.Entity.Class / 10 == 14 && client.Entity.Class / 10 != 2 || client.Entity.SecondRebornClass == 135 && client.Entity.Class / 10 == 14 && client.Entity.Class / 10 != 2)
                {
                    switch (spell.ID)
                    {
                        case 1280:
                        case 1010:
                        case 1125:
                        case 5001:
                        case 1100:
                        case 1170:
                        case 1020:
                        case 1085:
                        case 1095:
                        case 1195:
                        case 1350:

                            client.RemoveSpell(spell);
                            break;
                    }
                }
                if (client.Entity.FirstRebornClass == 135 && client.Entity.Class / 10 == 1 || client.Entity.FirstRebornClass == 135 && client.Entity.Class / 10 == 2 || client.Entity.FirstRebornClass == 135 && client.Entity.Class / 10 == 5 || client.Entity.FirstRebornClass == 135 && client.Entity.Class / 10 == 7 || client.Entity.FirstRebornClass == 135 && client.Entity.Class / 10 == 6 || client.Entity.SecondRebornClass == 135 && client.Entity.Class / 10 == 1 || client.Entity.SecondRebornClass == 135 && client.Entity.Class / 10 == 2 || client.Entity.SecondRebornClass == 135 && client.Entity.Class / 10 == 5 || client.Entity.SecondRebornClass == 135 && client.Entity.Class / 10 == 7 || client.Entity.SecondRebornClass == 135 && client.Entity.Class / 10 == 6)
                {
                    switch (spell.ID)
                    {
                        case 1280:
                        case 1010:
                        case 1125:
                        case 1100:
                        case 5001:
                        case 1175:
                        case 1170:
                        case 1050:
                        case 1055:
                        case 1075:

                            client.RemoveSpell(spell);
                            break;
                    }
                }
                #endregion
                #region Reborn 1 and 2 and rencantion After class Monk
                if (client.Entity.FirstRebornClass == 65 && client.Entity.Class / 10 == 14 || client.Entity.SecondRebornClass == 65 && client.Entity.Class / 10 == 14)
                {
                    switch (spell.ID)
                    {
                        case 10381:
                        case 10490:
                        case 10390:
                        case 10430:
                        case 10395:
                        case 10410:
                        case 10421:
                        case 10422:
                        case 10423:
                        case 10424:
                            client.RemoveSpell(spell);
                            break;
                    }
                }
                if (client.Entity.Class / 10 != 6 && client.Entity.FirstRebornClass == 65 && client.Entity.Class / 10 != 14 || client.Entity.Class / 10 != 6 && client.Entity.SecondRebornClass == 65 && client.Entity.Class / 10 != 14)
                {
                    switch (spell.ID)
                    {
                        case 10381:
                        case 10490:
                        case 10390:
                        case 10400:
                        case 10430:
                        case 10395:
                        case 10410:
                        case 10421:
                        case 10422:
                        case 10423:
                        case 10424:
                            client.RemoveSpell(spell);
                            break;
                    }
                }
                #endregion
                #region _Skill Pure Torjan_
                if (client.Entity.Class / 10 != 1 && client.Entity.FirstRebornClass != 15 && client.Entity.SecondRebornClass != 15)
                {
                    switch (spell.ID)
                    {
                        case 10315:
                            client.RemoveSpell(spell);
                            break;
                    }
                }
                #endregion
                #region _Skill Pure Warrior_
                if (client.Entity.SecondRebornClass != 25)
                {
                    switch (spell.ID)
                    {
                        case 3060:
                            client.RemoveSpell(spell);
                            break;
                    }
                }
                #endregion
                #region _Skill Pure Water_

                if (client.Entity.Class != 131 && client.Entity.FirstRebornClass != 135 && client.Entity.SecondRebornClass != 135 || client.Entity.Class != 132 && client.Entity.FirstRebornClass != 135 && client.Entity.SecondRebornClass != 135 || client.Entity.Class != 133 && client.Entity.FirstRebornClass != 135 && client.Entity.SecondRebornClass != 135 || client.Entity.Class != 134 && client.Entity.FirstRebornClass != 135 && client.Entity.SecondRebornClass != 135 || client.Entity.Class != 135 && client.Entity.FirstRebornClass != 135 && client.Entity.SecondRebornClass != 135)
                {
                    switch (spell.ID)
                    {
                        case 30000:
                            client.RemoveSpell(spell);
                            break;
                    }
                }
                if (client.Entity.Class == 50 || client.Entity.Class == 51 || client.Entity.Class == 52 || client.Entity.Class == 53 || client.Entity.Class == 54 || client.Entity.Class == 55)
                {
                    switch (spell.ID)
                    {
                        case 30000:
                            client.RemoveSpell(spell);
                            break;
                    }
                }
                if (client.Entity.Class == 10 || client.Entity.Class == 11 || client.Entity.Class == 12 || client.Entity.Class == 13 || client.Entity.Class == 14 || client.Entity.Class == 15)
                {
                    switch (spell.ID)
                    {
                        case 30000:
                            client.RemoveSpell(spell);
                            break;
                    }
                }
                if (client.Entity.Class == 60 || client.Entity.Class == 61 || client.Entity.Class == 62 || client.Entity.Class == 63 || client.Entity.Class == 64 || client.Entity.Class == 65)
                {
                    switch (spell.ID)
                    {
                        case 30000:
                            client.RemoveSpell(spell);
                            break;
                    }
                }
                if (client.Entity.Class == 40 || client.Entity.Class == 41 || client.Entity.Class == 42 || client.Entity.Class == 43 || client.Entity.Class == 44 || client.Entity.Class == 45)
                {
                    switch (spell.ID)
                    {
                        case 30000:
                            client.RemoveSpell(spell);
                            break;
                    }
                }
                if (client.Entity.Class == 20 || client.Entity.Class == 21 || client.Entity.Class == 22 || client.Entity.Class == 23 || client.Entity.Class == 24 || client.Entity.Class == 25)
                {
                    switch (spell.ID)
                    {
                        case 30000:
                            client.RemoveSpell(spell);
                            break;
                    }
                }
                if (client.Entity.Class == 141 || client.Entity.Class == 142 || client.Entity.Class == 143 || client.Entity.Class == 143 || client.Entity.Class == 144 || client.Entity.Class == 145)
                {
                    switch (spell.ID)
                    {
                        case 30000:
                            client.RemoveSpell(spell);
                            break;
                    }
                }
                if (client.Entity.Class == 70 || client.Entity.Class == 71 || client.Entity.Class == 72 || client.Entity.Class == 73 || client.Entity.Class == 74 || client.Entity.Class == 75)
                {
                    switch (spell.ID)
                    {
                        case 30000:
                            client.RemoveSpell(spell);
                            break;
                    }
                }
                #region _Skill Pure Warrior_

                if (client.Entity.Class / 10 != 2 && client.Entity.FirstRebornClass != 25 || client.Entity.Class / 10 != 2 && client.Entity.SecondRebornClass != 25 || client.Entity.Class / 10 != 2 || client.Entity.FirstRebornClass != 25 || client.Entity.SecondRebornClass != 25)
                {
                    switch (spell.ID)
                    {
                        case 10311:
                            client.RemoveSpell(spell);
                            break;
                    }
                }

                #endregion
                #region _Skill Pure Fire

                if (client.Entity.Class / 10 != 14 && client.Entity.FirstRebornClass != 145 || client.Entity.Class / 10 != 14 && client.Entity.SecondRebornClass != 145 || client.Entity.Class / 10 != 14 || client.Entity.FirstRebornClass != 145 || client.Entity.SecondRebornClass != 145)
                {
                    switch (spell.ID)
                    {
                        case 10310:
                            client.RemoveSpell(spell);
                            break;
                    }
                }

                #endregion
                #region _Skill Pure Ninja_

                if (client.Entity.Class / 10 != 5 && client.Entity.FirstRebornClass != 55 || client.Entity.Class / 10 != 5 && client.Entity.SecondRebornClass != 55 || client.Entity.Class / 10 != 5 || client.Entity.FirstRebornClass != 55 || client.Entity.SecondRebornClass != 55)
                {
                    switch (spell.ID)
                    {
                        case 5003:
                            client.RemoveSpell(spell);
                            break;
                    }
                }

                #endregion
                #region _Skill Pure Monk_
                if (client.Entity.Class / 10 != 6 && client.Entity.FirstRebornClass != 65 || client.Entity.Class / 10 != 6 && client.Entity.SecondRebornClass != 65 || client.Entity.Class / 10 != 6 || client.Entity.FirstRebornClass != 65 || client.Entity.SecondRebornClass != 65)
                {
                    switch (spell.ID)
                    {
                        case 10405:
                            client.RemoveSpell(spell);
                            break;
                    }
                }

                #endregion
                #region _Skill Pure Archer_

                if (client.Entity.Class / 10 != 4 && client.Entity.FirstRebornClass != 45 || client.Entity.Class / 10 != 4 && client.Entity.SecondRebornClass != 45 || client.Entity.Class / 10 != 4 || client.Entity.FirstRebornClass != 45 || client.Entity.SecondRebornClass != 45)
                {
                    switch (spell.ID)
                    {
                        case 10313:
                            client.RemoveSpell(spell);
                            break;
                    }
                }

                #endregion
                #endregion
                if (client.Spells.ContainsKey(spell.ID))
                    if (spell.ID != (ushort)Game.Enums.SkillIDs.Reflect)
                        spell.Send(client);
            }
            #endregion
            #endregion
        }
    }
}